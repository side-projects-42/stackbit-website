<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Stackbit Blog]]></title><description><![CDATA[Where we post product updates and publish articles on JAMstack topic.]]></description><link>http://github.com/dylang/node-rss</link><generator>GatsbyJS</generator><lastBuildDate>Wed, 08 Sep 2021 18:21:35 GMT</lastBuildDate><item><title><![CDATA[The Jamstack Journey: A Guide on Transforming an Idea into a Website]]></title><description><![CDATA[It takes a lot to bring an idea to life on the web, even for the simplest of sites. Follow this guide for a detailed look at moving from concept to a website deployed to your domain.
]]></description><link>https://www.stackbit.com/blog/jamstack-journey-transforming-idea-to-website/</link><guid isPermaLink="false">https://www.stackbit.com/blog/jamstack-journey-transforming-idea-to-website/</guid><pubDate>Wed, 08 Sep 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;At its core, Jamstack was a revolution. It took the best part of the first 25+ years of website development and combined them into a powerful pattern that is used widely today. It has created an explosion of ideas and innovations that have helped developers across the world build websites that are more performant, more secure, less expensive, easier to scale, and (most importantly) fun to build!&lt;/p&gt;
&lt;p&gt;Instead of taking you on a theoretical journey and digging into the technical nuances of the Jamstack, we&apos;re going someplace else. We&apos;ll take a more tangible journey, as we step through the entire process of building a Jamstack website, from the little light bulb in your brain all the way to a physical website that real people can visit.&lt;/p&gt;
&lt;p&gt;These are the stops we&apos;ll make along the way:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Bring the design to life&lt;/li&gt;
&lt;li&gt;Find a developer&lt;/li&gt;
&lt;li&gt;Build the site (write the code)&lt;/li&gt;
&lt;li&gt;Review and test the site&lt;/li&gt;
&lt;li&gt;Deploy, edit, and repeat, repeat, repeat&lt;/li&gt;
&lt;li&gt;Or ... do it the Stackbit way!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Buckle up. Here we go!&lt;/p&gt;
&lt;h2&gt;Stop #1: Design&lt;/h2&gt;
&lt;p&gt;The first stop on the Jamstack journey is design — the process of visually representing your ideas.&lt;/p&gt;
&lt;h3&gt;From Spec to Delivery&lt;/h3&gt;
&lt;p&gt;The way this typically works is that you provide some form of &lt;em&gt;spec&lt;/em&gt; to a designer. The designer then takes that spec and turns it into one or more design files that show what should be built. That can include page layouts, individual components, or global patterns like colors, fonts, and typography.&lt;/p&gt;
&lt;h3&gt;Delivering a Good Spec&lt;/h3&gt;
&lt;p&gt;The “spec” you provide the designer should be more then, “I need a website.” Before you bring a designer into your project, consider spending time to gather the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A list of pages on the site, along with the purpose of each page. Bonus points if you also include content, as you&apos;ll reduce the variability of the design when it is transformed into code.&lt;/li&gt;
&lt;li&gt;Brand assets or other visual specifications you have — logos, colors, typography, etc.&lt;/li&gt;
&lt;li&gt;A list of websites that you really like and why you like them. The designer will want you to be happy, and the more you can tell them what you like, the higher the chance that they will deliver on your vision.&lt;/li&gt;
&lt;li&gt;A list of competitors. Even if the designer doesn&apos;t use inspiration from your competitors&apos; sites, it&apos;s nice for them to know where the competition stands and what it&apos;ll take to be noticed in the crowd.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The designer may ask you for more information, but this is a good start to get the conversation rolling.&lt;/p&gt;
&lt;h3&gt;Locating the Right Designer&lt;/h3&gt;
&lt;p&gt;If you have a designer already working with you, that&apos;s a bonus! If not, the cost and abilities of designers vary &lt;em&gt;widely&lt;/em&gt;. You could use a service like &lt;a href=&quot;https://www.fiverr.com/&quot;&gt;Fiverr&lt;/a&gt; and have a decent-sized website designed for a few hundred dollars (USD). Or you could hire a fancy agency and spend tens of thousands of dollars.&lt;/p&gt;
&lt;p&gt;Generally speaking, cost tends to be &lt;em&gt;somewhat&lt;/em&gt; proportional to experience and the quality you&apos;re going to get back. But that doesn&apos;t mean the inexpensive designer is going to provide an awful design. This is how I usually think about it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If I hire a designer on the cheap, I&apos;m going to have to do more work if I want to get something worthwhile out of it. I&apos;ll have to drive the process. I&apos;ll have to deliver a super tight spec so that they give me exactly what I&apos;m looking for.&lt;/li&gt;
&lt;li&gt;If I hire a fancy and expensive firm, I should expect to still have to put in time and effort, but should be led through the process and be left with something truly great.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Looking Toward Development&lt;/h3&gt;
&lt;p&gt;What&apos;s interesting about this process is that while design tends to be a fraction of the cost of development, it&apos;s also largely responsible for determining the complexity of the build. Granted, a developer can spend your money in a silly way and &lt;em&gt;over-engineer&lt;/em&gt; a website for you. But, &lt;em&gt;most of the time&lt;/em&gt;, the time a developer is going to spend building your site is determined by &lt;em&gt;their specification&lt;/em&gt; — the design files.&lt;/p&gt;
&lt;p&gt;The more interactive the design, the more it&apos;s going to cost to develop. The more unique each page is from the others, the more it&apos;s going to cost to develop.&lt;/p&gt;
&lt;p&gt;You don&apos;t have to be a fortune teller. Instead, leave a little room in your budget for going back to the designer after consulting with your developer. If the developer says you can save a thousand dollars by changing a feature, maybe you&apos;d want to spend another hundred to have the designer reimagine and simplify it.&lt;/p&gt;
&lt;h3&gt;The Deliverable&lt;/h3&gt;
&lt;p&gt;After going through the design phase, you&apos;re left with the &lt;em&gt;deliverables&lt;/em&gt; — artifacts you can pass on to the developer as their specification. &lt;a href=&quot;https://github.com/seancdavis/stackbit-jamstack-journey/tree/main/01-design&quot;&gt;Here&apos;s an example for a simple site&lt;/a&gt; that includes just four files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/seancdavis/stackbit-jamstack-journey/main/01-design/unmute--homepage--desktop.png&quot;&gt;Home page for large screens&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/seancdavis/stackbit-jamstack-journey/main/01-design/unmute--homepage--mobile.png&quot;&gt;Home page for small screens&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/seancdavis/stackbit-jamstack-journey/main/01-design/unmute--content-page.png&quot;&gt;Interior pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/seancdavis/stackbit-jamstack-journey/main/01-design/unmute--style-tiles.png&quot;&gt;Style tiles&lt;/a&gt; (i.e. global style definitions)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And this is an example of what a style tiles spec might look like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seancdavis/stackbit-jamstack-journey/main/01-design/unmute--style-tiles.png&quot; alt=&quot;An example of style tiles — styles that apply to all (or most) pages on the site&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(This example is from &lt;a href=&quot;https://www.unmutedstories.com/&quot;&gt;Unmute&lt;/a&gt;, a side project I&apos;m involved with.)&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Stops #2-4: Development&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Toot toot!&lt;/em&gt; This train keeps on rolling. The next several steps encompass the development phase of the project. Our Jamstack train makes three stops here because there are &lt;em&gt;usually&lt;/em&gt; three steps in this process, though the amount to which you are involved in each will vary depending on the developer you hire.&lt;/p&gt;
&lt;h3&gt;The Process&lt;/h3&gt;
&lt;p&gt;This process itself is similar to the design process in that it goes through these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Locate &amp;#x26; Estimate:&lt;/strong&gt; Developer provides estimate based on specification.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Build:&lt;/strong&gt; Developer &lt;em&gt;builds&lt;/em&gt; the site.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Review:&lt;/strong&gt; The developer delivers the code and you review to make sure it works.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Locate a Developer&lt;/h3&gt;
&lt;p&gt;You can go through much the same process as you did with design. If you have an in-house developer, great! If not, you can use a service like Fiverr and hire devs on the cheap. Or you can look to a more formal agency or dev shop to suit your needs.&lt;/p&gt;
&lt;p&gt;In this case, you don&apos;t have to build a spec for the developer. You already did that! The design files are your specification.&lt;/p&gt;
&lt;p&gt;Finding the right developer is crucial to this process, as well. And that&apos;s why I&apos;ve broken out the build portion (below) as three steps. Some developers (usually those you hire on the cheap) may only complete the first step in the process. But for you to truly achieve a useful and powerful Jamstack site, you&apos;ll want someone who can take you through all three.&lt;/p&gt;
&lt;h3&gt;The Build&lt;/h3&gt;
&lt;p&gt;These are the steps in the process:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Static build&lt;/li&gt;
&lt;li&gt;Templatizing the code&lt;/li&gt;
&lt;li&gt;Separating content from presentation&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can spend very little on web development and still get something that you can deploy out of it. Often, that means the developer only went through the first step and gave you static files. That&apos;s totally fine, but it will make adding new pages or editing existing content super difficult.&lt;/p&gt;
&lt;p&gt;The second step — &lt;em&gt;templatizing&lt;/em&gt; — aims to take the static code and turn it into modular pieces that can be reused. This process is explained in great length and technical detail &lt;a href=&quot;https://www.stackbit.com/blog/jamstack-journey-templatize-static-html/&quot;&gt;in this guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After the code has been modularized, it can be further adjusted to extract all the content and put it in a single place, such as a content management system. This process is explained in great length &lt;a href=&quot;https://www.stackbit.com/blog/jamstack-journey-separate-content/&quot;&gt;in this guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And the end of these three steps, you&apos;ll be left with a system that you can use to edit content without worrying about messing up the code. In fact, you ought to be able to edit the content without even &lt;em&gt;seeing&lt;/em&gt; the code.&lt;/p&gt;
&lt;h3&gt;Reviewing the Site&lt;/h3&gt;
&lt;p&gt;While the review process for design was more conceptual, with development, it&apos;s up to you to actually test that the website behaves as you&apos;d expect. In other words, you&apos;re &lt;em&gt;trying to break it&lt;/em&gt;. The developer should respond by fixing any bugs discovered within a certain timeframe.&lt;/p&gt;
&lt;p&gt;While the developer may not &lt;em&gt;deploy&lt;/em&gt; the code for you, they ought to be able to help you get it running so that you can test and send notes back to them.&lt;/p&gt;
&lt;h2&gt;Stop #5: Deploy &amp;#x26; Use!&lt;/h2&gt;
&lt;p&gt;At this point you have a site that is ready to go to production, so that&apos;s the next step. I recommend using that same developer to help you through that process, but I&apos;ve broken it out here because it tends to require more effort from you than the development phase of the project.&lt;/p&gt;
&lt;p&gt;Here are a few of the crucial steps in this process:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Choose a host and setup an account&lt;/li&gt;
&lt;li&gt;Buy and/or configure a domain name&lt;/li&gt;
&lt;li&gt;Add analytics tooling&lt;/li&gt;
&lt;li&gt;Add SEO content&lt;/li&gt;
&lt;li&gt;Use it!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&apos;s look at each of these briefly.&lt;/p&gt;
&lt;h3&gt;Hosting&lt;/h3&gt;
&lt;p&gt;The term &quot;Jamstack&quot; was coined by a startup called &lt;a href=&quot;https://www.netlify.com/&quot;&gt;Netlify&lt;/a&gt;. And they continue to lead the way in terms of deploying and hosting Jamstack websites. But there are other great tools out there, like &lt;a href=&quot;https://vercel.com/&quot;&gt;Vercel&lt;/a&gt;, &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;, &lt;a href=&quot;https://azure.microsoft.com/en-us/services/app-service/static/&quot;&gt;Azure Static Web Apps&lt;/a&gt;, and many more.&lt;/p&gt;
&lt;p&gt;Whatever you choose, you&apos;ll want to set up an account for yourself. Most of these services have a free (or low cost) tier that is enough to accommodate small websites.&lt;/p&gt;
&lt;p&gt;Once you have an account, you can add your developer, and they will hook it up so that the code is deployed. And then you will have a working website!&lt;/p&gt;
&lt;h3&gt;Domain&lt;/h3&gt;
&lt;p&gt;You&apos;ll want a domain name for your site, otherwise you&apos;ll be left with default names from your hosting provider. If you already have one, that&apos;s great!&lt;/p&gt;
&lt;p&gt;Your developer can tell you what you need to do to point the domain to your host, and then you&apos;ll be able to use your domain name to access your new website!&lt;/p&gt;
&lt;h3&gt;Analytics&lt;/h3&gt;
&lt;p&gt;Analytics is a crucial piece of the puzzle, because you want to know who is visiting your website. Some hosting providers (like Netlify) offer what they call server-side analytics, which tend to be the most accurate, though there are limitations to them. But if you&apos;re just getting started, it&apos;s easy enough to start with &lt;a href=&quot;https://marketingplatform.google.com/about/analytics/&quot;&gt;Google Analytics&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Tell your developer you want to install Google Analytics and they can help you through that process.&lt;/p&gt;
&lt;h3&gt;SEO&lt;/h3&gt;
&lt;p&gt;Of all these pre-launch steps, perhaps the trickiest to deal with is SEO. Usually I&apos;d expect a developer to prepare my site to support SEO. That means automatically generating a sitemap file and providing the ability to customize SEO meta values for any given page. (It would be worthwhile to mention this when first setting up the arrangement with the developer so that they are prepared.)&lt;/p&gt;
&lt;p&gt;You&apos;ll want to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Register your site (and sitemap) with &lt;a href=&quot;https://developers.google.com/search&quot;&gt;Google Search Console&lt;/a&gt;. This will help provide you with analytics on where you land in search results. It&apos;ll also help Google know where your site is and what its pages are.&lt;/li&gt;
&lt;li&gt;Add custom SEO values for every page on your site, including adding an image.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you don&apos;t feel confident in this step, you can also hire an SEO expert to help you through the process. These types of consultants also have a huge price range, from Fiverr to big agency. If you&apos;re just getting started, I recommend toward the cheaper option — just have someone give you a quick audit and make the changes they suggest.&lt;/p&gt;
&lt;p&gt;(Insider secret: Mostly what these SEO pros are doing is using some expensive tool, hooking up your site, running a report, and giving you the output of that report. The funny thing is, some of the people are often less expensive than buying the tools and doing the work yourself.)&lt;/p&gt;
&lt;h3&gt;Editing&lt;/h3&gt;
&lt;p&gt;When all of those last bits are in place, you should have a live site and it&apos;s time to start promoting it and keeping it up to date. Make a few changes to the content. Tell the world about it. and give yourself a pat on the back.&lt;/p&gt;
&lt;p&gt;BUT WAIT! Before we wrap this up, I want to spend a little time giving you what I think is a better way to get started.&lt;/p&gt;
&lt;h2&gt;Stop #6: An Easier Approach&lt;/h2&gt;
&lt;p&gt;If you&apos;re new to the world of creating websites, I think you should take a look at &lt;a href=&quot;https://www.stackbit.com/&quot;&gt;Stackbit&lt;/a&gt;! (Of course I do, I work there and am writing on their blog.)&lt;/p&gt;
&lt;p&gt;Stackbit is a site builder that specializes in Jamstack websites.&lt;/p&gt;
&lt;p&gt;Instead of going through that entire process (the first five stops on the Jamstack journey), you could do it all yourself in much less time for much less money. After &lt;a href=&quot;https://app.stackbit.com/login&quot;&gt;creating an account&lt;/a&gt;, Stackbit will give you a list of templates from which you can build your site. You&apos;ll then walk through the process of customizing it just for you.&lt;/p&gt;
&lt;p&gt;The catch here is that Stackbit isn&apos;t just another WordPress or Squarespace, even though it may feel like it at first. Stackbit works to be super transparent about where your code and content live. What that means is that you can start this journey on your own, without a designer or a developer, at no cost other than your time. And you&apos;ll still have access to the code and content that powers your site. Once you&apos;re up and running, if you need a little help, &lt;em&gt;that&apos;s&lt;/em&gt; when you can bring in a designer, developer, or SEO expert to make some suggestions or additions to your new site.&lt;/p&gt;
&lt;p&gt;If that sounds like a walk in the park, &lt;a href=&quot;https://app.stackbit.com/create&quot;&gt;give it a try&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;In any case, I hope you&apos;ve enjoyed your ride, and I&apos;d love to learn more about your &lt;em&gt;Jamstack Journey&lt;/em&gt;. &lt;a href=&quot;https://twitter.com/seancdavis29&quot;&gt;Let&apos;s chat&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[How to Separate Content from Website Code]]></title><description><![CDATA[It's much easier to maintain a site over time when the content is separate from the code. Walk through that process using a real example with Eleventy.
]]></description><link>https://www.stackbit.com/blog/jamstack-journey-separate-content/</link><guid isPermaLink="false">https://www.stackbit.com/blog/jamstack-journey-separate-content/</guid><pubDate>Tue, 24 Aug 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;We covered the process of moving from static HTML files to a &lt;a href=&quot;https://www.seancdavis.com/blog/wtf-is-ssg/&quot;&gt;static site generator&lt;/a&gt; (SSG) &lt;a href=&quot;/blog/jamstack-journey-templatize-static-html/&quot;&gt;in the precursor to this article&lt;/a&gt;. Here we&apos;re going to look at taking your SSG game to the next level by transforming it into content-driven engine. Together, these two steps make up a few parts of &lt;em&gt;The Jamstack Journey&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Let&apos;s dive in!&lt;/p&gt;
&lt;h2&gt;How a Content-Driven Website Works&lt;/h2&gt;
&lt;p&gt;There are two main steps in the process of transforming a templatized site into one that is content-driven:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Separate content from presentation&lt;/li&gt;
&lt;li&gt;Abstract repeatable components&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Separate Content from Presentation&lt;/h3&gt;
&lt;p&gt;The first step in the process is to separate content from presentation. Your templatized website likely has a number of HTML files representing the content of your site. (In our templatized example, we also used &lt;code&gt;.njk&lt;/code&gt; files.)&lt;/p&gt;
&lt;p&gt;For example, you might have a blog post represented as &lt;code&gt;my-first-post.html&lt;/code&gt; that looks something like this:&lt;/p&gt;
&lt;img alt=&quot;Blog post after templatizing&quot; src=&quot;/images/210824--post-after-templatizing.png&quot; class=&quot;small no-border&quot;&gt;
&lt;p&gt;It doesn&apos;t have any layout elements because those have all been abstracted away in your template, but it still has HTML code, which effects the structure — the &lt;em&gt;presentation&lt;/em&gt; — of the page.&lt;/p&gt;
&lt;p&gt;Converting this to a content driven approach means we can convert the HTML file into a content-based file, like markdown (e.g. &lt;code&gt;my-first-post.md&lt;/code&gt;). And then that content can be fed into the main post layout. Like this:&lt;/p&gt;
&lt;img alt=&quot;Blog-post after content-driven transformation&quot; src=&quot;/images/210824--after-transformation.png&quot; class=&quot;no-border&quot;&gt;
&lt;p&gt;If this doesn&apos;t make sense, don&apos;t worry yet. We&apos;re going to go through a real-world example.&lt;/p&gt;
&lt;h3&gt;Abstract Repeatable Components&lt;/h3&gt;
&lt;p&gt;This process forces us to develop a &lt;em&gt;shape&lt;/em&gt; for our content. Doing so will help us uncover opportunities to further simplify templates by combining and abstracting repeatable structures. If this also has your head spinning, it&apos;s okay. We&apos;ll look at an example of this in action, too.&lt;/p&gt;
&lt;h2&gt;Benefits of a Content-Driven Website&lt;/h2&gt;
&lt;p&gt;The process of separating content from presentation has a number of benefits. These are the primary reasons I go through through this effort:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It reduces the potential for introducing new bugs through content. When you force your editors to write HTML code just to add content to your site, you are greatly increasing your risk for new bugs that come from unexpected or bad HTML code.&lt;/li&gt;
&lt;li&gt;Less technical content editors can contribute without learning code.&lt;/li&gt;
&lt;li&gt;It&apos;s more pleasant to author content. Markdown is built to get out of your way. Instead of wrapping a top-level heading in an &lt;code&gt;&amp;#x3C;h1&gt;&lt;/code&gt; tag, you just precede the line with &lt;code&gt;#&lt;/code&gt;. There are no paragraph tags — they are inferred.&lt;/li&gt;
&lt;li&gt;Markdown is faster to write, too! (At least once you get the hang of it.)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What about Content Management Systems?&lt;/h2&gt;
&lt;p&gt;If we&apos;re talking about separating content from presentation, shouldn&apos;t we be talking about content management systems (CMS), too?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(Great question, Sean.)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Yes, this would be the perfect time to introduce a CMS into your project. What we&apos;re doing here is substituting a more formal CMS with markdown files. Think of markdown files as the data coming from your CMS. In fact, you could technically pull content from a CMS &lt;em&gt;and&lt;/em&gt; convert it to markdown files. I like this approach because a) it&apos;s simpler than wiring up a whole CMS, but b) can still work well with your setup if you choose to use a CMS.&lt;/p&gt;
&lt;h2&gt;Step 1: The Templatized Site&lt;/h2&gt;
&lt;p&gt;With that, let&apos;s get started!&lt;/p&gt;
&lt;p&gt;Following the templatizing tutorial, we were left with &lt;a href=&quot;https://github.com/seancdavis/stackbit-jamstack-journey/tree/6e9cb47140e5818b7b97ff314b8f89f9162b88ed/03-templated-site&quot;&gt;this code&lt;/a&gt;. That&apos;s where we&apos;re going to begin for this exercise.&lt;/p&gt;
&lt;p&gt;Add the contents of the example templatized project to some directory on your machine. &lt;a href=&quot;https://github.com/seancdavis/stackbit-jamstack-journey/archive/refs/tags/v1-draft.zip&quot;&gt;Here&apos;s a link to download the larger example&lt;/a&gt;. After doing that, you can find the appropriate files in the &lt;code&gt;03-templated-site&lt;/code&gt; directory. Move these files into a new directory on your machine. Your folder&apos;s contents &lt;a href=&quot;https://github.com/seancdavis/stackbit-jamstack-journey/tree/5c82f41/04-content-driven-site&quot;&gt;should look like this&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now we&apos;re ready to get started. We&apos;re going to do a series of abstractions to get to our final content-driven site. What we&apos;ll focus on below are four steps that represent a smaller part of a larger effort. The code I&apos;ll share in the end will have made more abstractions, but we&apos;ll aim to arm you with the tools you need to get there.&lt;/p&gt;
&lt;p&gt;To make sure everything is in order before we get going, it&apos;d be safe to reinstall your dependencies and then start the development server.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install
npm run dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then visit localhost:8000 in your browser and you should see the site.&lt;/p&gt;
&lt;h2&gt;Step 2: Simplify Pages&lt;/h2&gt;
&lt;p&gt;The easiest step in this process is setting up our interior pages. Right now, our privacy and terms pages are &lt;code&gt;.njk&lt;/code&gt; files, which means they are littered with HTML code. The beauty of Eleventy is that if we simply change the file extension in these files to &lt;code&gt;.md&lt;/code&gt; they will work immediately.&lt;/p&gt;
&lt;p&gt;Give it a try. Rename &lt;code&gt;privacy.njk&lt;/code&gt; to &lt;code&gt;privacy.md&lt;/code&gt; and &lt;code&gt;terms.njk&lt;/code&gt; to &lt;code&gt;terms.md&lt;/code&gt;. Notice that you don&apos;t even have to do anything and they work perfectly fine! That&apos;s the magic of markdown. Technically, HTML is valid markdown code.&lt;/p&gt;
&lt;p&gt;But, even though it works, we have an opportunity to drastically simplify this content by removing the HTML. I ran the HTML code &lt;a href=&quot;https://www.browserling.com/tools/html-to-markdown&quot;&gt;through an online converter&lt;/a&gt;. You could do the same or you could reference the new files (&lt;a href=&quot;https://raw.githubusercontent.com/seancdavis/stackbit-jamstack-journey/63eb311e7d6a0bbd8f4d942ecbc9a8bb4b8997a2/04-content-driven-site/terms.md&quot;&gt;Terms here&lt;/a&gt;, and &lt;a href=&quot;https://raw.githubusercontent.com/seancdavis/stackbit-jamstack-journey/63eb311e7d6a0bbd8f4d942ecbc9a8bb4b8997a2/04-content-driven-site/privacy.md&quot;&gt;Privacy here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;⚠️ &lt;strong&gt;Notice that the little YAML markdown snippet at the top of these files did not change.&lt;/strong&gt; That piece is still relevant so that Eleventy knows which template to use and how to pass on the title of each page to that template.&lt;/p&gt;
&lt;p&gt;After these changes, your code &lt;a href=&quot;https://github.com/seancdavis/stackbit-jamstack-journey/tree/63eb311/04-content-driven-site&quot;&gt;should look like this&lt;/a&gt; and you should be able to visit localhost:8000/terms and localhost:8000/privacy with both looking as they did before you made the change.&lt;/p&gt;
&lt;h2&gt;Step 3: Shared Global Data&lt;/h2&gt;
&lt;p&gt;We could jump to the home page next, but that one is a doozy, so let&apos;s move on to something a little simpler first — shared global data. There is often content that you want to share across multiple pages or templates. Eleventy is built to support this with its &lt;a href=&quot;https://www.11ty.dev/docs/data-global/&quot;&gt;global data files&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One example I see in looking at the site as it is right now are the details about the next event. So what I would do is place these details in their own data file in &lt;code&gt;_data/next_event.json&lt;/code&gt;. Create that file and add the details:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &quot;date&quot;: &quot;October 1, 2021&quot;,
    &quot;time&quot;: &quot;7 PM ET&quot;,
    &quot;location&quot;: &quot;Virtual&quot;,
    &quot;cost&quot;: &quot;Free&quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We&apos;re using these in two places today — the home page jumbotron and the header in the content page. Since both files (&lt;code&gt;index.njk&lt;/code&gt; and &lt;code&gt;_includes/content-page.njk&lt;/code&gt;) are using the Nunjucks templating language, you can render this value using a &lt;a href=&quot;https://mozilla.github.io/nunjucks/templating.html#variables&quot;&gt;Nunjucks variable&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For example, the code in the content page template would look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;#x3C;span class=&quot;hidden lg:inline-block lg:mr-2 xl:mr-3&quot;&gt;{{ next_event.date }}&amp;#x3C;/span&gt;
&amp;#x3C;span class=&quot;hidden lg:inline-block lg:mx-2 xl:mx-3&quot;&gt;{{ next_event.time }}&amp;#x3C;/span&gt;
&amp;#x3C;span class=&quot;hidden xl:inline-block lg:mx-2 xl:mx-3&quot;&gt;{{ next_event.location }}&amp;#x3C;/span&gt;
&amp;#x3C;span class=&quot;hidden lg:inline-block lg:mx-2 xl:mx-3&quot;&gt;{{ next_event.cost }}&amp;#x3C;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The home page can follow a similar pattern. &lt;a href=&quot;https://github.com/seancdavis/stackbit-jamstack-journey/commit/737599767da0ce5ad044985499811dd1d76c01bb&quot;&gt;Here is a summary of the changes I made&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It&apos;s a good idea to keep this pattern in mind and employ it whenever you find opportunities to share &lt;em&gt;content&lt;/em&gt; (not code) among multiple pages or templates. For example, another use case might be to build a list of social media account URLs so that you can separate the links from the markup and style of the icons.&lt;/p&gt;
&lt;p&gt;Give your browser another look to make sure that those values were updated as you&apos;d expect.&lt;/p&gt;
&lt;h2&gt;Step 4: The Home Page&lt;/h2&gt;
&lt;p&gt;Let&apos;s take a look at the home page next. We won&apos;t abstract this in quite the same way as the interior pages. This is because when we templatized the site, we used a super generic template and put all the unique stuff directly in the home page.&lt;/p&gt;
&lt;p&gt;What we want to do here is now extract the content from the home page so that it is trivial to edit without scrolling through the hundreds of lines of code. But we&apos;re in a good position to do that.&lt;/p&gt;
&lt;p&gt;First, move your &lt;code&gt;index.njk&lt;/code&gt; file to &lt;code&gt;_includes/home.njk&lt;/code&gt;. Doing this effectively removes our home page. We still need that index page. But now we want it to be a content page. So let&apos;s create a new file in the root of the project and call in &lt;code&gt;index.md&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Refresh your browser and see that there&apos;s nothing there! That&apos;s because Eleventy is now reading this as your home page, but there&apos;s no content and you haven&apos;t specified a layout. So let&apos;s do that. Change the file to look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-md&quot;&gt;---
layout: home
---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now refresh your browser and we&apos;re back.&lt;/p&gt;
&lt;p&gt;Then we can move through the file meticulously and extract elements one at a time until we have separated all our content from the template.&lt;/p&gt;
&lt;p&gt;For example, say we wanted to adjust the copy under &quot;Unmute yours&quot; in the jumbotron.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/210824--unmute-jumbotron.png&quot; alt=&quot;Unmute website jumbotron&quot;&gt;&lt;/p&gt;
&lt;p&gt;Maybe we make a new object for &lt;code&gt;jumbotron&lt;/code&gt; and then add a &lt;code&gt;body&lt;/code&gt; section to it. Your &lt;code&gt;index.md&lt;/code&gt; file would look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-md&quot;&gt;---
layout: home
jumbotron:
    body: |-
        Join us for an evening of storytelling with some of your favorite fellow
        nerds. We&apos;ll laugh. We&apos;ll cry. We may even hear a story without any
        industry jargon!
---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And you could replace the section in &lt;code&gt;_includes/home.njk&lt;/code&gt; to look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;#x3C;p class=&quot;max-w-md mb-8 mx-auto md:mx-0&quot;&gt;
  {{ jumbotron.body }}
&amp;#x3C;/p&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a long and often tedious process, but it&apos;s a game-changer when it comes to editing your site down the road. I&apos;ll leave the rest up to you and share where I ended up after going through the exercise. But first I want to talk about the process of abstracting components.&lt;/p&gt;
&lt;h2&gt;Step 5: Abstracting Components&lt;/h2&gt;
&lt;p&gt;Extracting content from your pages and templates requires that you define the structure of your data. In Step 4, we could see the beginning of that structure — e.g. &lt;code&gt;jumbotron&lt;/code&gt; was going to be its own section, presumably with multiple properties within it.&lt;/p&gt;
&lt;p&gt;The resulting structure can help you determine where you can tighten up your template code further by looking for repeatable patterns.&lt;/p&gt;
&lt;p&gt;For example, in this home page, each of the speakers has a similar shape to its content. So, even though you could define each speaker individually, it probably makes sense to develop a repeatable pattern, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;speakers:
    - name: Speaker Name
      position: Title / Company
      fun_fact: Fun Fact
      image: /images/speakers/speaker-01.png
      social:
          twitter: &apos;#&apos;
          facebook: &apos;#&apos;
          instagram: &apos;#&apos;
    - name: Speaker Name
      position: Title / Company
      fun_fact: Fun Fact
      image: /images/speakers/speaker-02.png
      social:
          twitter: &apos;#&apos;
          facebook: &apos;#&apos;
    - name: Speaker Name
      position: Title / Company
      fun_fact: Fun Fact
      image: /images/speakers/speaker-03.png
      social:
          twitter: &apos;#&apos;
    - name: Speaker Name
      position: Title / Company
      fun_fact: Fun Fact
      image: /images/speakers/speaker-04.png
      social:
          twitter: &apos;#&apos;
          facebook: &apos;#&apos;
          instagram: &apos;#&apos;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This repeatable pattern hints that we could also abstract the code. Instead of having individual HTML for each speaker, we could create another &lt;em&gt;include&lt;/em&gt; template and render the content of each speaker.&lt;/p&gt;
&lt;p&gt;Our &lt;code&gt;_includes/home.njk&lt;/code&gt; file would include this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-njk&quot;&gt;&amp;#x3C;div class=&quot;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-{{ lineup.speakers.length }}&quot;&gt;
  {% for speaker in speakers %}
    {% include &quot;speaker.njk&quot; %}
  {% endfor %}
&amp;#x3C;/div&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then &lt;code&gt;_includes/speaker.njk&lt;/code&gt; could look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-njk&quot;&gt;&amp;#x3C;div class=&quot;mx-4 mb-8 lg:mb-0 template-home--speaker&quot;&gt;
  &amp;#x3C;span class=&quot;block mb-2&quot;&gt;
    &amp;#x3C;img src=&quot;{{ speaker.image }}&quot; alt=&quot;&quot;/&gt;
  &amp;#x3C;/span&gt;
  &amp;#x3C;strong class=&quot;block mb-2 text-lg&quot;&gt;{{ speaker.name }}&amp;#x3C;/strong&gt;
  &amp;#x3C;span class=&quot;block text-sm&quot;&gt;
    &amp;#x3C;em&gt;{{ speaker.position }}&amp;#x3C;/em&gt;
  &amp;#x3C;/span&gt;
  &amp;#x3C;span class=&quot;block text-sm&quot;&gt;{{ speaker.fun_fact }}&amp;#x3C;/span&gt;

  &amp;#x3C;div class=&quot;flex items-center justify-center mt-4&quot;&gt;
    {% if speaker.social.twitter %}
      &amp;#x3C;a href=&quot;{{ speaker.social.twitter }}&quot; class=&quot;mx-1 hover:opacity-75 transition-all duration-300&quot;&gt;
        &amp;#x3C;span class=&quot;inline-block bg-red text-white rounded-full p-2 overflow-hidden h-8 w-8 component--icon&quot;&gt;
          {% include &quot;svg/twitter.svg&quot; %}
        &amp;#x3C;/span&gt;
      &amp;#x3C;/a&gt;
    {% endif %}
    {% if speaker.social.facebook %}
      &amp;#x3C;a href=&quot;{{ speaker.social.facebook }}&quot; class=&quot;mx-1 hover:opacity-75 transition-all duration-300&quot;&gt;
        &amp;#x3C;span class=&quot;inline-block bg-red text-white rounded-full p-2 overflow-hidden h-8 w-8 component--icon&quot;&gt;
          {% include &quot;svg/facebook.svg&quot; %}
        &amp;#x3C;/span&gt;
      &amp;#x3C;/a&gt;
    {% endif %}
    {% if speaker.social.instagram %}
      &amp;#x3C;a href=&quot;{{ speaker.social.instagram }}&quot; class=&quot;mx-1 hover:opacity-75 transition-all duration-300&quot;&gt;
        &amp;#x3C;span class=&quot;inline-block bg-red text-white rounded-full p-2 overflow-hidden h-8 w-8 component--icon&quot;&gt;
          {% include &quot;svg/instagram.svg&quot; %}
        &amp;#x3C;/span&gt;
      &amp;#x3C;/a&gt;
    {% endif %}
  &amp;#x3C;/div&gt;
&amp;#x3C;/div&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&apos;s 30-some lines of HTML, instead of more than 100! And if you want to change the presentation of a speaker, you only have to change it in one place.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/seancdavis/stackbit-jamstack-journey/commit/b12ed710e55919ce73181c85f110c5ec027eac9a&quot;&gt;Here are the changes I made to the home page&lt;/a&gt;. And &lt;a href=&quot;https://github.com/seancdavis/stackbit-jamstack-journey/tree/b12ed71/04-content-driven-site&quot;&gt;here is what the resulting code looks like&lt;/a&gt;. At this point, you have a website that is not just easy to edit its structure or presentation, but it&apos;s also trivial to create new pages or adjust values on the home page without searching through a bunch of HTML code to get there.&lt;/p&gt;
&lt;p&gt;Go ahead, try it! Create a new &lt;code&gt;.md&lt;/code&gt; file. Give it a &lt;code&gt;content-page&lt;/code&gt; layout (like Terms and Privacy) and &lt;code&gt;title&lt;/code&gt;, then see it come to life!&lt;/p&gt;
&lt;p&gt;Now that you now how to templatize a static HTML site &lt;em&gt;and&lt;/em&gt; you can separate its content from presentation, you have two very important tools necessary to create rock solid websites with the Jamstack.&lt;/p&gt;
&lt;!-- To put these pieces together within the entire site-building process, see our full Jamstack Journey Guide. --&gt;</content:encoded></item><item><title><![CDATA[How to Convert Static HTML into Powerful Templates]]></title><description><![CDATA[Learn how to take a handful of static HTML files and convert them into templated files that will help you minimize errors and work more efficiently.
]]></description><link>https://www.stackbit.com/blog/jamstack-journey-templatize-static-html/</link><guid isPermaLink="false">https://www.stackbit.com/blog/jamstack-journey-templatize-static-html/</guid><pubDate>Tue, 10 Aug 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;You&apos;ve gone through the design process in building a website, but now you&apos;re left with a handful of HTML files, along with some images and one or more CSS and JavaScript files, and you want to know what to do with them? Great! Let&apos;s talk about it.&lt;/p&gt;
&lt;p&gt;You &lt;em&gt;could&lt;/em&gt; deploy (i.e. publish) them, and eventually you will, otherwise no one will see your site. But deploying at this point is only going to get you so far. Inevitably, you’re going to want to change something with the site, and then what? Are you going to go all the way through the design process again? That sounds … &lt;em&gt;painful.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A more sustainable approach is to take the static HTML content you were given and &lt;em&gt;templatize it!&lt;/em&gt; Make it easier for you to work with — to make changes and to create new pages — when the need arises.&lt;/p&gt;
&lt;h2&gt;Why templatize a website?&lt;/h2&gt;
&lt;p&gt;This process has one major benefit — &lt;em&gt;reusability&lt;/em&gt;. It makes the act of adjusting structure or content relatively trivial when compared with having to work with individual HTML files. That process can be further enhanced by separating content from presentation, so that when all you need to do is change a few words, you know right where to go and never have to mess with any of the code. (We have a detailed guide for that, but you’ll want to follow this one first.)&lt;/p&gt;
&lt;p&gt;Consider two typical and simple content pages that most sites have — &lt;em&gt;Terms &amp;#x26; Conditions&lt;/em&gt; and &lt;em&gt;Privacy Policy&lt;/em&gt;. They often have the same header and footer. It’s just the content in the middle of the page that differs (though the &lt;em&gt;structure&lt;/em&gt; is likely similar). With those pages as separate HTML files, when you want to change something in a shared section — like the header or footer — you have to make the change in both places.&lt;/p&gt;
&lt;p&gt;Expand that example to a site that has hundreds of pages with a similar structure (like blog posts). You’d be making that change hundreds or &lt;em&gt;thousands&lt;/em&gt; of times, depending on the size of your site.&lt;/p&gt;
&lt;p&gt;Following a software development principle called &lt;a href=&quot;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&quot;&gt;&lt;em&gt;don’t repeat yourself&lt;/em&gt;&lt;/a&gt; (often referred to as &lt;em&gt;DRY code&lt;/em&gt;), you could build the site with reusable pieces. Then you can make each change once and have it work everywhere. This is the magic of templatizing.&lt;/p&gt;
&lt;h2&gt;How templatizing works&lt;/h2&gt;
&lt;p&gt;When you have no templates and only HTML, the code on each page is unique and lives within its own file. Take a super simple site that has a home page (&lt;code&gt;index.html&lt;/code&gt;), along with Terms (&lt;code&gt;terms.html&lt;/code&gt;) and Privacy (&lt;code&gt;privacy.html&lt;/code&gt;) pages. Your files look like this, where the dark blue boxes represent the code unique to each page:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/210720--templatizing-before.png&quot; alt=&quot;Before templatizing, each page is unique.&quot;&gt;&lt;/p&gt;
&lt;p&gt;Now let’s say the header on the home page is unique, but the header on the Terms and Privacy (i.e. &lt;em&gt;interior&lt;/em&gt;) pages could be shared. And maybe the footer is the same on every page. Then we could make the header and footer into their own files and share them among multiple pages. Like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/210720--templatizing-after.png&quot; alt=&quot;After templatizing, the header and footer can be shared where appropriate.&quot;&gt;&lt;/p&gt;
&lt;p&gt;After creating these templates, changes to the footer only need to be made once and every page is updated to reflect the new changes.&lt;/p&gt;
&lt;p&gt;This is a super simplistic view to show the power that even small abstractions can add to the longevity of your site. What we’ll do here will be slightly different in practice.&lt;/p&gt;
&lt;p&gt;But how do we actually do this?&lt;/p&gt;
&lt;h2&gt;Static site generators are here to save the day!&lt;/h2&gt;
&lt;p&gt;Unfortunately, the web isn’t built to work with templates. We can’t actually just add a &lt;code&gt;footer.html&lt;/code&gt; file and then tell every page to include it and have the browser work. In the end, the browser expects a &lt;em&gt;single&lt;/em&gt; HTML file. In other words, the browser actually &lt;em&gt;wants&lt;/em&gt; the non-templatized version of the two scenarios above.&lt;/p&gt;
&lt;p&gt;But that’s not how we want to work. It’s tedious and prone to errors. If you want the footer to look the same everywhere, it should &lt;em&gt;be&lt;/em&gt; the same everywhere. Otherwise, you risk making inadvertent changes on random pages. To help with this process we can use a tool called a &lt;a href=&quot;https://www.seancdavis.com/blog/wtf-is-ssg/&quot;&gt;static site generator&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://jamstack.org/generators/&quot;&gt;There are many to choose from&lt;/a&gt;, perhaps including some popular ones you may have heard of, such as &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;, &lt;a href=&quot;https://www.gatsbyjs.com/&quot;&gt;Gatsby&lt;/a&gt;, &lt;a href=&quot;https://nextjs.org/&quot;&gt;Next.js&lt;/a&gt;, or &lt;a href=&quot;https://gohugo.io/&quot;&gt;Hugo&lt;/a&gt;. Here we’re going to use one called &lt;a href=&quot;https://www.11ty.dev/&quot;&gt;Eleventy&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;What’s so great about Eleventy?&lt;/h2&gt;
&lt;p&gt;Eleventy isn’t as popular as some of its competition, but it is supreme in its approach, which is simplicity. It is modeled after Jekyll, which provides a super low barrier to getting started when compared with the rest of the field. But unlike Jekyll, it is written entirely in JavaScript, which makes it a great fit for folks getting started with building websites.&lt;/p&gt;
&lt;p&gt;Eleventy can also be super powerful. It takes more customization as your site grows in complexity, but it can grow with you. &lt;a href=&quot;https://www.seancdavis.com/&quot;&gt;My site&lt;/a&gt; has several hundred pages and, at the time of writing this, is built entirely through Eleventy.&lt;/p&gt;
&lt;p&gt;Okay, &lt;em&gt;now&lt;/em&gt; are you convinced you should templatize those HTML files?&lt;/p&gt;
&lt;p&gt;Hooray! Me too.&lt;/p&gt;
&lt;p&gt;Let’s do it!&lt;/p&gt;
&lt;h2&gt;Step 1: The Static Site&lt;/h2&gt;
&lt;p&gt;Let’s work through this process together using a real-world example. We’re going to build a super simple version of &lt;a href=&quot;https://www.unmutedstories.com/&quot;&gt;the Unmute website&lt;/a&gt;. (Unmute is a real thing — a side project I’m working on with a few nerdy friends.)&lt;/p&gt;
&lt;p&gt;We’ll have a unique &lt;a href=&quot;https://stackbit-jamstack-journey.netlify.app/&quot;&gt;home&lt;/a&gt; &lt;a href=&quot;https://stackbit-jamstack-journey.netlify.app/&quot;&gt;page&lt;/a&gt; along with two similar content pages, mimicking a &lt;a href=&quot;https://stackbit-jamstack-journey.netlify.app/terms/&quot;&gt;Terms &amp;#x26; Conditions page&lt;/a&gt; and a &lt;a href=&quot;https://stackbit-jamstack-journey.netlify.app/privacy/&quot;&gt;Privacy Policy page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let’s say the output of the whatever process you went through to obtain the files for your site left you with &lt;a href=&quot;https://github.com/seancdavis/stackbit-jamstack-journey/tree/2c600cc/02-static-site/www&quot;&gt;this mess&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;css/styles.css&lt;/code&gt; to hold all your styling for the site.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;js/bundle.js&lt;/code&gt; which handles the carousel at the bottom of the home page.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;images&lt;/code&gt; as a house for all visual assets.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;index.html&lt;/code&gt; to represent your home page.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;content-page.html&lt;/code&gt; to represent all other internal pages.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Gotcha!&lt;/strong&gt;
Take note that we’re making a big assumption here. We’re assuming that you won’t need to mess with your &lt;code&gt;styles.css&lt;/code&gt; or &lt;code&gt;bundle.js&lt;/code&gt; file. They were bundled up nicely for you by the freelance dev and you won’t need to make changes.&lt;/p&gt;
&lt;p&gt;In the real world, it can be a tricky process to take big, bulky, obfuscated CSS and JS files and create a method for adding to them. And it gets even more complicated if you ever have to go back to the developer for changes &lt;em&gt;after&lt;/em&gt; you’ve customized one of these.&lt;/p&gt;
&lt;p&gt;As a result, we’re considering that process outside the scope of this guide. However, if this need arises, I’ve written a couple relatively simple guides on how to achieve this for both &lt;a href=&quot;https://www.seancdavis.com/blog/getting-started-with-postcss/&quot;&gt;CSS&lt;/a&gt; and &lt;a href=&quot;https://www.seancdavis.com/blog/javascript-webpack-build-pipeline/&quot;&gt;JavaScript&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Step 2: Create a New Project&lt;/h2&gt;
&lt;p&gt;Add the contents of the example static project to some directory on your machine. &lt;a href=&quot;https://github.com/seancdavis/stackbit-jamstack-journey/archive/refs/tags/v1-draft.zip&quot;&gt;Here’s a link to download the larger example&lt;/a&gt;. After doing that, you can find the appropriate files in the &lt;code&gt;02-static-site/www&lt;/code&gt; directory. Move these files into a new directory on your machine. Your folder’s contents &lt;a href=&quot;https://github.com/seancdavis/stackbit-jamstack-journey/tree/88e200d/03-templated-site&quot;&gt;should look like this&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Step 3: Setup Eleventy&lt;/h2&gt;
&lt;p&gt;We’re going to assume you have a computer that is setup for web development. (If not, &lt;a href=&quot;https://www.seancdavis.com/blog/new-mac-dev-guide/&quot;&gt;here’s a guide&lt;/a&gt; I wrote on setting up a new Mac for development.)&lt;/p&gt;
&lt;p&gt;Once you’re ready to go, open up your command line or terminal application, change into the project directory and install Eleventy:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# navigate to your new project
cd path/to/my/project

# setup project for Eleventy
npm init -y

# install eleventy
npm install -D @11ty/eleventy
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note: If you’re tracking your changes with&lt;/em&gt; &lt;a href=&quot;https://git-scm.com/&quot;&gt;&lt;em&gt;Git&lt;/em&gt;&lt;/a&gt;&lt;em&gt;, this is a great spot to initialize the repository (&lt;/em&gt;&lt;code&gt;git init&lt;/code&gt;&lt;em&gt;) and add&lt;/em&gt; &lt;code&gt;node_modules&lt;/code&gt; &lt;em&gt;to a&lt;/em&gt; &lt;code&gt;.gitignore&lt;/code&gt; &lt;em&gt;file. If you’re not working with Git, don’t worry about this right now.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I like to add a few shortcuts after this installation to make working with sites more consistent across my machine. Open your &lt;code&gt;package.json&lt;/code&gt; file and add the following to the &lt;code&gt;scripts&lt;/code&gt; section:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    // ...
    &quot;scripts&quot;: {
        &quot;build&quot;: &quot;eleventy&quot;,
        &quot;clean&quot;: &quot;rm -rf _site&quot;,
        &quot;dev&quot;: &quot;eleventy --serve --port 8000&quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/seancdavis/stackbit-jamstack-journey/tree/1c80367/03-templated-site/package.json#L6-L10&quot;&gt;Here’s what that file should look like at this point&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now we have a way to run an Eleventy development server. Run the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# start eleventy server
npm run dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should now have a dev server running at localhost:8000. And you’ll notice you now have a new &lt;code&gt;_site&lt;/code&gt; directory in your project. Eleventy did this automatically for you.&lt;/p&gt;
&lt;p&gt;You can open your browser and visit localhost:8000 to see your site, and … &lt;em&gt;something doesn’t look right.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/210720--unmute-unstyled.png&quot; alt=&quot;Where the heck are our styles??&quot;&gt;&lt;/p&gt;
&lt;p&gt;That’s because we didn’t tell Eleventy where our assets are. To do this, we must &lt;a href=&quot;https://www.11ty.dev/docs/config/&quot;&gt;add an Eleventy config file&lt;/a&gt; at &lt;code&gt;.eleventy.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;module.exports = function (eleventyConfig) {
    // Copy static assets over to _site directory.
    eleventyConfig.addPassthroughCopy(&apos;css&apos;);
    eleventyConfig.addPassthroughCopy(&apos;images&apos;);
    eleventyConfig.addPassthroughCopy(&apos;js&apos;);
    // Return configuration object.
    return {};
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Give the browser a refresh and everything should look good again!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/210720--unmute-styled.png&quot; alt=&quot;Phew! That’s better.&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: Throughout this guide, when making changes, you may have to clear the cache on your browser. Most browsers have an option to reload while clearing the cache for that site.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Step 4: The Default Layout&lt;/h2&gt;
&lt;p&gt;In Eleventy (and most static site generators), each page is wrapped in a &lt;em&gt;layout&lt;/em&gt;. A layout is just a fancy term for a template. We’re going to begin by creating a default layout. This will be code that every page uses. We do this because, as we’ll soon see, Eleventy supports nesting layouts within one another. So what we’re going to do here is define our base layout.&lt;/p&gt;
&lt;p&gt;In looking at &lt;code&gt;index.html&lt;/code&gt; and &lt;code&gt;content-page.html&lt;/code&gt;, the code that is consistent between the two is mostly contained within the &lt;code&gt;&amp;#x3C;head&gt;&lt;/code&gt; tag, but also includes a few lines at the very bottom of the file. Here’s what it looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;#x3C;!DOCTYPE html&gt;
&amp;#x3C;html lang=&quot;en&quot;&gt;
    &amp;#x3C;head&gt;
        &amp;#x3C;meta charset=&quot;UTF-8&quot; /&gt;
        &amp;#x3C;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;
        &amp;#x3C;link rel=&quot;apple-touch-icon&quot; sizes=&quot;180x180&quot; href=&quot;/images/favicon/apple-touch-icon.png&quot; /&gt;
        &amp;#x3C;link rel=&quot;icon&quot; type=&quot;image/png&quot; sizes=&quot;32x32&quot; href=&quot;/images/favicon/favicon-32x32.png&quot; /&gt;
        &amp;#x3C;link rel=&quot;icon&quot; type=&quot;image/png&quot; sizes=&quot;16x16&quot; href=&quot;/images/favicon/favicon-16x16.png&quot; /&gt;
        &amp;#x3C;link rel=&quot;manifest&quot; href=&quot;/images/favicon/site.webmanifest&quot; /&gt;
        &amp;#x3C;link rel=&quot;mask-icon&quot; href=&quot;/images/favicon/safari-pinned-tab.svg&quot; color=&quot;#5bbad5&quot; /&gt;
        &amp;#x3C;meta name=&quot;msapplication-TileColor&quot; content=&quot;#da532c&quot; /&gt;
        &amp;#x3C;meta name=&quot;theme-color&quot; content=&quot;#ffffff&quot; /&gt;
        &amp;#x3C;title&gt;Stackbit Demo: Unmute&amp;#x3C;/title&gt;
        &amp;#x3C;link rel=&quot;stylesheet&quot; href=&quot;/css/styles.css&quot; /&gt;
        &amp;#x3C;script&gt;
            function onInit(callback) {
                if (typeof App !== &apos;undefined&apos;) return callback();
                setTimeout(onInit, 250, callback);
            }
        &amp;#x3C;/script&gt;
    &amp;#x3C;/head&gt;
    &amp;#x3C;body class=&quot;font-default&quot;&gt;
        &amp;#x3C;!-- This was the unique code --&gt;

        &amp;#x3C;script src=&quot;/js/bundle.js&quot;&gt;&amp;#x3C;/script&gt;
    &amp;#x3C;/body&gt;
&amp;#x3C;/html&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Put that code in a new file: &lt;code&gt;_includes/default.njk&lt;/code&gt;. And in the spot where the unique code existed, add the Nunjucks variable &lt;code&gt;content&lt;/code&gt;. (More on this in a moment.) Your resulting file should &lt;a href=&quot;https://github.com/seancdavis/stackbit-jamstack-journey/tree/7122194/03-templated-site/_includes/default.njk&quot;&gt;look like this&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Three items are important to note in this new template:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We changed the file extension from &lt;code&gt;.html&lt;/code&gt; to &lt;code&gt;.njk&lt;/code&gt;. This means we’re using &lt;a href=&quot;https://mozilla.github.io/nunjucks/&quot;&gt;Nunjucks&lt;/a&gt; as our templating language. Eleventy supports &lt;a href=&quot;https://www.11ty.dev/docs/languages/&quot;&gt;a number of&lt;/a&gt; languages. Nunjucks is nice for staying with our theme of using JavaScript. And it’s also fairly minimalistic, which is nice for our example.&lt;/li&gt;
&lt;li&gt;We added a single Nunjucks variable, &lt;code&gt;content&lt;/code&gt; and passed a &lt;code&gt;safe&lt;/code&gt; filter to it. &lt;code&gt;content&lt;/code&gt; tells Nunjucks to render the content of the each page in that area. That means all of our page content will fall where you see &lt;code&gt;{{ content | safe }}&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;_includes&lt;/code&gt; directory has some special characteristics that make it easy to … well, &lt;em&gt;include&lt;/em&gt; files. &lt;a href=&quot;https://www.11ty.dev/docs/config/#directory-for-includes&quot;&gt;Read more here&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Nothing has changed if we refresh the browser because we haven’t wired these up yet. When we go to the home page, we’re still just looking at &lt;code&gt;index.html&lt;/code&gt;, which isn’t using our new layout yet.&lt;/p&gt;
&lt;h2&gt;Step 5: Wrap the home page in the new layout&lt;/h2&gt;
&lt;p&gt;Let’s adjust our home page to use the new layout.&lt;/p&gt;
&lt;p&gt;Begin by changing &lt;code&gt;index.html&lt;/code&gt; to &lt;code&gt;index.njk&lt;/code&gt;. This is going to help us in the future when we want to use Nunjucks variables or tags in the page.&lt;/p&gt;
&lt;p&gt;Now, remove all the code you extracted to create the layout and refresh your browser.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;What the heck?&lt;/em&gt; You’re back to a page without styles. What happened?&lt;/p&gt;
&lt;p&gt;What happened is that you removed your references to the CSS and JS files, which were in the &lt;code&gt;&amp;#x3C;head&gt;&lt;/code&gt; and near the bottom of the &lt;code&gt;&amp;#x3C;body&gt;&lt;/code&gt;, but you didn’t tell Eleventy to use a layout. So let’s change that. Add the following at the top of your &lt;code&gt;index.njk&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-md&quot;&gt;---
layout: default
---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now refresh the browser and you should see your styles come back!&lt;/p&gt;
&lt;p&gt;This style code — three hyphens, then some code, then three more hyphens — is called &lt;a href=&quot;https://www.seancdavis.com/blog/wtf-is-frontmatter/&quot;&gt;&lt;em&gt;frontmatter&lt;/em&gt;&lt;/a&gt;. It’s like &lt;em&gt;code before the code&lt;/em&gt;. It provides us a space to place meta information about that file that won’t ultimately be written to your browser screen.&lt;/p&gt;
&lt;p&gt;The last thing to note here is that you will want to either remove or change the comments in your code. Nunjucks comments look a little different than HTML comments (although they will ultimately still be treated as comments, so you can ignore this if you’d like).&lt;/p&gt;
&lt;p&gt;Any code between &lt;code&gt;&amp;#x3C;!--&lt;/code&gt; and &lt;code&gt;--&gt;&lt;/code&gt; is an HTML comment. Either remove these or change them to &lt;code&gt;{#&lt;/code&gt; and &lt;code&gt;#}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the end, &lt;a href=&quot;https://github.com/seancdavis/stackbit-jamstack-journey/tree/b0b554e/03-templated-site/index.njk&quot;&gt;this is what your new &lt;code&gt;index.njk&lt;/code&gt; file should look like&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Step 6: Content Pages&lt;/h2&gt;
&lt;p&gt;Now let’s add a couple plain content pages. Our developer delivered a generic content page to us called &lt;code&gt;content-page.html&lt;/code&gt;. We want to use that to create multiple pages. In this case, maybe those are Terms &amp;#x26; Conditions and Privacy Policy pages.&lt;/p&gt;
&lt;p&gt;To do this we first want to make our generic content page a layout. To do that rename &lt;code&gt;content-page.html&lt;/code&gt; to &lt;code&gt;content-page.njk&lt;/code&gt; and move it into the &lt;code&gt;_includes&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;Now, here’s a really weird and super cool thing about Eleventy — we can nest layouts in other layouts. What that means is that because the content page has code that we’ve already used in &lt;code&gt;_includes/default.njk&lt;/code&gt;, we can reuse that with the content page layout.&lt;/p&gt;
&lt;p&gt;To do this, remove the shared code from &lt;code&gt;_includes/content-page.njk&lt;/code&gt; and specify the layout in the frontmatter at the top of the file.&lt;/p&gt;
&lt;p&gt;Now you can create two new files, &lt;code&gt;terms.njk&lt;/code&gt; (or &lt;code&gt;terms.html&lt;/code&gt; — we aren’t doing anything special at this point) and &lt;code&gt;privacy.njk&lt;/code&gt;. Add some content (I used &lt;a href=&quot;https://app.termsfeed.com/&quot;&gt;a generator&lt;/a&gt; for the content and you can use what I have) and tell Eleventy to use the “content-page” layout:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-md&quot;&gt;---
layout: &apos;content-page&apos;
---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can go to localhost:8000/terms and localhost:8000/privacy and you should see your nicely-formatted content.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/210720--terms-page.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;Here are the links to these files at this stage:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/seancdavis/stackbit-jamstack-journey/tree/b709edb/03-templated-site/_includes/content-page.njk&quot;&gt;&lt;code&gt;_includes/content-page.njk&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/seancdavis/stackbit-jamstack-journey/tree/b709edb/03-templated-site/terms.njk&quot;&gt;&lt;code&gt;terms.njk&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/seancdavis/stackbit-jamstack-journey/tree/b709edb/03-templated-site/privacy.njk&quot;&gt;&lt;code&gt;privacy.njk&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Step 7: Extracting Shared Code&lt;/h2&gt;
&lt;p&gt;Now you’re in good shape and have a pattern to create new pages with a nice layout. Any new file you create with the “content-page” layout will now have a header and footer wrapping your content.&lt;/p&gt;
&lt;p&gt;But, we still have an opportunity for some improvement. While we are using a layout to create multiple pages, which means we’re sharing code, we do still have some duplicated code. Now the home page (&lt;code&gt;index.njk&lt;/code&gt;) and the content page layout (&lt;code&gt;_includes/content-page.njk&lt;/code&gt;) have separate footers. Even though they look the same, you’d have to edit the content in both if you wanted to make a global change.&lt;/p&gt;
&lt;p&gt;Let’s make that easier. Pull the footer content into its own file in the &lt;code&gt;_includes&lt;/code&gt; directory, &lt;code&gt;_includes/footer.njk&lt;/code&gt; (&lt;a href=&quot;https://github.com/seancdavis/stackbit-jamstack-journey/tree/f1af38f/03-templated-site/_includes/footer.njk&quot;&gt;see here&lt;/a&gt;). Then remove that shared code from the home page and content page layout and replace it with &lt;a href=&quot;https://mozilla.github.io/nunjucks/templating.html#include&quot;&gt;the &lt;code&gt;include&lt;/code&gt; Nunjucks tag&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-njk&quot;&gt;{% include &quot;footer.njk&quot; %}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(See the new &lt;a href=&quot;https://github.com/seancdavis/stackbit-jamstack-journey/tree/f1af38f/03-templated-site/index.njk&quot;&gt;&lt;code&gt;index.njk&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/seancdavis/stackbit-jamstack-journey/tree/f1af38f/03-templated-site/_includes/content-page.njk&quot;&gt;&lt;code&gt;_includes/content-page.njk&lt;/code&gt;&lt;/a&gt; files.)&lt;/p&gt;
&lt;p&gt;Now you can make the change once and see it work everywhere. For example, you could &lt;a href=&quot;https://github.com/seancdavis/stackbit-jamstack-journey/commit/bf4025d&quot;&gt;add links to the terms and privacy pages&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: You could have chosen to include the footer directly in the default layout, or even reference in in the default layout. This is entirely up to you and your project. In this case, I’m accounting for some future template that won’t want the footer. But if we’re sure every page wants the footer, maybe it makes sense to put it in the default layout.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Other Opportunities&lt;/h2&gt;
&lt;p&gt;As your site grows, you’ll find other opportunities for improvement and abstraction (&lt;em&gt;abstraction&lt;/em&gt; being the process of cleaning up code to be shared).&lt;/p&gt;
&lt;h3&gt;Shared Images&lt;/h3&gt;
&lt;p&gt;For example, many of the shapes you see on the pages are SVG elements. They are images, but represented with HTML code. And many of them are used more than once.&lt;/p&gt;
&lt;p&gt;You could remove the &lt;code&gt;&amp;#x3C;svg&gt;&lt;/code&gt; elements and turn them into their own file in the &lt;code&gt;_includes&lt;/code&gt; directory. (You could even put them in their own subdirectory so they are grouped together.) Then you can reference them with a Nunjucks tag.&lt;/p&gt;
&lt;h3&gt;Unique Titles&lt;/h3&gt;
&lt;p&gt;You may also run into the opposite issue at some point, where you’ll have code or content in a shared space, but you want it to be unique to some particular template. For example, you’ll want the title of the page (contained in the &lt;code&gt;&amp;#x3C;title&gt;&lt;/code&gt; attribute) to be unique to each page. But that code is nestled up in the default layout.&lt;/p&gt;
&lt;p&gt;This is where Nunjucks variables and page frontmatter comes into play. Take the terms page, for example. You could add a &lt;code&gt;title&lt;/code&gt; attribute in its frontmatter:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-md&quot;&gt;---
layout: &apos;content-page&apos;
title: &apos;Terms &amp;#x26; Conditions&apos;
---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, in the &lt;code&gt;_includes/default.njk&lt;/code&gt; layout, you can use the &lt;code&gt;title&lt;/code&gt; variable.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-njk&quot;&gt;&amp;#x3C;title&gt;{{ title }}&amp;#x3C;/title&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You could make the same change to the &lt;code&gt;_includes/content-page.njk&lt;/code&gt; body so that you don’t have to write the &lt;code&gt;&amp;#x3C;h1&gt;&lt;/code&gt; on every page. Something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-njk&quot;&gt;&amp;#x3C;h1&gt;{{ title }}&amp;#x3C;/h1&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The world is your oyster when it comes to finding these efficiencies. It’s all about how you want to work and how you want the framework (Eleventy) to work for you.&lt;/p&gt;
&lt;p&gt;I bucketed a handful of these changes together and did them all at once. &lt;a href=&quot;https://github.com/seancdavis/stackbit-jamstack-journey/commit/6e9cb47&quot;&gt;Here are the changes I made&lt;/a&gt; and &lt;a href=&quot;https://github.com/seancdavis/stackbit-jamstack-journey/tree/6e9cb47/03-templated-site&quot;&gt;the files in the project at this point&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;Phew! Take a break, give yourself a pat on the back. This process can be a harrowing one, especially the first time around. If you’ve made it through, you deserve a break and some ice cream.&lt;/p&gt;
&lt;p&gt;To quickly recap. What we started with was a jumbled mess of HTML files, handed to you by some developer. We took those files and turned them into layouts (or templates) that we could use to quickly create new pages with the same design.&lt;/p&gt;
&lt;p&gt;Where do we go from here?&lt;/p&gt;
&lt;p&gt;I’m glad you let me ask that question on your behalf, because we have a great next step! Instead of using &lt;code&gt;.html&lt;/code&gt; or &lt;code&gt;.njk&lt;/code&gt; files for our content, you can double-down on frontmatter and markdown to create a truly powerful editing experience that gets all the code out of your way and keeps you focused on only the content.&lt;/p&gt;
&lt;p&gt;And, lucky for you, &lt;a href=&quot;/blog/jamstack-journey-separate-content&quot;&gt;we have a guide&lt;/a&gt; to keep this thing going and to walk you through that process.&lt;/p&gt;
&lt;p&gt;But first, go get that ice cream.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Deploying Jamstack sites to Azure]]></title><description><![CDATA[Announcing the Stackbit Azure Marketplace app — quick and easy Jamstack site creation and deployment using your existing Azure account.]]></description><link>https://www.stackbit.com/blog/deploy-to-azure/</link><guid isPermaLink="false">https://www.stackbit.com/blog/deploy-to-azure/</guid><pubDate>Tue, 06 Jul 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;For those of you who’d like to get started immediately, follow &lt;a href=&quot;https://app.stackbit.com/create?deployment=azure&quot;&gt;this link&lt;/a&gt; to connect your Microsoft Azure account and create a website quickly.&lt;/p&gt;
&lt;h2&gt;
Azure and Static Web Apps&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://azure.microsoft.com/&quot;&gt;Azure&lt;/a&gt; is Microsoft’s cloud computing service. Developers use it for building and deploying all sorts of applications and services. Many larger organizations rely on their secure, global data centers for managing enterprise applications. But an increasing number of smaller teams are embracing the platform, especially ones with quick scale in mind.&lt;/p&gt;
&lt;p&gt;Last week Microsoft officially released Azure Static Web Apps at their virtual &lt;a href=&quot;https://docs.microsoft.com/en-us/events/learntv/swa-cts-june-2021/?WT.mc_ID=swa-124587-memckenn&quot;&gt;Code to Scale event&lt;/a&gt;. This announcement means that Microsoft users can now use Github CI/CD pipelines and their favorite development tools to deploy static resources and even trigger Azure API functions. &lt;/p&gt;
&lt;p&gt;The fact that we can now deploy Jamstack sites to Azure is a great sign that more and more platforms are embracing this approach to websites. But it does require some hand wiring of service and a certain depth of technical know-how to get going. &lt;/p&gt;
&lt;p&gt;This is why Stackbit makes it easy for Azure users to deploy their Jamstack sites to this application service without needing to touch a single configuration file. Just copy and paste an ID when you build your site with Stackbit and we can connect all the pieces together. Here is Stackbit’s CEO, &lt;a href=&quot;https://twitter.com/ohadpr?s=20&quot;&gt;Ohad Eder-Pressman&lt;/a&gt;, presenting this integration at last week’s event.  &lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/_NBFGJCXAYg&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;h2&gt;Managing Static Web Apps&lt;/h2&gt;
&lt;p&gt;There are two different ways to connect your Stackbit site with Azure. You can either let us create new resource groups for you, or you can deploy your site to a resource group that you have already created. A resource group is a container that holds related resources for an Azure solution. You can think of it as a space on the Azure platform with a URL where you can deploy files and trigger events. &lt;/p&gt;
&lt;p&gt;If you want us to create new resources for you on Azure, all we need is your &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/active-directory/develop/quickstart-create-new-tenant&quot;&gt;Azure Active Directory Tenant ID&lt;/a&gt; when you create a new site. This is easy to locate once you log in to Azure and select the Active Directory service. This is similar to how you log into &lt;a href=&quot;https://github.com&quot;&gt;Github&lt;/a&gt;, &lt;a href=&quot;https://netlify.com&quot;&gt;Netlify&lt;/a&gt;, or &lt;a href=&quot;https://www.contentful.com/&quot;&gt;Contentful&lt;/a&gt; to associate them with your Stackbit account. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/j4lxXu_VItc7DUqT6n38qMydKAgon9fygBz8yCDeJRaleb2Hq72AIuDzDGUMT1uOGacZ7wqtcLD-KHJuDyOUOPKSNwR3PAacPCP0JKxQHwTt0Z1tQCkqxrIxKZ4bB4eVx-cg3Mj0&quot;&gt;&lt;/p&gt;
&lt;p&gt;This saves you from logging into them each time you make a site and lets our platform allocate the needed resources when a new site is created.&lt;/p&gt;
&lt;iframe src=&quot;https://player.vimeo.com/video/570870203?background=1&quot; width=&quot;640&quot; height=&quot;353&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; fullscreen; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;This is a great option for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Independent developers &lt;/li&gt;
&lt;li&gt;Small teams&lt;/li&gt;
&lt;li&gt;Organizations that are creating multiple sites &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The other approach is to use the &lt;a href=&quot;https://azuremarketplace.microsoft.com/en-us/marketplace/apps/stackbit1606600345290.stackbithq?tab=overview&quot;&gt;Stackbit Azure Marketplace app&lt;/a&gt; to create a resource group preconfigured for working with Stackbit. After creating your Static Web App with our app, it will show you an Essentials menu with stats and a “Managed resource group ID”. Use this to only give Stackbit’s platform access to that one specific resource. &lt;/p&gt;
&lt;p&gt;This is preferred by many:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Development teams wanting to keep tight control of resource allocations &lt;/li&gt;
&lt;li&gt;Enterprise customers who have organizational resource management policies &lt;/li&gt;
&lt;li&gt;Agencies managing multiple applications across multiple Azure accounts&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can learn more about both options in our &lt;a href=&quot;https://www.stackbit.com/docs/user-manual/services/#azure&quot;&gt;documentation article&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;More flexibility&lt;/h2&gt;
&lt;p&gt;We believe that developers should control their stacks and have the freedom to select any tools they wish. With this announcement, we are one step closer to that goal. We also want to celebrate the fact that Azure has released Static Web Apps, another sign that the Jamstack approach is gaining traction. &lt;/p&gt;
&lt;p&gt;Azure users, to deploy your first Stackbit, start &lt;a href=&quot;http://app.stackbit.com/create?deployment=azure&amp;#x26;theme=diy&quot;&gt;here&lt;/a&gt;. And to our trusted dev community: What other deployment options and tools do you want to see integrated with Stackbit? &lt;a href=&quot;https://stackbit.com/contact&quot;&gt;Drop us a line&lt;/a&gt; and let us know.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[We've brought the VS code experience to the Stackbit editor]]></title><description><![CDATA[No more making code edits in GitHub and waiting for an entire site rebuild to see if your change/fix worked.]]></description><link>https://www.stackbit.com/blog/vs-code-experience-to-stackbit-editor/</link><guid isPermaLink="false">https://www.stackbit.com/blog/vs-code-experience-to-stackbit-editor/</guid><pubDate>Mon, 05 Apr 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;At Stackbit, we&apos;ve made it super easy to create a Jamstack website (check out &lt;a href=&quot;https://jamstackthemes.dev/&quot;&gt;jamstackthemes.dev&lt;/a&gt;) and introduced the &lt;a href=&quot;https://www.stackbit.com/&quot;&gt;editing experience for Jamstack websites&lt;/a&gt;. We try to be mindful of inefficiencies and various annoyances that occur when developing websites; as part of that, we recently polled our developers to see what they wished our editor could do for that. One thing that folks kept asking for was an always-on, hosted dev server running their SSG in develop mode, an easy way to make code changes to that server, and a &lt;strong&gt;super tight feedback loop&lt;/strong&gt;. We already use the hosted dev server to power our visual editor&apos;s live preview, so the only thing missing was integrating a code editor.&lt;/p&gt;
&lt;p&gt;Several days later, we had a prototype of VS Code integrated into the Stackbit editor, and it instantly felt like an awesome developer experience.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/code_screenshot%20(1).png&quot;&gt;&lt;/p&gt;
&lt;p&gt;Imagine not having to maintain local dev environments for all the websites you&apos;ve ever touched? With the Stackbit editor, you can make that layout change, CSS tweak, or 1:00 a.m. refactoring session without downloading any source code, run &lt;em&gt;npm install&lt;/em&gt;, launch a dev server, and wait forever. Moreover, you&apos;ll always get a super tight feedback loop with a side-by-side view of your code and a live preview of your website, instantly responding to any change.&lt;/p&gt;
&lt;iframe src=&quot;https://player.vimeo.com/video/531485888?background=1&quot; width=&quot;640&quot; height=&quot;353&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; fullscreen; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;Here are some ideas for things you can do with the code editor:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make CSS changes&lt;/li&gt;
&lt;li&gt;Paste/modify code snippets (e.g. analytics, forms, etc.)&lt;/li&gt;
&lt;li&gt;Tweak layouts to move fields around&lt;/li&gt;
&lt;li&gt;Make quick edits to content that&apos;s just sitting in templates&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Get back to Hacker News, Netflix, or learning Rust sooner&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Code &amp;#x26; Content Highlighting&lt;/h2&gt;
&lt;p&gt;When you edit any website with Stackbit, there&apos;s a lot of magic happening in the background that figures out the relationship between the website&apos;s code, its structured content, and the visual result (markup, pixels, etc). When an editor clicks an H1 to edit it, we know what flat-file stores the string for that H1 or where it is in a headless CMS schema and make the change for the editor. But what if we could use that same data to give developers a better developer experience and editing experience? We gave it a shot, and it&apos;s pretty cool. &lt;strong&gt;With the code editor open, click any component on your website, and the code editor will highlight the file (and often the line of code driving it too). This is typically a template, section, or component file&lt;/strong&gt;.&lt;/p&gt;
&lt;iframe src=&quot;https://player.vimeo.com/video/531490124?background=1&quot; width=&quot;640&quot; height=&quot;360&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; fullscreen; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;Here are some examples of code/content highlighting&apos;s power:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use highlighting to learn how a new website/theme works&lt;/li&gt;
&lt;li&gt;Learn how the content schema drives different components&lt;/li&gt;
&lt;li&gt;Explore component hierarchies&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We&apos;ve really enjoyed working with the integrated code editor over the last few weeks; it has shortened many of our daily workflows. Moreover, code highlighting makes it easy to explore new code or come back to code you wrote a while back (did I write that?!). The Stackbit editor doesn&apos;t necessarily replace a full-blown local development environment, but it can be super useful for many use cases - we&apos;re learning about new ones every day.&lt;/p&gt;
&lt;p&gt;Lastly, the integrated code editor gives an opportunity to make a quick GIF that really brings home how the Stackbit editor works.&lt;/p&gt;
&lt;iframe src=&quot;https://player.vimeo.com/video/531506722?background=1&quot; width=&quot;640&quot; height=&quot;360&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; fullscreen; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;</content:encoded></item><item><title><![CDATA[How to Build a Jamstack Website with an SEO-Friendly Theme]]></title><description><![CDATA[There are many SEO benefits to using Jamstack technologies when building your website. In this article, we will create and SEO-optimize a Jamstack website with Stackbit’s search-engine friendly theme, Azimuth.]]></description><link>https://www.stackbit.com/blog/seo-friendly-jamstack-website/</link><guid isPermaLink="false">https://www.stackbit.com/blog/seo-friendly-jamstack-website/</guid><pubDate>Mon, 22 Mar 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;As an SEO consultant, I am frequently approached by clients who want to rebuild their old websites. They often don’t know much about website builders or SEO-friendly themes, but they do know that their website is ranking poorly on Google and they are looking for a change. &lt;/p&gt;
&lt;p&gt;Now, marketers can rebuild their website or create a brand new SEO-friendly website from scratch with the help of Stackbit’s &lt;a href=&quot;https://stackbit.com/blog/seo-tools/&quot;&gt;new SEO features&lt;/a&gt;, which are built-in and incorporated into the Studio’s themes. That’s right, even if you are not a developer, you can now build search-engine friendly, custom websites on the Jamstack!&lt;/p&gt;
&lt;h2&gt;Why is it important to have an SEO-friendly website?&lt;/h2&gt;
&lt;p&gt;A good search engine optimization strategy will help your website get more traffic, increase brand awareness, and showcase authority versus other competitors in your niche. &lt;/p&gt;
&lt;p&gt;Making sure that your &lt;a href=&quot;https://backlinko.com/on-page-seo&quot;&gt;on-page SEO&lt;/a&gt; elements are optimized, and the technical SEO is set up properly behind the scenes, is a must for any website that wants to appear on the first page of Google search results. &lt;/p&gt;
&lt;p&gt;It’s no wonder that many businesses and startups are looking for solutions to problems that arise while using traditional content management systems, like the need to install many plugins (often paid ones), slow page speed, and indexing issues, all of which are contributing factors to lower SEO rankings.&lt;/p&gt;
&lt;p&gt;You might want to consider moving away from traditional content management systems like WordPress, Wix, and Squarespace to a new era of statically-built websites, using the &lt;a href=&quot;https://jamstack.wtf/&quot;&gt;Jamstack ecosystem&lt;/a&gt;. &lt;/p&gt;
&lt;h2&gt;What is Jamstack, you ask? &lt;/h2&gt;
&lt;p&gt;JAM stands for &lt;strong&gt;JavaScript, APIs and Markup&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;According to &lt;a href=&quot;https://jamstack.org/&quot;&gt;jamstack.org&lt;/a&gt;: &lt;em&gt;“Jamstack is an architecture designed to make the web faster, more secure, and easier to scale. The core principles of pre-rendering, and decoupling, enable sites and applications to be delivered with greater confidence and resilience than ever before.”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Jamstack is not one tool, but a set of concepts that work together to create HTML-based static websites. It’s a modern approach to website building that allows flexibility and customization for developers and marketers.&lt;/p&gt;
&lt;h2&gt;Is Jamstack a good fit for your needs?&lt;/h2&gt;
&lt;p&gt;Most businesses can benefit from changing a &lt;a href=&quot;https://wpamelia.com/static-vs-dynamic-website/&quot;&gt;dynamic website&lt;/a&gt; to a &lt;a href=&quot;https://dev.to/gtanyware/what-is-a-static-website-4k3o&quot;&gt;static &lt;/a&gt;one. With the help of Stackbit, anyone can easily edit any Jamstack website, or &lt;a href=&quot;https://jamstackthemes.dev/&quot;&gt;build a new one&lt;/a&gt; from scratch, including SaaS or e-commerce websites. Marketers can collaboratively edit pages, &lt;a href=&quot;https://serpwolf.net/blog/beginners-guide-writing-seo-friendly-blog-posts/&quot;&gt;optimize blog posts&lt;/a&gt; and quickly build custom landing pages.&lt;/p&gt;
&lt;p&gt;Switching to Jamstack can also make sense financially for your business, considering that Jamstack-built websites often have lower hosting costs. You don’t need servers running PHP or databases to support your website. Hosting static files is basically free with services like &lt;a href=&quot;http://netlify.com&quot;&gt;Netlify&lt;/a&gt; or &lt;a href=&quot;https://vercel.com/&quot;&gt;Vercel&lt;/a&gt;, both providing free tiers that should suffice for small-to-medium-sized businesses. &lt;/p&gt;
&lt;h2&gt; How is Jamstack good for SEO?&lt;/h2&gt;
&lt;p&gt;There are several SEO &lt;a href=&quot;https://jamstack.wtf/#benefits&quot;&gt;benefits&lt;/a&gt; to using Jamstack technologies when building your website.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Speed:&lt;/strong&gt; Jamstack websites deliver faster page-load times, thus improving performance and user experience. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Indexing:&lt;/strong&gt; With the help of &lt;a href=&quot;https://jamstack.org/generators/&quot;&gt;static site generators&lt;/a&gt;, Jamstack websites pre-render content as HTML files, which makes it easier for Google bots to crawl the website, therefore eliminating possible indexation issues.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security&lt;/strong&gt;: Jamstack websites are stored on a &lt;a href=&quot;https://www.cloudflare.com/learning/cdn/what-is-a-cdn/&quot;&gt;content distribution network&lt;/a&gt; (CDN) and there is no need to worry about server or database breaches since there is no server or database attached to the website. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Transparent site structure:&lt;/strong&gt; When building a website on the Jamstack, you are in charge of the architecture and flow of all the pages, and you control the way that the pages interconnect.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;How to use Stackbit&apos;s SEO features for non-developers&lt;/h2&gt;
&lt;p&gt;Getting started with a Jamstack website is not complicated. There are several &lt;a href=&quot;https://www.stackbit.com/docs/using-stackbit/editing-content/&quot;&gt;guides&lt;/a&gt; that can help you navigate around &lt;a href=&quot;https://www.stackbit.com/blog/announcing-stackbit-studio/&quot;&gt;Stackbit Studio&lt;/a&gt;. If you are a marketer and not a developer, no need to worry because I am going to show you how easy it is to build an SEO-friendly website using Stackbit. &lt;/p&gt;
&lt;p&gt;All of Stackbit’s themes incorporate SEO features. For the purposes of this guide, I am going to use the &lt;a href=&quot;https://app.stackbit.com/create?theme=azimuth&quot;&gt;Azimuth&lt;/a&gt; theme as an example, to demonstrate how you can make sure that your Jamstack website is search-engine friendly. If you have a website with a custom theme, you can ask your developer to add the relevant metadata fields to get the same SEO functionality (&lt;a href=&quot;https://www.stackbit.com/docs/custom-themes/seo-features-in-custom-theme-on-stackbit/&quot;&gt;Read more about that here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Azimuth is a highly customizable and search-engine-friendly theme, made for Jamstack websites. There is no need to use plugins like Yoast anymore, to make sure that your pages are SEO optimized because Stackbit’s themes have all the necessary on-page features already built-in.&lt;/p&gt;
&lt;p&gt;These are the SEO features that are currently available on Stackbit:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Title and meta descriptions&lt;/strong&gt; - Every theme lets you customize all the titles and meta descriptions according to SEO best practices. You can write unique meta tags for each page and view the results in the search engine preview snippet. Stackbit Studio will also let you know if you went above the recommended character limit, which could result in cut-off metadata in Google’s search result listing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Alt tags for images&lt;/strong&gt; - You can easily optimize your images to include the relevant keywords, by adding custom Alt tags to each image, including your logo.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Social sharing&lt;/strong&gt; - You can also edit Facebook’s Open Graph tags and Twitter’s social cards to include optimized snippets and images that guarantee that your content looks great when shared on social media channels.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How to create your new website in 60 seconds&lt;/h2&gt;
&lt;p&gt;First, go to &lt;a href=&quot;https://jamstackthemes.dev/&quot;&gt;jamstackthemes.dev&lt;/a&gt; and choose a theme (like the &lt;a href=&quot;https://jamstackthemes.dev/theme/stackbit-azimuth-unibit/&quot;&gt;Azimuth theme&lt;/a&gt;) from the list of customizable themes:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/select%20theme.PNG&quot;&gt;&lt;/p&gt;
&lt;p&gt;Click on “Create Site”.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/site%20builder.PNG&quot;&gt;&lt;/p&gt;
&lt;p&gt;Stackbit has already generated all the necessary components, like the static site generator and the fitting content management system (Headless CMS). If these sound like a foreign language to you, no need to worry about the technicalities; there are themes that are pre-built for marketers and non-developers.
When you are ready, click on “Create Site”.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/StwV8PaJjnX1SeoU88S1Hbo0dq8jr6m8IAOyVWA8NAnsMyCjXUrKRXlaEGD1nue1aSbsxIGzbZ25Sw5UAuzXZYW-ofOp932Oz0SxKN9prVGktcw04gpuOFMgbUv1iJV416SH23Xl&quot;&gt;&lt;/p&gt;
&lt;p&gt;You will now receive an automatic email from &lt;a href=&quot;http://github.com&quot;&gt;Github&lt;/a&gt; and &lt;a href=&quot;https://www.netlify.com/products/forms/&quot;&gt;Netlify Forms&lt;/a&gt;. Please sign up and create a username and password.&lt;/p&gt;
&lt;p&gt;And Voila, your website is ready! (Yes, it only took 60 seconds!)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/azimuth1.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;Now, let’s walk through the various ways you can customize the website using the Studio.&lt;/p&gt;
&lt;p&gt;The sidebar to your left displays the sitemap of your website and the editing panel of each section. Here, you can customize all the sections of the website, including titles, headers, content blocks, images and more. You can reorder sections by dragging and dropping, delete elements, edit color schemes, etc. &lt;/p&gt;
&lt;p&gt;To edit texts and images inline, simply click on any element right from your site&apos;s preview and you&apos;ll be able to make your changes live. The &lt;strong&gt;More&lt;/strong&gt; menu will lead you to all the editing options you have in the context of the element you&apos;re on. Read more about &lt;a href=&quot;https://www.stackbit.com/docs/using-stackbit/&quot;&gt;how to use Stackbit Studio here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;How to edit and customize the on-page SEO elements&lt;/h2&gt;
&lt;p&gt;Edit the on-page SEO elements at the bottom of the page, located in &lt;strong&gt;Advanced Tools&lt;/strong&gt;. Make sure to include a valid title and meta description under the recommended character limit. You can immediately check your metadata with the “Search Engine Results” preview window, even before you hit on “Publish”.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/metadata1.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;Don’t forget to optimize all the relevant pages for social sharing by filling out Twitter’s social card information and Facebook’s Open Graph tags, both including title, description, and image. You can use the Twitter and Facebook preview windows to make sure that your content is visually optimized.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/social1.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;When you upload your images and logos to the website, remember to edit the &lt;strong&gt;Image Alt Text&lt;/strong&gt; field to add a proper Alt tag. Simply click on the desired image for an inline editing experience. You can edit your images inline or through the sidebar.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/ultra-robin.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;All of Stackbit’s themes, including the Azimuth theme, provide an opportunity to write and edit SEO-friendly blog posts, specify category pages, edit authors’ bio pages, and personalize the blog main-feed display page.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/6IfgiLP-yqD7EbUrI2y2vCX7KomEVx753k41yEfLblWrcDDh_p_clKujiCnOrbPcUoDfAh8vBKQ07c8PNK_GJ5G9lyVl1jDmvwmwM77S7SWRssRQp0YSE9gILQ0syLw9HFTPmVBj&quot;&gt;&lt;/p&gt;
&lt;h2&gt;How to publish your new website&lt;/h2&gt;
&lt;p&gt;When you are done editing your brand new website, hit “Publish.”&lt;/p&gt;
&lt;p&gt;Your website will be published under a temporary domain. The next steps include heading to &lt;a href=&quot;http://netlify.com&quot;&gt;Netlify&lt;/a&gt; to set up a custom domain (You can either buy a new domain or connect a domain that you already own) and making sure that your website is secure with an HTTPS encrypted certificate. &lt;/p&gt;
&lt;p&gt;For more advanced SEO options for your new Jamstack website, stay tuned for upcoming Stackbit releases!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Introducing Stackbit SEO Tools]]></title><description><![CDATA[We created a set of tools inside Stackbit Studio that enable users to add meta data according to best practices, see visual feedback for how pages will show up in search results, and control how pages will appear when shared on social media using Open Graph for Facebook and LinkedIn, and Twitter Cards.]]></description><link>https://www.stackbit.com/blog/seo-tools/</link><guid isPermaLink="false">https://www.stackbit.com/blog/seo-tools/</guid><pubDate>Mon, 22 Mar 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;One of the most popular requests we’ve received from our community is to add an SEO toolbox to Stackbit. &lt;/p&gt;
&lt;p&gt;Developers are often asked to add metadata and other basic SEO fields that will help websites become more easily discoverable by search engines, and more optimized for higher search rankings. It’s no wonder that the most popular WordPress plugin is an SEO one — anyone competing in a searchable online space is concerned with appearing at the top of the page for their relevant keywords.&lt;/p&gt;
&lt;p&gt;On the Jamstack, developers can either templatize the relevant meta fields into their website’s theme, then enter metadata inside a Headless CMS, or alternatively do the manual work of hard coding strings and keywords directly into each page of the site. Both options are time-consuming, lack visual feedback, and are hard to maintain over time.&lt;/p&gt;
&lt;p&gt;It gets even more complicated when collaborating on a website with a team where the goal is to empower &lt;a href=&quot;https://www.stackbit.com/blog/seo-friendly-jamstack-website&quot;&gt;content and marketing folks to add and maintain SEO fields on their own&lt;/a&gt;&lt;strong&gt;.&lt;/strong&gt; The Jamstack is inherently appealing to non-developers precisely because of its SEO advantages like static-site loading speeds and CDN hosting. That being said, the tools to maintain the day-to-day SEO grind are missing, creating more work for developers, and longer waiting times for creators who could be independent given the right tools.&lt;/p&gt;
&lt;p&gt;To tackle this issue, we created a set of tools inside &lt;a href=&quot;https://www.stackbit.com/blog/announcing-stackbit-studio/&quot;&gt;Stackbit Studio&lt;/a&gt; that enable users to add metadata according to best practices, see visual feedback for how pages will show up in search results, and control how pages will appear when shared on social media using Open Graph for Facebook and LinkedIn, and Twitter Cards.&lt;/p&gt;
&lt;iframe width=&quot;720&quot; height=&quot;415&quot; src=&quot;https://www.youtube.com/embed/UGjg82j5p1Q&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;The SEO toolkit is automatically supported by all of &lt;a href=&quot;https://app.stackbit.com/create&quot;&gt;Stackbit’s Jamstack themes&lt;/a&gt;. If you’re using a custom theme or imported site, &lt;a href=&quot;https://www.stackbit.com/docs/custom-themes/seo-features-in-custom-theme-on-stackbit/&quot;&gt;follow this guide&lt;/a&gt; to add meta fields to your theme, and then you can edit all SEO elements directly from the Studio. Do the same if you&apos;d like to update your existing Stackbit project to support this new feature.&lt;/p&gt;
&lt;h2&gt;What’s in the box?&lt;/h2&gt;
&lt;p&gt;To open up the &lt;a href=&quot;https://www.stackbit.com/docs/user-manual/editing-content/#seo_feature&quot;&gt;SEO toolbox&lt;/a&gt;, navigate to the &lt;strong&gt;Advanced Tools&lt;/strong&gt; section at the bottom of your Studio, or simply click on the &lt;strong&gt;SEO&lt;/strong&gt; icon on the top bar.&lt;/p&gt;
&lt;h2&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/drCUL3SmeWz64ze_fWhH2D5jWPte4CMl4VC99pGXP_ETkkEACSafek2nuW1vKka7biKHh5FxfPda9McOc-5NtIhcCwGKetDYF3TgUVuP52_KzrIdleQKwWvh28JBM-s36mufZx6r&quot;&gt;

Metadata&lt;/h2&gt;
&lt;p&gt;Titles and descriptions for every page can be added straight into the text boxes, while the character counter will let you know if you’ve reached the character limit recommended by &lt;a href=&quot;https://www.stanventures.com/blog/meta-title-length-meta-description-length/&quot;&gt;SEO best practices&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/1pDtzx7EFdyEj7kmhRXLtHq7kuflyghaY8OYfysC2NW38AgUidMzGPUhkvcfcZmvfB_fFhkVESR7fMhnDdPdzlAYa1VTLi3etRhZ9xh8If0G9pkbwEIh7E5zmEs_5R3YEfv5fcSU&quot;&gt;&lt;/p&gt;
&lt;p&gt;You’ll also see a preview of your entire listing along with the URL and the appropriate proportions, as it will appear on search engine results.&lt;/p&gt;
&lt;h2&gt;Social Sharing&lt;/h2&gt;
&lt;p&gt;The most common social media input protocols include Facebook’s Open Graph and Twitter’s Cards. Here you can define which images and texts will be displayed when your webpage is shared on social media, along with a visual preview.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/9ELvQPSZaD7ACszXJV6qLS-bhXd4wnT20u3Xfc7vAkL7x9DB8sguRceW0CxibltVGA0Ap9Z1XrdwkBwOVO-AO9L-Hr-UybHNHYaJMRnxEHYqnz-ZWJ5M-uXREkCpCkZiXprR8WLv&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Alt Tags&lt;/h2&gt;
&lt;p&gt;When you upload a picture onto the page, you can now add Alt text right from the preview — no need to hop out of context and visit the advanced tools or even the sidebar. Simply add your image and enter the appropriate description straight from your page, all in one step. This is important both from an accessibility standpoint and also as a staple SEO best practice.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/Em26DFy3oKJySx4HNGMNGZ0oKo5eTVjTlh_yWBxK5JvPKhOGOp1syiPZg_yx06GunlKxxnZ_vxusAVl4IYG2uAiuIdxbst9ZhX3LxtFD1-opSOH347viP-USY8HowBGaOfoMMqZF&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;Last but definitely not least, there’s a dedicated feedback tab. Yep, we think it’s so important that we actually plopped it right into the toolbox :)&lt;/p&gt;
&lt;p&gt;We’d love to hear your thoughts about the feature and what you’d like us to offer next, as we work on expanding these tools. Your overwhelming requests for SEO are what brought us to create this feature in the first place so hey, we’re listening, and want to hear more.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/h4SCpuLrKdg1ybjlCCKIJXtAiqNLM2ZeFKKcOTPilA7JsoDIWw0tdtS4rwuGo-YbzTi0FA_1mFh4I04Qg01XLnbn3nZLiYa4H0FgB1HtKyMJg-AXyVOeOH1iWyLuaR_oEfJkN8hV&quot;&gt;&lt;/p&gt;
&lt;p&gt;Happy building!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[True Inline Editing for the Jamstack and Other Releases]]></title><description><![CDATA[New this week: Inline Editing, Updates to the Azimuth Theme, Updated README Files for Projects]]></description><link>https://www.stackbit.com/blog/release-notes-2020-12-30/</link><guid isPermaLink="false">https://www.stackbit.com/blog/release-notes-2020-12-30/</guid><pubDate>Wed, 30 Dec 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;&lt;a name=&quot;inline&quot;&gt; Inline Editing&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/o5a41k3ESMo&quot;&gt;&lt;img src=&quot;/images/blog/on-page-edit-screenshot.png&quot; alt=&quot;Inline editing in action in the Stackbit Studio&quot;&gt;&lt;/a&gt;
You can now modify any element on a page in the Stackbit Studio simply by clicking on it and directly editing it in place. Just click on what you want to change and edit right from the page itself. The Studio will let you click on a string and immediately start typing, click on an image to choose a new one, and so many other element-specific actions — right from where you are working on the screen.&lt;/p&gt;
&lt;p&gt;There’s more you can do from the inline editing feature, too. For example, the More button reveals various modifications you can make to the properties of an element and its surrounding module.&lt;/p&gt;
&lt;img src=&quot;/images/blog/ope-more-contact-us.png&quot; alt=&quot;Inline Editing showing More button in Stackbit Studio&quot; style=&quot;max-width:40%;  float: left; &quot;&gt;
&lt;img src=&quot;/images/blog/ope-more-opened-contact-us.png&quot; alt=&quot;Inline Editing showing More button opened in Stackbit Studio&quot; style=&quot;max-width:40%; &quot;&gt;
&lt;p&gt;Clicking Open in Sidebar takes you to the appropriate location for more structural changes, like rearranging elements, adding new ones, or deleting them altogether.&lt;/p&gt;
&lt;img src=&quot;/images/blog/ope-opened-sidebar.png&quot; alt=&quot;sidebar menu opened from Inline Editor more button&quot; style=&quot;max-width:50%; &quot;&gt;
&lt;br&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/o5a41k3ESMo&quot;&gt;Watch this video for a quick introduction to this feature&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a name=&quot;azimuth&quot;&gt; Updates to the Azimuth theme&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/azimuth-update-cyan-screenshot.png&quot; alt=&quot;new Azimuth theme using a green color palette&quot;&gt;&lt;/p&gt;
&lt;p&gt;Some of the highlights include:
You can now change fonts from the Stackbit Studio. Default options are fira-sans, nunito-sans and system-sans.  You can define your own in code for your team to choose from.
More and improved default color palette options in the Studio, adding cyan and updating green and purple
Customize the footer right from the Studio.
Upload or change your favicon from the Studio
Better mobile responsiveness
Azimuth is one of our most popular themes and we are making these improvements based on user feedback.  If you have ideas for how we can make it even better, &lt;a href=&quot;https://www.stackbit.com/contact/&quot;&gt;please let us know&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a name=&quot;readme&quot;&gt; Updated README Files for Projects&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/new-readme-release-notes.png&quot; alt=&quot;preview of the new Stackbit README from a project on github&quot;&gt;
We have updated the README file that is included with all new projects created through the Stackbit Site Builder to include. We now include some helpful links to get you going faster with your Stackbit site.  We even include a video overview.&lt;/p&gt;
&lt;p&gt;You can see the changes for yourself by &lt;a href=&quot;https://app.stackbit.com/create?theme=diy&amp;#x26;utm_source=blog&amp;#x26;utm_campaign=release-notes-2020-12-30&quot;&gt;spinning up a site now with our site builder&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Let Us Know What You Think&lt;/h2&gt;
&lt;p&gt;We encourage you to test out these new features and themes and give us your feedback.&lt;/p&gt;
&lt;p&gt;All of these improvements started with users letting us know what they needed. We strive to help developers and marketers leverage the Jamstack and we are always looking for ideas that will help make a more responsive, accessible web for us all. Please let us know &lt;a href=&quot;https://www.stackbit.com/contact/&quot;&gt;how we can help&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy building.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Stackbit Release Notes - 2020-12-18]]></title><description><![CDATA[New this week: Granular publishing, Editor search, and improved support for custom themes.]]></description><link>https://www.stackbit.com/blog/release-notes-2020-12-18/</link><guid isPermaLink="false">https://www.stackbit.com/blog/release-notes-2020-12-18/</guid><pubDate>Fri, 18 Dec 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Here are some of the new things our team has released this week.&lt;/p&gt;
&lt;h2&gt;&lt;a name=&quot;granular&quot;&gt; Granular Publishing for Sites Using a Git-Based CMS&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/publish-current-page-2020-12-18.png&quot; alt=&quot;Stackbit Studio Publish Menu open with Current page selected&quot;&gt;&lt;/p&gt;
&lt;p&gt;For folks using Git-based CMSes, such as using Git to store markdown in your repository, &lt;a href=&quot;https://www.netlifycms.org/&quot;&gt;NetlifyCMS&lt;/a&gt; or &lt;a href=&quot;https://forestry.io/&quot;&gt;Forestry&lt;/a&gt;, you can now choose to publish the entire site or just the single page you are working on.&lt;/p&gt;
&lt;p&gt;This is perfect for:
Teams working to publish new pages and posts without worrying about other content changes made elsewhere being pushed to production too early
Updating pages while developers are working on new features for the site&lt;/p&gt;
&lt;h2&gt;&lt;a name=&quot;search&quot;&gt; Search in the Stackbit Studio Editor &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/editor-searchbar-2020-12-18.png&quot; alt=&quot;The Stackbit Studio edit menu opened with a search bar added to the top&quot;&gt;&lt;/p&gt;
&lt;p&gt;We have added a search bar to the top of the Edit menu in the Studio. Just type the term you are looking for and the editor will reveal all the elements on that page that contain that term.&lt;/p&gt;
&lt;p&gt;This is ideal for:
Quickly identifying all elements on a page that use that term or phrase
Editing all the instances of a term or phrase throughout the site
Reducing the time spent visually hunting for where to click to make an edit&lt;/p&gt;
&lt;h2&gt;&lt;a name=&quot;custom&quot;&gt; Better Support for Custom Hugo and Gatsby Themes &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We have updated our tools to better support custom themes that do not have a pre-defined &lt;code&gt;stackbit.yaml&lt;/code&gt; in their repository.  This means you can now use the Stackbit Studio to edit the content on sites built using any Hugo or Gatsby theme.&lt;/p&gt;
&lt;p&gt;Technically speaking, there are 2 big improvements we made this week. One improvement is how our tools automatically surface editable fields, including files with arrays at root objects. The other release involves how we can interact with images and other on-page items stored in a site’s file system and referenced with relative paths.&lt;/p&gt;
&lt;p&gt;To import a custom theme and test this yourself, &lt;a href=&quot;https://app.stackbit.com/create&quot;&gt;create a new site&lt;/a&gt;, select the ‘Custom’ theme option, and supply the Github URL for the theme.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/import-custom-theme-2020-12-18.png&quot; alt=&quot;Stackbit Site Builder Import Custom Theme Import menu&quot;&gt;&lt;/p&gt;
&lt;p&gt;If you want to test this out, here are a few theme suggestions:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hugo&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://app.stackbit.com/create?theme=https://github.com/onweru/compose&quot;&gt;Compose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://app.stackbit.com/create?theme=https://github.com/kakawait/hugo-tranquilpeak-theme&quot;&gt;Tranquilpeak&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://app.stackbit.com/create?theme=https://github.com/2-REC/hugo-myportfolio-theme&quot;&gt;MyPortfolio Theme&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Gatsby&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://app.stackbit.com/create?theme=https://github.com/rohitguptab/rg-portfolio&quot;&gt;RG Portfolio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://app.stackbit.com/create?theme=https://github.com/wkocjan/gatsby-theme-intro&quot;&gt;Intro - Personal branding theme for developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://app.stackbit.com/create?theme=https://github.com/thebakerdev/gatsby-starter-zenii&quot;&gt;Gastby Starter Zenii&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Let Us Know What You Think&lt;/h2&gt;
&lt;p&gt;We encourage you to test out these new features and themes and give us some feedback.&lt;/p&gt;
&lt;p&gt;All of these improvements started with users letting us know what they needed. We strive to help developers and marketers leverage the Jamstack and we are always looking for ideas that will help make a more responsive, accessible web for us all. Please let us know &lt;a href=&quot;https://www.stackbit.com/contact/&quot;&gt;how we can help&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy building.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[New Shortcut to See your Site on Mobile]]></title><description><![CDATA[Point, Scan, Preview — a new way to see your site on mobile.]]></description><link>https://www.stackbit.com/blog/introducing-mobile-preview/</link><guid isPermaLink="false">https://www.stackbit.com/blog/introducing-mobile-preview/</guid><pubDate>Mon, 30 Nov 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Creating a site today means building for mobile. As most developers, designers and marketers likely know:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.statista.com/statistics/277125/share-of-website-traffic-coming-from-mobile-devices/&quot;&gt;Since 2018 most website visits have been from a mobile device&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.statista.com/statistics/271405/global-mobile-data-traffic-forecast/&quot;&gt;Mobile traffic has an annual growth rate of 46%&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.forbes.com/sites/shelleykohan/2020/02/09/mobile-commerce-to-grow-68-by-2022-as-more-people-shop-on-their-phones&quot;&gt;Mobile commerce is expected to drive almost 50% of ecommerce sales by 2022&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But we don’t build websites on our mobile devices. We develop websites and content primarily from our laptops, spending hours making sure things look just right on our computer monitors. We are then faced with making sure it looks good on much smaller screens.&lt;/p&gt;
&lt;p&gt;The most common approach to previewing a mobile view is using the &lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/device-mode&quot;&gt;in-browser developer tools&lt;/a&gt;. Right mouse click, inspect element and you get a limited set of device views you can emulate. Developing locally, you can do this against a local preview, which is great while working on a new design or feature. But this is not a good approach for less technical folks, who don’t have a local development environment. Marketers who write content in a CMS admin screen without a preview can’t use this tooling either without additional work.&lt;/p&gt;
&lt;p&gt;The other common path is deploying the site and then checking it out on a mobile device. Developers can set up staging deployments and preview URLs, but for less technical folks deploying to the production environment is the most available option. However, this can bring risks, like exposing content that might not be ready for prime time. And if there is an issue, you are going to need to wait until the next deployment to see if it has been fixed. This is generally a slow and frustrating process.&lt;/p&gt;
&lt;p&gt;For most people working on Jamstack websites, they just want to see what our design and content changes look like on a real device with less complexity.&lt;/p&gt;
&lt;h2&gt;New Tools for Previews on the Jamstack&lt;/h2&gt;
&lt;p&gt;Wouldn&apos;t it be great to have a handy tool that shows you instantly what your site will &lt;em&gt;actually&lt;/em&gt; look like on mobile, without deploying or using emulators? We thought so too.&lt;/p&gt;
&lt;p&gt;Stackbit Studio now offers two ways to easily check for mobile responsiveness on your real device:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Send yourself, or anyone else, a Share link and view from any device&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NEW&lt;/strong&gt; Scan a QR code right from the Studio.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;https://www.stackbit.com/blog/announcing-stackbit-studio/&quot;&gt;Stackbit Studio&lt;/a&gt; users have been leveraging the Preview link option in the Share menu for a while now. Simply copy the link and send it to anyone to give them a view of your current work. This will work on any device but you need to pass the link.&lt;/p&gt;
&lt;p&gt;The new mobile preview makes it even easier to view your site on a mobile device. Just open the Mobile menu, scan the QR code with your phone and instantly see a live preview of the site you are actively working on.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/Stackbit-Studio-Mobile-Preview-Preview.png&quot; alt=&quot;Stackbit Studio with the Mobile Preview menu opened and preview being displayed on mobile phone screen&quot;&gt;&lt;/p&gt;
&lt;p&gt;This is really handy for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Designers who want to make sure that their work looks great on mobile&lt;/li&gt;
&lt;li&gt;Developers to make sure the site looks and behaves on mobile as intended&lt;/li&gt;
&lt;li&gt;Marketers who are changing texts and need to see, in real time, what their edits look like on mobile&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Making the Jamstack more Mobile Friendly&lt;/h2&gt;
&lt;p&gt;We want to empower marketers, designers and developers with the right tools to deliver truly responsive, beautiful Jamstack websites. This goes beyond this mobile preview. We try to deliver on this with all of our features.&lt;/p&gt;
&lt;p&gt;This is why &lt;em&gt;all&lt;/em&gt; of the &lt;a href=&quot;https://app.stackbit.com/edit/5fb71bc69a53b1001c9704d3/theme&quot;&gt;pre-integrated themes&lt;/a&gt; in the Stackbit Site Builder are responsive, right out of the box. And because our themes work with common static site generators like &lt;a href=&quot;https://www.gatsbyjs.com/&quot;&gt;Gatsby&lt;/a&gt;, &lt;a href=&quot;https://gohugo.io/&quot;&gt;Hugo&lt;/a&gt;, &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; and more, you are free to leverage the tools you like while making the internet awesome.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/Stackbit-Studio-Select-A-Theme.png&quot; alt=&quot;Stackbit Site Builder Theme selection menu&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Get Building for Mobile&lt;/h2&gt;
&lt;p&gt;We believe Jamstack is the future. Website builders should be able to get the best results without having to wire it all up themselves, by themselves. We hope our new mobile preview makes your website building experience a little easier.&lt;/p&gt;
&lt;p&gt;We are &lt;a href=&quot;https://www.stackbit.com/contact/&quot;&gt;always looking for ideas&lt;/a&gt; that will help make a more responsive, accessible web. Feel free to let us know how we can help.&lt;/p&gt;
&lt;p&gt;Happy Building.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Stackbit Studio with Hugo and Jekyll]]></title><description><![CDATA[Learn how to use Stackbit Studio with Jekyll and Hugo.]]></description><link>https://www.stackbit.com/blog/hugo-jekyll-support/</link><guid isPermaLink="false">https://www.stackbit.com/blog/hugo-jekyll-support/</guid><pubDate>Mon, 16 Nov 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Meet our friends: Jekyll and Hugo&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; is considered the first of a new crop of static site generators that led to the Jamstack movement. It was first released in 2008 and maintains a steady community to this day.&lt;/p&gt;
&lt;p&gt;Younger but equally mighty is &lt;a href=&quot;https://gohugo.io/&quot;&gt;Hugo&lt;/a&gt;, a static site generator with a strong focus on build performance. It powers large-scale websites for the likes of &lt;a href=&quot;https://www.smashingmagazine.com/&quot;&gt;Smashing Magazine&lt;/a&gt;, &lt;a href=&quot;http://www.digitalocean.com&quot;&gt;DigitalOcean&lt;/a&gt; and &lt;a href=&quot;https://www.kubernetes.io&quot;&gt;Kubernetes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Jekyll and Hugo are built with different programming languages, use different templating engines and have different conventions for storing content, taxonomy and structured data. However, they share the same fundamental principle of storing content in files on disk, which are kept alongside the source code for the site.&lt;/p&gt;
&lt;p&gt;This offers numerous benefits in terms of development and deployment, but editing these files is non-trivial, especially for less technical folks. This is where Stackbit Studio comes in.&lt;/p&gt;
&lt;iframe src=&quot;https://player.vimeo.com/video/552361382?background=1&quot; width=&quot;640&quot; height=&quot;360&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; fullscreen; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;Stackbit Studio offers a full-featured on-page editor that seamlessly integrates with the static site generator. It offers editors a user-friendly graphical interface for managing the content of the website, and Stackbit Studio will take care of updating the corresponding files under the hood and committing them to a version-controlled repository.&lt;/p&gt;
&lt;h2&gt;Why this is a big deal&lt;/h2&gt;
&lt;p&gt;At Stackbit, we&apos;re committed to integrate our product with the best tools in the Jamstack ecosystem. While the popularity of JavaScript-based options such as &lt;a href=&quot;https://www.gatsbyjs.com/&quot;&gt;Gatsby&lt;/a&gt; and &lt;a href=&quot;https://nextjs.org/&quot;&gt;Next.js&lt;/a&gt; has been steadily increasing, that doesn&apos;t make them the right tool for &lt;em&gt;every&lt;/em&gt; job.&lt;/p&gt;
&lt;p&gt;Our goal is to give people the same experience and ease of setup for any combination of technologies, leaving it up to them to decide what feels right for each project.&lt;/p&gt;
&lt;p&gt;Also, I think we – as tool creators – have a big responsibility towards people that are learning the ropes of web development. Being proficient in a JavaScript framework is a tremendous skill to possess, but it may not be the best or easiest entry path for some folks. Tools like Jekyll and Hugo are arguably simpler and &lt;em&gt;closer to the metal&lt;/em&gt;, in the sense that their approach to markup, styling and logic are less removed from vanilla HTML, CSS and JavaScript.&lt;/p&gt;
&lt;p&gt;We&apos;re excited to give people the ability to create a site, play with its source, and tear it apart – all with the help of a user-friendly interface that&apos;s always there to bridge any gaps in people&apos;s knowledge and understanding of the underlying tools.&lt;/p&gt;
&lt;h2&gt;Getting started&lt;/h2&gt;
&lt;p&gt;Well, that&apos;s easy. Jekyll fans can make their way to &lt;a href=&quot;https://jamstack.new/jekyll&quot;&gt;jamstack.new/jekyll&lt;/a&gt;. Fancy Hugo? Go to &lt;a href=&quot;https://jamstack.new/hugo&quot;&gt;jamstack.new/hugo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy building!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Unbundling the Web: Orchestrating Jamstack Tools with Stackbit]]></title><description><![CDATA[Stackbit was recently featured on Heavybit’s Jamstack Radio.  Here are some highlights.]]></description><link>https://www.stackbit.com/blog/heavybit-jamstack-radio/</link><guid isPermaLink="false">https://www.stackbit.com/blog/heavybit-jamstack-radio/</guid><pubDate>Thu, 12 Nov 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Earlier this year, our CEO and Co-founder &lt;a href=&quot;https://twitter.com/ohadpr&quot;&gt;Ohad Eder-Pressman&lt;/a&gt; sat down with &lt;a href=&quot;https://twitter.com/bdougieyo&quot;&gt;Brian Douglas&lt;/a&gt; on the &lt;a href=&quot;https://www.heavybit.com/library/podcasts/jamstack-radio/ep-65-unbundling-the-web-with-ohad-eder-pressman-of-stackbit/&quot;&gt;Jamstack Radio podcast&lt;/a&gt;. They talked about the origins of Stackbit and dove into the communication chasm marketers and developers are currently facing when coordinating Static Site Generators and Headless CMS around previews and deployments.&lt;/p&gt;
&lt;p&gt;In this interview, which is great for anyone wondering why they should get into the Jamstack,   Ohad addresses the hurdles developers face to get started with Jamstack.  It is hard to get started with Jamstack development. It requires you to get into the weeds and learn about a lot of different tools. But the Jamstack lets developers keep a lot of control and maintain freedom of choice. The conversation also touched on how non-developers, who typically use tools like Wix, Squarespace or WordPress, just want to see their edits, publish those changes and have fast and secure sites without worrying about build steps and platforms like GitHub or Netlify.&lt;/p&gt;
&lt;p&gt;Ohad also goes into the philosophy of this approach:
&quot;Jamstack is an architecture, but it&apos;s also a philosophy. Let’s host most of our website content from a CDN. Let’s generate it every time we change it and not rely on servers to dynamically build for every new request. Let’s rely on microservices, APIs and use modern developer tools and workflow.”&lt;/p&gt;
&lt;p&gt;Listen to the full talk at &lt;a href=&quot;https://www.heavybit.com/library/podcasts/jamstack-radio/ep-65-unbundling-the-web-with-ohad-eder-pressman-of-stackbit/&quot;&gt;The Heavybit Jamstack Radio Podcast&lt;/a&gt; to hear more about our mission, which Ohad sums up as being the Create and Edit buttons of the Jamstack.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Introducing jamstack.new]]></title><description><![CDATA[We're excited to announce a nifty little shortcut for creating new Jamstack sites: here's jamstack.new.]]></description><link>https://www.stackbit.com/blog/jamstack-new/</link><guid isPermaLink="false">https://www.stackbit.com/blog/jamstack-new/</guid><pubDate>Mon, 05 Oct 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Introducing jamstack.new&lt;/h2&gt;
&lt;p&gt;A couple of months ago, our friends at CodeSandbox &lt;a href=&quot;https://twitter.com/compuives/status/1291020566221205511&quot;&gt;announced a cool set of domains&lt;/a&gt; that allow anyone to instantly create a project with a specific stack.&lt;/p&gt;
&lt;p&gt;Off the back of this announcement, &lt;a href=&quot;https://twitter.com/daviddarnes&quot;&gt;Dave Darnes&lt;/a&gt; floated the idea of having a &lt;code&gt;.new&lt;/code&gt; domain as a launchpad for the Jamstack. This made me go frantically check whether a very special keyword had already been taken – to my absolute surprise, &lt;a href=&quot;https://jamstack.new/info&quot;&gt;jamstack.new&lt;/a&gt; was still available. We had to get it!&lt;/p&gt;
&lt;p&gt;I shared this in our company Slack, pitching it in a very calm matter. It&apos;s just a domain, after all. I do &lt;em&gt;NOT&lt;/em&gt; get overly excited about domain names.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/jamstack-new-slack.png&quot; alt=&quot;Screenshot of the Stackbit Slack&quot;&gt;&lt;/p&gt;
&lt;p&gt;Sure enough, we got the domain and we&apos;re putting it to good use. Do you need a new Jamstack site? Simple! Head to &lt;a href=&quot;https://jamstack.new&quot;&gt;jamstack.new&lt;/a&gt;. 🌈&lt;/p&gt;
&lt;h2&gt;Choose your flavor&lt;/h2&gt;
&lt;p&gt;We built this as a tool for the community to use. You don&apos;t need to memorize the right combinations of tools to pick or the install commands needed to get them working – your next site is just one catchy URL away.&lt;/p&gt;
&lt;p&gt;If you have a solid idea about what you want to build or what tools you want to build it with, we have that covered too. Do you need a &lt;a href=&quot;https://jamstack.new/blog&quot;&gt;jamstack.new/blog&lt;/a&gt; or a &lt;a href=&quot;https://jamstack.new/portfolio&quot;&gt;jamstack.new/portfolio&lt;/a&gt;, using &lt;a href=&quot;https://jamstack.new/gatsby&quot;&gt;jamstack.new/gatsby&lt;/a&gt; or &lt;a href=&quot;https://jamstack.new/hugo&quot;&gt;jamstack.new/hugo&lt;/a&gt;, powered by &lt;a href=&quot;https://jamstack.new/contentful&quot;&gt;jamstack.new/contentful&lt;/a&gt; or &lt;a href=&quot;https://jamstack.new/git&quot;&gt;jamstack.new/git&lt;/a&gt;? Your choice.&lt;/p&gt;
&lt;p&gt;Regardless of what you pick, there&apos;s a fully-configured Jamstack site waiting for you on the other side, with a complete editing experience powered by &lt;a href=&quot;https://jamstack.new/&quot;&gt;Stackbit Studio&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Check all the available combinations at &lt;a href=&quot;https://jamstack.new/info&quot;&gt;https://jamstack.new/info&lt;/a&gt;. We&apos;re constantly working on adding more, so if your favorite tool isn&apos;t supported yet, please &lt;a href=&quot;https://twitter.com/stackbit&quot;&gt;let us know&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Stackbit Meets Next.js]]></title><description><![CDATA[We're bringing Next.js into the Stackbit family. Here's what that means for you and your projects.]]></description><link>https://www.stackbit.com/blog/nextjs-support/</link><guid isPermaLink="false">https://www.stackbit.com/blog/nextjs-support/</guid><pubDate>Mon, 21 Sep 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;What is Next.js?&lt;/h2&gt;
&lt;p&gt;Next.js is a production-ready web framework based on the React JavaScript library, used by the likes of &lt;a href=&quot;https://www.nextjs.org/showcase/uber&quot;&gt;Uber&lt;/a&gt;, &lt;a href=&quot;https://www.nextjs.org/showcase/playstation&quot;&gt;PlayStation&lt;/a&gt; and &lt;a href=&quot;https://www.nextjs.org/showcase/netflix-jobs&quot;&gt;Netflix&lt;/a&gt;. But unlike other React-based tools in the space, Next.js has an interesting history, since it wasn’t always a static site generator.&lt;/p&gt;
&lt;p&gt;You see, when developers pick React for their next project, they usually have to decide whether to render the app on a server and serve fully-formed HTML to the client, or ditch the server and render the app entirely in the browser.&lt;/p&gt;
&lt;p&gt;What’s great about Next.js is that you &lt;em&gt;don’t&lt;/em&gt; have to choose, because it can do both. Next.js started as an engine for server-rendered (or isomorphic) React applications, but &lt;a href=&quot;https://www.nextjs.org/blog/next-9-3#next-gen-static-site-generation-ssg-support&quot;&gt;recent&lt;/a&gt; &lt;a href=&quot;https://www.nextjs.org/blog/next-9-4#incremental-static-regeneration-beta&quot;&gt;versions&lt;/a&gt; introduced a set of features around static site generation, making it an incredibly powerful addition to the Jamstack toolbox.&lt;/p&gt;
&lt;p&gt;On top of that, its &lt;em&gt;zero-config&lt;/em&gt; approach means that you get a lot out of the box, without compromising on the flexibility and extensibility that are essential as your project grows.&lt;/p&gt;
&lt;h2&gt;Getting started&lt;/h2&gt;
&lt;p&gt;At Stackbit, we’ve been excited to see Next.js becoming an increasingly powerful solution for creating Jamstack sites, and we wrote some guides on &lt;a href=&quot;https://www.stackbit.com/blog/getting-started-nextjs-sourcebit/&quot;&gt;how to get started with this setup&lt;/a&gt; and on &lt;a href=&quot;https://www.stackbit.com/blog/jamstack-nextjs-sourcebit/&quot;&gt;pulling data into Next.js from different sources&lt;/a&gt;. From now on, Stackbit will handle all of that for you, allowing you to create a Jamstack site using Next.js in less than 60 seconds. As &lt;a href=&quot;https://www.twitter.com/Netlify/status/1305952498771832832&quot;&gt;Cassidy Williams&lt;/a&gt; would say, here’s how:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Head to &lt;a href=&quot;https://jamstack.new/nextjs&quot;&gt;https://jamstack.new/nextjs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use the theme we’ve picked for you or click Change to explore other options&lt;/li&gt;
&lt;li&gt;Pick the CMS of your choice; we select Git as the default, which stores data in your repository, but you can choose to use a headless CMS like &lt;a href=&quot;https://www.contentful.com/&quot;&gt;Contentful&lt;/a&gt; or &lt;a href=&quot;https://www.sanity.io/&quot;&gt;Sanity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Click the big blue button at the bottom to connect your GitHub account&lt;/li&gt;
&lt;li&gt;It’s done! 🎉&lt;/li&gt;
&lt;/ol&gt;
&lt;iframe src=&quot;https://player.vimeo.com/video/557156026?background=1&quot; width=&quot;640&quot; height=&quot;360&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; fullscreen; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;h2&gt;Wait, there’s more&lt;/h2&gt;
&lt;p&gt;Streamlining the process of creating the site and doing all the data plumbing for you is great, but what if we throw a few more goodies into the mix?&lt;/p&gt;
&lt;p&gt;Earlier this month, we &lt;a href=&quot;https://www.stackbit.com/blog/announcing-stackbit-studio/&quot;&gt;announced the Stackbit Studio&lt;/a&gt;, the live editing experience at the heart of our Jamstack platform. When you create a Next.js site using Stackbit, you get access to live previews, inline editing, asset management, collaborators, granular publishing controls, integrated build logs and more.&lt;/p&gt;
&lt;iframe src=&quot;https://player.vimeo.com/video/557156756?background=1&quot; width=&quot;640&quot; height=&quot;360&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; fullscreen; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;h2&gt;Open-source at heart&lt;/h2&gt;
&lt;p&gt;We’re big believers in the power of open-source softweare and in giving back to the community. Every Next.js site that you create with Stackbit will be given to you in a GitHub repository, owned by you, with no proprietary technology.&lt;/p&gt;
&lt;p&gt;All the data plumbing, and regardless of your choice of headless CMS, will be handled with &lt;a href=&quot;https://www.stackbit.com/blog/data-driven-jamstack-sourcebit/&quot;&gt;Sourcebit&lt;/a&gt;, an MIT-licensed open-source library that we built with and for the Jamstack community.&lt;/p&gt;
&lt;h2&gt;Go build&lt;/h2&gt;
&lt;p&gt;We’re excited about Next.js and its role in the Jamstack ecosystem. We’re also chuffed to bits about our product and the potential it unlocks. Above all, we’re looking forward to seeing the amazing things you’re going to build when you combine the two.&lt;/p&gt;
&lt;p&gt;We’ll be on the lookout on &lt;a href=&quot;https://twitter.com/stackbit&quot;&gt;@stackbit&lt;/a&gt;, and me personally on &lt;a href=&quot;https://twitter.com/eduardoboucas&quot;&gt;@eduardoboucas&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[An Open Letter to Matt Mullenweg: What folks often get wrong about Jamstack]]></title><description><![CDATA[WordPress Co-Founder Matt Mullenweg claims the Jamstack isn’t ready for prime time, here’s what he’s missing]]></description><link>https://www.stackbit.com/blog/open-letter-to-matt-mullenweg-what-folks-often-get-wrong-about-jamstack/</link><guid isPermaLink="false">https://www.stackbit.com/blog/open-letter-to-matt-mullenweg-what-folks-often-get-wrong-about-jamstack/</guid><pubDate>Fri, 04 Sep 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Richard MacManus had an interesting email exchange with Matt Mullenweg, creator of WordPress and co-founder/CEO of Automattic, about the Jamstack. It resulted in an Aug 31, 2020, &lt;a href=&quot;https://thenewstack.io/wordpress-co-founder-matt-mullenweg-is-not-a-fan-of-jamstack/&quot;&gt;writeup in TheNewStack&lt;/a&gt;. I have a deep appreciation for Matt’s role in shaping web publishing but also feel that his points (e.g. “JAMstack is a regression for the vast majority of the people adopting it”) are a bit misleading. Matt chooses to compare a modern &lt;strong&gt;architecture&lt;/strong&gt; like the Jamstack to a monolithic &lt;strong&gt;product&lt;/strong&gt; like WordPress. I don’t expect a recently popularized architecture to provide the tailored features that a 15-year-old product has. We should be asking whether Jamstack is a better architecture than LAMP and what gaps currently exist with products and solutions built on top of the Jamstack.&lt;/p&gt;
&lt;h2&gt;How does the Jamstack compare to the status quo?&lt;/h2&gt;
&lt;p&gt;A growing number of developers, &lt;a href=&quot;https://www.netlify.com/blog/2020/08/03/celebrating-1-million-developers-whats-next-for-netlify-and-the-jamstack/&quot;&gt;1 million alone on Netlify&lt;/a&gt;, believe the status quo of maintaining and depending on web servers has to change. We can build a better web by adopting a modern approach that materially improves security and performance, lowers the cost of scaling, and delivers a superior developer experience. We achieve this by serving our website from a CDN, adopting a git-centric workflow, leveraging modern build tools, and automating builds/deploys. How does this compare to the LAMP stack? It may have made sense to keep your content database, admin source code, site rendering code, and other utilities all on a shared hosting server back when cPanel was how we installed software. The price we’ve all paid for this monolithic approach has been slow websites that often get hacked/defaced and a developer experience that leaves much to be desired.&lt;/p&gt;
&lt;p&gt;When AWS introduced EC2 in 2006 it didn’t persist drives, lacked load balancers, felt expensive, and was annoying in several different ways. At the same time, EC2 was an innovative abstraction of computing power that ushered in the paradigm-shifting era we now call cloud computing. Disruptive innovation is important and can, at times, appear inferior early on. The question is, what lens are you looking through, and what are your goals. &lt;strong&gt;I believe the Jamstack is the newest disruptive innovation - it&apos;s not broken or incomplete, just relatively low level and new.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;More specifically I’d like to address some of Matt’s criticism of the Jamstack,&lt;/p&gt;
&lt;h2&gt;Rebuilding bigger sites can be slower&lt;/h2&gt;
&lt;p&gt;While the Jamstack as an architectural approach is fairly mature, the underlying tools like static site generators and deployment platforms are still undergoing very active development and optimization due to the Jamstack’s mass adoption. Shorter build and rebuild times are a function of tools being improved and optimized vs. something that necessitates the rethinking of the entire architecture. It&apos;s inspiring to see the progress being driven by developments like build parallelization, build cache, partial rebuild, incremental static regeneration, and more.&lt;/p&gt;
&lt;p&gt;Additionally, longer rebuild times are currently overrepresented as a problem because people often wait for their websites to build in order to see what their content and code changes look like. This is typical with nontechnical people who make the rational decision of NOT running a local dev server but more importantly it’s already being addressed by Jamstack ecosystem players offering live previews and integrating those into broader Jamstack platforms.&lt;/p&gt;
&lt;h2&gt;It’s fragile because we’re putting together a dozen services&lt;/h2&gt;
&lt;p&gt;In terms of architecture, the Jamstack isn’t more fragile than older stacks, which depended on a multitude of pieces - LAMP, Java, and almost any other old-school framework depended on tons of frameworks, libraries, and tools for everything from building to caching and serving.&lt;/p&gt;
&lt;p&gt;WordPress has been adopted as a kind of universal solution for creating all sorts of websites. However, as a product, it is a monolith optimized mainly for blogging. The solution itself suffers from having a lot of its valuable functionality being implemented by or heavily dependent on 3rd party plugins that make the overall solution hard to maintain, keep secure, and be performant. A quick Google search tells us that it’s common for a WordPress website to rely on dozens (sometimes upwards of 50) 3rd party plugins (&lt;a href=&quot;https://www.wpbeginner.com/opinion/how-many-wordpress-plugins-should-you-install-on-your-site/&quot;&gt;source&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;A more modern approach championed by the Jamstack is to create a new breed of products and services on top of a modern architecture that introduces more elegant, stable, and developer-friendly ways to create a multitude of different websites - anything from blogs to e-commerce, PWAs to corporate websites and more.&lt;/p&gt;
&lt;p&gt;Additionally, Jamstack websites are infinitely more resilient and self-sufficient than your average website because they are hosted on a CDN. A dependency on a commercial service can, at worst, break the ability to update a website or disable a specific functionality (e.g. a payment gateway API). This rarely, if ever, will take down a complete Jamstack site, unlike a vulnerable plugin in a monolithic architecture that can take an entire website down. With server-side processes abstracted into microservice APIs, surface areas for attacks are reduced, and you leverage the domain expertise of specialist third-party services.&lt;/p&gt;
&lt;h2&gt;Lower usability and functionality&lt;/h2&gt;
&lt;p&gt;I have to agree - the current state of Jamstack tools in 2020 is still focused mainly on developers who are comfortable spending time in the command line. The good thing is that we have multiple players starting to build products and solutions on top of these lower-level tools. The main culprit here is that you still need to be a developer to really create and work on a Jamstack website. This is an area I’m personally passionate about and it&apos;s why I started Stackbit.&lt;/p&gt;
&lt;p&gt;We’re still paying the price for unbundling the publishing stack. Separating content from rendering from hosting has a ton of benefits that make Jamstack websites faster, more secure, easier to scale, and have a better developer experience. These benefits accrue mostly to developers and DevOps/IT folks - we’ve neglected the other side of the equation - marketers, content editors, etc. These aren’t people who are going to enjoy authoring in Markdown, editing strings in a headless CMS, or asking their developers to generate a deploy preview of their homepage headline change so they can get sign-off from management. The Jamstack will need better tools to address these, and many other, challenges. Additionally, we will see platforms/solutions emerge that re-aggregate the UX/Product of a monolithic CMS (aka what marketers need) with the inner workings of the Jamstack (what developers want).&lt;/p&gt;
&lt;h2&gt;Where is the Jamstack headed&lt;/h2&gt;
&lt;p&gt;I couldn’t be more excited about the disruptive innovation that is the Jamstack, we have most of the core concepts figured out and are feverishly working as a community to improve everything that isn’t there yet. We have folks working on making the Jamstack faster and easier, building complete Jamstack platforms, enabling A/B testing and personalization, and creating themes, workflows, plugins, etc. We came together around a single belief that is echoed from the marketing material of most Jamstack companies - Let’s make the web better.&lt;/p&gt;
&lt;p&gt;Richard Macmanus wrote that “Matt Mullenweg has a point that JAMstack is a set of solutions, rather than being a monolithic system like WordPress”. Jamstack is an architecture and what we have now is just an initial set of tools within this architecture - our ecosystem has barely even begun building solutions. When thinking of tools vs. solutions I like the following analogy “If an architecture is Japanese wood joinery and a tool is a chisel, a solution is a team of carpenters using the chisel and other tools to build a home”. The solutions I’m most excited about are those that will enable cross-functional teams to collaborate and build modern Jamstack websites, which is why I co-founded Stackbit.&lt;/p&gt;
&lt;p&gt;The achievements of WordPress in terms of market share and how it democratized early web publishing are amazing. When it comes to architecture I think it was best in class for the early 2000s but it’s time to move forward. We already see cohorts of websites where Jamstack adoption crosses 20% - it&apos;s no longer a question of if the Jamstack becomes the predominant architecture for the web but a question of when. The cliche is a cliche but it also rings true - &lt;strong&gt;First, they ignore you, then they laugh at you (we are here), then you win&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;My name is Ohad, in 2011 I dropped a snapshot of my WordPress site into an &lt;a href=&quot;https://bit.ly/3cIPYOP&quot;&gt;S3 bucket&lt;/a&gt; and never looked back. I’ve been fascinated with where the web is heading ever since and co-founded Stackbit in 2019 to build the first solution for creating and working on Jamstack websites. I’m also an early investor in Netlify and sit on their board of directors.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Matt - If you’re reading, let’s &lt;a href=&quot;https://twitter.com/ohadpr&quot;&gt;connect&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With sincerity and admiration,
Ohad Eder-Pressman
Co-founder &amp;#x26; CEO - Stackbit&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Now Anyone Can Make the Web, Better]]></title><description><![CDATA[Today we are proud to announce Stackbit Studio – the live editing experience at the heart of our Jamstack platform.]]></description><link>https://www.stackbit.com/blog/announcing-stackbit-studio/</link><guid isPermaLink="false">https://www.stackbit.com/blog/announcing-stackbit-studio/</guid><pubDate>Tue, 01 Sep 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;When we started building what would eventually become the Stackbit platform, the Jamstack was still the JAMStack and the coolest parts about it were the technology that enabled it. It wasn’t very fun to use, and it certainly wasn’t for everybody.&lt;/p&gt;
&lt;p&gt;Today, after tons of hard work and feedback, we’re thrilled to announce the general availability of &lt;strong&gt;Stackbit Studio&lt;/strong&gt;, the first complete platform for the Jamstack. Stackbit Studio fulfils the promise of the Jamstack by unlocking its potential for anyone.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Marketers&lt;/strong&gt; can edit content inline and see live previews of their changes without bugging developers&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Agency and Freelance Web Developers&lt;/strong&gt; can easily hand off projects to clients without having to worry about being on the hook for small changes and security issues&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Teams&lt;/strong&gt; can collaborate and quickly share updates with stakeholders, designers, writers and dev&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and most importantly,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Anyone&lt;/strong&gt; who wants to build websites can start their journey with the cutting edge, secure, and fast technological wonder that the Jamstack has matured into&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Stackbit Studio - The live editing experience at the heart of our complete Jamstack platform&lt;/h2&gt;
&lt;iframe src=&quot;https://player.vimeo.com/video/552361382?background=1&quot; width=&quot;640&quot; height=&quot;360&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; fullscreen; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;You can pick a theme and deploy a test site to &lt;a href=&quot;https://app.stackbit.com/create&quot;&gt;play with the Studio,&lt;/a&gt; or &lt;a href=&quot;https://youtu.be/zd9lGRLVDm4&quot;&gt;watch a quick video walkthrough on YouTube&lt;/a&gt;. Here’s a quick tour of what is available in the Stackbit Studio, today:&lt;/p&gt;
&lt;h3&gt;Connected Tools&lt;/h3&gt;
&lt;p&gt;Stackbit is the first complete platform for the Jamstack. We work with your tools, and make the ecosystem accessible to everyone. When editing a site in the Studio, your headless CMS updates automatically with all the changes you made to text, images, and other on-page elements. Stackbit Studio works with Next.js, Gatsby, Hugo or Jekyll for your static site generators, and Contentful, Sanity, and even plain ol’ git for your headless CMS, with more SSGs, headless CMS and other integrations coming soon.&lt;/p&gt;
&lt;h3&gt;Advanced Control&lt;/h3&gt;
&lt;p&gt;We want to enable everyone to build creative and powerful Jamstack sites. We’re releasing several advanced features that make Stackbit Studio the ultimate environment to build in, whether you’re just starting out or have an existing site ready to grow.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Live previews:&lt;/strong&gt; Any changes you make will be instantly previewed right then and there.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Inline editing:&lt;/strong&gt; Now everyone can &lt;a href=&quot;https://www.stackbit.com/docs/using-stackbit/editing-content/#video_editing_content&quot;&gt;update content with a click&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/stackbit-studio-announcement/stackbit-studio-text-editing.png&quot; alt=&quot;Example of inline editing, with heading selected in a live preview and a text area on the left to edit it&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Markdown editor:&lt;/strong&gt; Markdown text goes on the left, and previews on the right. Easy.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/stackbit-studio-announcement/stackbit-studio-content-editing.png&quot; alt=&quot;Example of long form content editing in Markdown, with preview on the right&quot;&gt;&lt;/p&gt;
&lt;h3&gt;Powerful Collaboration &amp;#x26; Management&lt;/h3&gt;
&lt;p&gt;The Jamstack isn’t just for developers! Stackbit Studio enables stakeholders to collaborate freely on projects so they can edit with confidence while developers maintain peace of mind.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/stackbit-studio-announcement/stackbit-studio-share.png&quot; alt=&quot;Share dropdown option to invite others to collaborate within Stackbit Studio&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Integrated asset management:&lt;/strong&gt; &lt;a href=&quot;https://www.stackbit.com/docs/using-stackbit/editing-content/#image_editing&quot;&gt;Upload and manage images&lt;/a&gt; quickly and easily.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/stackbit-studio-announcement/stackbit-studio-image-picker.png&quot; alt=&quot;Image selection within Stackbit Studio&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Granular publishing controls:&lt;/strong&gt; &lt;a href=&quot;https://www.stackbit.com/docs/using-stackbit/publishing/&quot;&gt;Publish at will, or schedule pages&lt;/a&gt; to ship right on time, anytime.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/stackbit-studio-announcement/stackbit-studio-publish.png&quot; alt=&quot;Stackbit Studio publishing controls, with the options to publish the entire site or the current page&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Build logs:&lt;/strong&gt; Catch errors quickly with &lt;a href=&quot;https://www.stackbit.com/docs/using-stackbit/logs/&quot;&gt;integrated build logs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/stackbit-studio-announcement/stackbit-studio-logs.png&quot; alt=&quot;Example build logs, showing events, within Stackbit Studio&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Portable content&lt;/strong&gt; allows you to store your CMS content in git version control without committing to a &lt;a href=&quot;https://www.stackbit.com/docs/best-practices/api-versus-git-based-cms/&quot;&gt;particular CMS API&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The web is re-platforming. We see as much as a 12% Jamstack adoption rate in VC-backed startups, and a staggering 20% of Indie Hackers sites. It is now time to make it all usable for real people, in the real world of the web.&lt;/p&gt;
&lt;p&gt;And it’s just getting started – we really ain’t seen nothin’ yet. New Jamstack tech is mushrooming constantly, each with its own merit and charm. We’re proud to offer a truly open platform that helps these amazing tools play together nicely and make the web better.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stackbit. Make the web, better.&lt;/strong&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[How to Create a Jamstack Website in Minutes!]]></title><description><![CDATA[The Stackbit Site Builder created a CMS connected Jamstack site with just a few clicks and in just minutes. Let's explore how.]]></description><link>https://www.stackbit.com/blog/create-a-jamstack-site-in-minutes/</link><guid isPermaLink="false">https://www.stackbit.com/blog/create-a-jamstack-site-in-minutes/</guid><pubDate>Thu, 13 Aug 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;At Stackbit, we believe that the Jamstack can help make a better web for everyone because Jamstack sites are fast and secure. We want to make it easy for any developer to adopt the Jamstack for their next project. That&apos;s why one of the foundational elements that has defined Stackbit since day one has been the ability to generate a Jamstack site with just a few clicks. The basic steps are:&lt;/p&gt;
&lt;h2&gt;1. Choose a theme&lt;/h2&gt;
&lt;p&gt;We currently have eight themes to choose from, including our new, highly customizable theme called &lt;a href=&quot;https://themes.stackbit.com/demos/starter/&quot;&gt;Starter&lt;/a&gt;. Plus, there are dozens of community themes available on GitHub, such as the popular &lt;a href=&quot;https://github.com/snipcart/stackbit-theme-planty&quot;&gt;Planty ecommerce theme&lt;/a&gt; by Snipcart, or even more on &lt;a href=&quot;https://jamstackthemes.dev&quot;&gt;JamstackThemes.dev&lt;/a&gt;. You also have the ability to import a custom theme of your own (for details on how to configure that, you can &lt;a href=&quot;https://docs.stackbit.com/site-builder/custom-themes/&quot;&gt;check the docs&lt;/a&gt;)&lt;/p&gt;
&lt;h2&gt;2. Choose a static site generator (SSG)&lt;/h2&gt;
&lt;p&gt;All of our themes can be generaed using Gatsby, Hugo or Jekyll (with additional support coming &lt;em&gt;very&lt;/em&gt; soon...but I won&apos;t spoil the surprise). This gives you options to choose the tool and language you prefer to use for developing your Jamstack site. (Not sure which one to choose? &lt;a href=&quot;/blog/choosing-your-ssg/&quot;&gt;We have some advice here&lt;/a&gt;.)&lt;/p&gt;
&lt;h2&gt;3. Choose a headless content management system (CMS)&lt;/h2&gt;
&lt;p&gt;One of the powerful things about buildng a site through the Stackbit site builder is that it is pre-configured for content management through your choice of &lt;a href=&quot;https://www.stackbit.com/blog/what-is-a-headless-cms/&quot;&gt;headless CMS&lt;/a&gt;, including Sanity, Contentful, DataCMS, Forestry and NetilfyCMS. We&apos;ve even added a new option for using files in your GitHub repository that can still get the full inline content editing features in Stackbit. (More on that in an upcoming post!)&lt;/p&gt;
&lt;p&gt;One you&apos;ve made these three choices, you are ready to go. Stackbit will build the site, place the source in GitHub and deploy to Netlify. Within minutes your site is ready and deployed!&lt;/p&gt;
&lt;p&gt;Let&apos;s be honest though, telling you about this is far less exciting than simply showing you...so let&apos;s see what this looks like in action.&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/d1Xlr4L44KE&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;h2&gt;Make the site your own&lt;/h2&gt;
&lt;p&gt;The really important thing you should know about your new Jamstack site is that &lt;strong&gt;the code is yours.&lt;/strong&gt; The code ends up in a GitHub respository you own. You can edit and customize it as you wish. In fact, we&apos;ve made it easy to get your site running on your local machine and start editing by providing the instructions in the project&apos;s &lt;code&gt;README.md&lt;/code&gt; or via Stackbit&apos;s online editor. This gives you the ability to do things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.stackbit.com/blog/stackbit-gatsby-site-improvements/&quot;&gt;Add a favicon, analytics, social sharing and a sitemap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.stackbit.com/blog/gatsby-search/&quot;&gt;Add site search using Algolia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.stackbit.com/blog/jamstack-gatsby-mailchimp/&quot;&gt;Add a mailing list form that connects to Mailchimp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.stackbit.com/blog/complete-guide-netlify-forms/&quot;&gt;Customize how your form submissions are handled&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;...and anything else you can think of!&lt;/p&gt;
&lt;p&gt;The best part is that everything I have described to you here is also available at no cost. Just head on over to the &lt;a href=&quot;https://app.stackbit.com/create&quot;&gt;Stackbit Site Builder&lt;/a&gt; and start creating your Jamstack site!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[A Complete Guide to Netlify Forms]]></title><description><![CDATA[Forms are a standard requirement for any site. Netlify's Forms feature makes forms in Jamstack sites easy - and it's built into Stackbit sites. This guide shows you everything you need to know about Netlify Forms.]]></description><link>https://www.stackbit.com/blog/complete-guide-netlify-forms/</link><guid isPermaLink="false">https://www.stackbit.com/blog/complete-guide-netlify-forms/</guid><pubDate>Mon, 03 Aug 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;There are a lot of options for developers building Jamstack sites when they need to handle forms. For example, this excellent &lt;a href=&quot;https://bejamas.io/blog/how-to-handle-forms-on-jamstack/&quot;&gt;reference post from Bejamas on form handling&lt;/a&gt; lists and compares 24 different options! 😮&lt;/p&gt;
&lt;p&gt;In this post, I want to focus on one of those options: &lt;a href=&quot;https://www.netlify.com/products/forms/&quot;&gt;Netlify Forms&lt;/a&gt;. If you are deploying to Netlify, they are extremely easy to set up and use. Even better, if your site is built using Stackbit, all the forms within the generated site code come prewired for Netlify Forms. By understanding how they work, it&apos;ll make it easier for you to update existing forms or create new forms on your site.&lt;/p&gt;
&lt;h2&gt;Netlify Forms Pricing&lt;/h2&gt;
&lt;p&gt;Before we dig into code, it&apos;s probably worth getting the pricing discussion out of the way. Netlify Forms are free to start, but include 100 submissions per site per month as part of the free plan. This should be sufficient for many sites, but, if you need more, you can purchase 1,000 submissions for $19 and $9 for every 500 additional submissions after that. Full details can be found on &lt;a href=&quot;https://www.netlify.com/pricing/?_ga=2.153282808.1147050974.1595961452-2087123647.1595961452#forms&quot;&gt;Netlify&apos;s pricing page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I should also note that, while Stackbit deploys to Netlify and Netlify forms are enabled by default, the forms pricng and billing is part of your Netlify account and not connected to your Stackbit account in any way.&lt;/p&gt;
&lt;h2&gt;Netlify Forms Basics&lt;/h2&gt;
&lt;p&gt;Much of the power of Netlify Forms comes in how simple they are to implement. Let&apos;s take a simple contact form you might see on a typical site (the one below is based upon the contact form Stackbit creates when for projects created in the site builder).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;#x3C;form name=&quot;simpleContactForm&quot; method=&quot;POST&quot; id=&quot;simple-contact-form&quot; class=&quot;contact-form&quot;&gt;
    &amp;#x3C;p class=&quot;form-row&quot;&gt;
        &amp;#x3C;label id=&quot;contact-form-name-label&quot; for=&quot;contact-form-name&quot; class=&quot;form-label&quot;&gt;Name&amp;#x3C;/label&gt;
        &amp;#x3C;input type=&quot;text&quot; name=&quot;name&quot; id=&quot;contact-form-name&quot; aria-labelledby=&quot;contact-form-name-label&quot; class=&quot;form-input&quot; /&gt;
    &amp;#x3C;/p&gt;
    &amp;#x3C;p class=&quot;form-row&quot;&gt;
        &amp;#x3C;label id=&quot;contact-form-email-label&quot; for=&quot;contact-form-email&quot; class=&quot;form-label&quot;&gt;Email address&amp;#x3C;/label&gt;
        &amp;#x3C;input type=&quot;email&quot; name=&quot;email&quot; id=&quot;contact-form-email&quot; aria-labelledby=&quot;contact-form-email-label&quot; class=&quot;form-input&quot; /&gt;
    &amp;#x3C;/p&gt;
    &amp;#x3C;p class=&quot;form-row&quot;&gt;
        &amp;#x3C;label id=&quot;contact-form-message-label&quot; for=&quot;contact-form-message&quot; class=&quot;form-label&quot;&gt;Message&amp;#x3C;/label&gt;
        &amp;#x3C;textarea
            name=&quot;message&quot;
            id=&quot;contact-form-message&quot;
            aria-labelledby=&quot;contact-form-message-label&quot;
            class=&quot;form-textarea&quot;
            rows=&quot;7&quot;
        &gt;&amp;#x3C;/textarea&gt;
    &amp;#x3C;/p&gt;
    &amp;#x3C;p class=&quot;form-row form-submit&quot;&gt;
        &amp;#x3C;button type=&quot;submit&quot; class=&quot;button&quot;&gt;Send Message&amp;#x3C;/button&gt;
    &amp;#x3C;/p&gt;
&amp;#x3C;/form&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To enable this form to work with Netlify Forms, all we need to do is add a &lt;code&gt;data-netlify=&quot;true&quot;&lt;/code&gt; attribute to the &lt;code&gt;form&lt;/code&gt; element like the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;#x3C;form name=&quot;simpleContactForm&quot; method=&quot;POST&quot; data-netlify=&quot;true&quot; id=&quot;simple-contact-form&quot; class=&quot;contact-form&quot;&gt;
    ...
&amp;#x3C;/form&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&apos;s all. Now, if I were to submit the form as shown below...&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/contact-submission-sm.png&quot; alt=&quot;submitting the form&quot;&gt;&lt;/p&gt;
&lt;p&gt;...it would take me to the default thank you page provided by Netlify...&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/contact-received-sm.png&quot; alt=&quot;thank you page for the form&quot;&gt;&lt;/p&gt;
&lt;p&gt;...and I can already access the form submissions in my Netlify dashboard.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/contact-verified-sm.png&quot; alt=&quot;viewing the form submission data&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Advanced Form Features&lt;/h2&gt;
&lt;p&gt;So, that was easy, but it may not be exactly what you want. For instance, you may want a custom confirmation page and you may want to ensure that bots can&apos;t submit your form. Perhaps you may even want to submit the form via JavaScript rather than a standard HTML form post. All of these things are possible, so let&apos;s review some of the more advanced functionality available in Netlify Forms.&lt;/p&gt;
&lt;h3&gt;Confirmation Page&lt;/h3&gt;
&lt;p&gt;You&apos;ll likely want to use a custom confirmation page rather than the default provided by Netlify. In order to do so, you only need to include an &lt;code&gt;action&lt;/code&gt; atttribute on your &lt;code&gt;form&lt;/code&gt;. The action should contain the path of the form confirmation page on your site relative to the root of your site. Keep in mind that this is not the file path, but the path to the page when the site is built (for example, the Hugo file path might be &lt;code&gt;/content/thanks.md&lt;/code&gt; but the path is just &lt;code&gt;/thanks&lt;/code&gt;). Here&apos;s the form tag above updated with an action:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;#x3C;form name=&quot;simpleContactForm&quot; method=&quot;POST&quot; action=&quot;/thanks&quot; data-netlify=&quot;true&quot; id=&quot;simple-contact-form&quot; class=&quot;contact-form&quot;&gt;&amp;#x3C;/form&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Spam Protection&lt;/h3&gt;
&lt;p&gt;Netlify Forms already run through a spam filter &lt;a href=&quot;https://www.netlify.com/blog/2019/02/12/improved-netlify-forms-spam-filtering-using-akismet/&quot;&gt;using Askimet&lt;/a&gt; but you can configure them for additional spam protection. There is support for a honeypot field designed to detect bot submissions of a form. This only requires that you include a field in your form that is not visible to the user and then identify the name of the field in a &lt;code&gt;data-netlify-honeypot=&quot;true&quot;&lt;/code&gt; attribute to the &lt;code&gt;form&lt;/code&gt; tag. For example, here is the same form as above, but with the honeypot protection added.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;#x3C;form
    name=&quot;simpleContactForm&quot;
    method=&quot;POST&quot;
    action=&quot;/thanks&quot;
    data-netlify=&quot;true&quot;
    data-netlify-honeypot=&quot;bot-field&quot;
    id=&quot;simple-contact-form&quot;
    class=&quot;contact-form&quot;
&gt;
    &amp;#x3C;p class=&quot;hidden&quot;&gt;
        &amp;#x3C;label id=&quot;contact-form-bot-label&quot;
            &gt;Don&apos;t fill this out if you&apos;re human: &amp;#x3C;input name=&quot;bot-field&quot; aria-labelledby=&quot;contact-form-bot-label&quot;
        /&gt;&amp;#x3C;/label&gt;
    &amp;#x3C;/p&gt;
    &amp;#x3C;p class=&quot;form-row&quot;&gt;
        &amp;#x3C;label id=&quot;contact-form-name-label&quot; for=&quot;contact-form-name&quot; class=&quot;form-label&quot;&gt;Name&amp;#x3C;/label&gt;
        &amp;#x3C;input type=&quot;text&quot; name=&quot;name&quot; id=&quot;contact-form-name&quot; aria-labelledby=&quot;contact-form-name-label&quot; class=&quot;form-input&quot; /&gt;
    &amp;#x3C;/p&gt;
    &amp;#x3C;p class=&quot;form-row&quot;&gt;
        &amp;#x3C;label id=&quot;contact-form-email-label&quot; for=&quot;contact-form-email&quot; class=&quot;form-label&quot;&gt;Email address&amp;#x3C;/label&gt;
        &amp;#x3C;input type=&quot;email&quot; name=&quot;email&quot; id=&quot;contact-form-email&quot; aria-labelledby=&quot;contact-form-email-label&quot; class=&quot;form-input&quot; /&gt;
    &amp;#x3C;/p&gt;
    &amp;#x3C;p class=&quot;form-row&quot;&gt;
        &amp;#x3C;label id=&quot;contact-form-message-label&quot; for=&quot;contact-form-message&quot; class=&quot;form-label&quot;&gt;Message&amp;#x3C;/label&gt;
        &amp;#x3C;textarea
            name=&quot;message&quot;
            id=&quot;contact-form-message&quot;
            aria-labelledby=&quot;contact-form-message-label&quot;
            class=&quot;form-textarea&quot;
            rows=&quot;7&quot;
        &gt;&amp;#x3C;/textarea&gt;
    &amp;#x3C;/p&gt;
    &amp;#x3C;p class=&quot;form-row form-submit&quot;&gt;
        &amp;#x3C;button type=&quot;submit&quot; class=&quot;button&quot;&gt;Send Message&amp;#x3C;/button&gt;
    &amp;#x3C;/p&gt;
&amp;#x3C;/form&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Adding reCAPTCHA challenge protection to your form works similarly. First add a &lt;code&gt;data-netlify-recaptcha=&quot;true&quot;&lt;/code&gt; attribute to your &lt;code&gt;form&lt;/code&gt; element and add a &lt;code&gt;div&lt;/code&gt; within the form that also has &lt;code&gt;data-netlify-recaptcha=&quot;true&quot;&lt;/code&gt;. For example, here&apos;s the same form with a reCAPTCHA challenge.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;#x3C;form
    name=&quot;simpleContactForm&quot;
    method=&quot;POST&quot;
    data-netlify=&quot;true&quot;
    data-netlify-recaptcha=&quot;true&quot;
    id=&quot;simple-contact-form&quot;
    class=&quot;contact-form&quot;
&gt;
    &amp;#x3C;p class=&quot;form-row&quot;&gt;
        &amp;#x3C;label id=&quot;contact-form-name-label&quot; for=&quot;contact-form-name&quot; class=&quot;form-label&quot;&gt;Name&amp;#x3C;/label&gt;
        &amp;#x3C;input type=&quot;text&quot; name=&quot;name&quot; id=&quot;contact-form-name&quot; aria-labelledby=&quot;contact-form-name-label&quot; class=&quot;form-input&quot; /&gt;
    &amp;#x3C;/p&gt;
    &amp;#x3C;p class=&quot;form-row&quot;&gt;
        &amp;#x3C;label id=&quot;contact-form-email-label&quot; for=&quot;contact-form-email&quot; class=&quot;form-label&quot;&gt;Email address&amp;#x3C;/label&gt;
        &amp;#x3C;input type=&quot;email&quot; name=&quot;email&quot; id=&quot;contact-form-email&quot; aria-labelledby=&quot;contact-form-email-label&quot; class=&quot;form-input&quot; /&gt;
    &amp;#x3C;/p&gt;
    &amp;#x3C;p class=&quot;form-row&quot;&gt;
        &amp;#x3C;label id=&quot;contact-form-message-label&quot; for=&quot;contact-form-message&quot; class=&quot;form-label&quot;&gt;Message&amp;#x3C;/label&gt;
        &amp;#x3C;textarea
            name=&quot;message&quot;
            id=&quot;contact-form-message&quot;
            aria-labelledby=&quot;contact-form-message-label&quot;
            class=&quot;form-textarea&quot;
            rows=&quot;7&quot;
        &gt;&amp;#x3C;/textarea&gt;
    &amp;#x3C;/p&gt;
    &amp;#x3C;div data-netlify-recaptcha=&quot;true&quot; class=&quot;form-row&quot;&gt;&amp;#x3C;/div&gt;
    &amp;#x3C;p class=&quot;form-row form-submit&quot;&gt;
        &amp;#x3C;button type=&quot;submit&quot; class=&quot;button&quot;&gt;Send Message&amp;#x3C;/button&gt;
    &amp;#x3C;/p&gt;
&amp;#x3C;/form&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Below you can see the same contact form but now containing the reCAPTCHA challenge.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/contact-recaptcha-sm.png&quot; alt=&quot;Netlify form with reCAPTCHA protections&quot;&gt;&lt;/p&gt;
&lt;p&gt;You can learn more about spam protection on Netlify Forms in &lt;a href=&quot;https://docs.netlify.com/forms/spam-filters/#extra-spam-prevention&quot;&gt;the documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Submitting a Form with JavaScript&lt;/h3&gt;
&lt;p&gt;There are times when you might want to submit the form via JavaScript rather than as a standard form post. For example, if you have a modal form, you might want to submit it via JavaScript and close the modal rather than redirect the user via a post submission. Let&apos;s see how to do that.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://docs.netlify.com/forms/setup/#submit-forms-via-ajax&quot;&gt;documentation&lt;/a&gt; provides a simple script to do this, however it depends on jQuery. This is fine if you already include jQuery, but, in many cases, you may not. The following example has no dependencies, but I&apos;ve replaced jQuery&apos;s &lt;code&gt;serialize()&lt;/code&gt; function with code taken from &lt;a href=&quot;https://codepen.io/influxweb/pen/ozoYqa&quot;&gt;this CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Our &lt;code&gt;form&lt;/code&gt; element should still be enabled for Netlify Forms as in the previous examples.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;#x3C;form name=&quot;jsContactForm&quot; method=&quot;POST&quot; action=&quot;/thanks&quot; data-netlify=&quot;true&quot; id=&quot;js-contact-form&quot; class=&quot;contact-form&quot;&gt;&amp;#x3C;/form&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In our JavaScript file, we&apos;ll add the &lt;code&gt;serialize()&lt;/code&gt; function described above as well as attach an event listener to the form&apos;s submit event, if the form exists on the page as below.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const contactForm = document.getElementById(&apos;js-contact-form&apos;);
if (contactForm) {
    const serialize = function (form) {
        var field,
            l,
            s = [];

        if (typeof form == &apos;object&apos; &amp;#x26;&amp;#x26; form.nodeName == &apos;FORM&apos;) {
            var len = form.elements.length;

            for (var i = 0; i &amp;#x3C; len; i++) {
                field = form.elements[i];
                if (
                    field.name &amp;#x26;&amp;#x26;
                    !field.disabled &amp;#x26;&amp;#x26;
                    field.type != &apos;button&apos; &amp;#x26;&amp;#x26;
                    field.type != &apos;file&apos; &amp;#x26;&amp;#x26;
                    field.type != &apos;hidden&apos; &amp;#x26;&amp;#x26;
                    field.type != &apos;reset&apos; &amp;#x26;&amp;#x26;
                    field.type != &apos;submit&apos;
                ) {
                    if (field.type == &apos;select-multiple&apos;) {
                        l = form.elements[i].options.length;

                        for (var j = 0; j &amp;#x3C; l; j++) {
                            if (field.options[j].selected) {
                                s[s.length] = encodeURIComponent(field.name) + &apos;=&apos; + encodeURIComponent(field.options[j].value);
                            }
                        }
                    } else if ((field.type != &apos;checkbox&apos; &amp;#x26;&amp;#x26; field.type != &apos;radio&apos;) || field.checked) {
                        s[s.length] = encodeURIComponent(field.name) + &apos;=&apos; + encodeURIComponent(field.value);
                    }
                }
            }
        }
        return s.join(&apos;&amp;#x26;&apos;).replace(/%20/g, &apos;+&apos;);
    };
    contactForm.addEventListener(&apos;submit&apos;, (e) =&gt; {
        e.preventDefault();

        const theForm = e.currentTarget;
        const formData = &apos;form-name=&apos; + theForm.name + &apos;&amp;#x26;&apos; + serialize(theForm);
        const options = {
            method: &apos;POST&apos;,
            headers: { &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos; },
            body: formData
        };

        fetch(&apos;/&apos;, options)
            .then(function (response) {
                window.location.assign(theForm.action);
            })
            .catch(function (error) {
                console.log(error);
            });
    });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our event listener uses the &lt;code&gt;fetch()&lt;/code&gt; API to make the asynchronous call. Notice that it doesn&apos;t really matter where we post the form to, Netlify Forms is smart enough to pick up the request and handle it. In this case, our &lt;code&gt;fetch()&lt;/code&gt; request posts to &lt;code&gt;/&lt;/code&gt; (i.e. the root of the site).&lt;/p&gt;
&lt;p&gt;It is worth noting that the content type is set to &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;. This works because we are sending simple form elements that can be passed as string data. If our form had included a file upload, which Netlify Forms supports, we&apos;d need to use &lt;code&gt;multipart/form-data&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The fetch API returns a JavaScript promise. Assuming the request succeeds, in this case we are just redirecting the user to the value of the &lt;code&gt;form&lt;/code&gt;&apos;s &lt;code&gt;action&lt;/code&gt; attribute. In most case, you&apos;ll probably want to perform some other kind of response. In addition, our error handler only dumps the error to the console at the moment. You&apos;ll want to display some sort of notification to the user that the form submission failed instead, depending on how your form is displayed.&lt;/p&gt;
&lt;h2&gt;Netlify Forms in React-based Static Site Generators&lt;/h2&gt;
&lt;p&gt;Netlify has a &lt;a href=&quot;https://www.netlify.com/blog/2017/07/20/how-to-integrate-netlifys-form-handling-in-a-react-app/&quot;&gt;post dedicated to this topic&lt;/a&gt;. Even though it is a few years old, it is still accurate. However, let&apos;s look at this topic as it relates to the two most popular React-based SSGs: Gatsby and Next.js.&lt;/p&gt;
&lt;p&gt;The only required change to a Gatsby or Next.js form to enable it to be captured by Netlify Forms is to add a hidden field with the name &lt;code&gt;form-name&lt;/code&gt; that contains the name of the form just as our previous examples did within the &lt;code&gt;form&lt;/code&gt; tag itself. For example, here&apos;s a contact form with a custom confirmation page and the honeypot spam protection enabled that will work in either a Gatsby or Next.js component:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;#x3C;form
    name=&quot;contactForm&quot;
    method=&quot;POST&quot;
    action=&quot;/contact-thanks&quot;
    data-netlify-honeypot=&quot;bot-field&quot;
    data-netlify=&quot;true&quot;
    id=&quot;contact-form&quot;
    className=&quot;contact-form&quot;
&gt;
    &amp;#x3C;p className=&quot;screen-reader-text&quot;&gt;
        &amp;#x3C;label&gt;Don&apos;t fill this out if you&apos;re human: &amp;#x3C;input name=&quot;bot-field&quot; /&gt;&amp;#x3C;/label&gt;
    &amp;#x3C;/p&gt;
    &amp;#x3C;p className=&quot;form-row&quot;&gt;
        &amp;#x3C;label htmlFor=&quot;contact-form-name&quot; className=&quot;form-label&quot;&gt;Name&amp;#x3C;/label&gt;
        &amp;#x3C;input type=&quot;text&quot; name=&quot;name&quot; id=&quot;contact-form-name&quot; className=&quot;form-input&quot; /&gt;
    &amp;#x3C;/p&gt;
    &amp;#x3C;p className=&quot;form-row&quot;&gt;
        &amp;#x3C;label htmlFor=&quot;contant-form-email&quot; className=&quot;form-label&quot;&gt;Email address&amp;#x3C;/label&gt;
        &amp;#x3C;input type=&quot;email&quot; name=&quot;email&quot; id=&quot;contant-form-email&quot; className=&quot;form-input&quot; /&gt;
    &amp;#x3C;/p&gt;
    &amp;#x3C;p className=&quot;form-row&quot;&gt;
        &amp;#x3C;label htmlFor=&quot;contant-form-message&quot; className=&quot;form-label&quot;&gt;Message&amp;#x3C;/label&gt;
        &amp;#x3C;textarea name=&quot;message&quot; id=&quot;contant-form-message&quot; className=&quot;form-textarea&quot; rows=&quot;7&quot; /&gt;
    &amp;#x3C;/p&gt;
    &amp;#x3C;input type=&quot;hidden&quot; name=&quot;form-name&quot; value=&quot;contactForm&quot; /&gt;
    &amp;#x3C;p className=&quot;form-row form-submit&quot;&gt;
        &amp;#x3C;button type=&quot;submit&quot; className=&quot;button&quot;&gt;Send Message&amp;#x3C;/button&gt;
    &amp;#x3C;/p&gt;
&amp;#x3C;/form&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Handling Form Submissions via JavaScript in Gatsby and Next.js&lt;/h3&gt;
&lt;p&gt;To handle your form submission via JavaScript rather than a standard form post, we&apos;ll use code similar to the plain old JavaScript form handling shown previously. Here&apos;s what we&apos;ll need to handle in order to achieve this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Our form will need to have state, which will hold the form inputs from the user.&lt;/li&gt;
&lt;li&gt;We&apos;ll need a method to handle updating the state as the user enters data into the form fields.&lt;/li&gt;
&lt;li&gt;We&apos;ll need an &lt;code&gt;encode&lt;/code&gt; method to URL encode the form parameters (ours will be taken from the &lt;a href=&quot;https://www.netlify.com/blog/2017/07/20/how-to-integrate-netlifys-form-handling-in-a-react-app/&quot;&gt;previously referenced tutorial&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;We&apos;ll need a method to handle the form submission when the user clicks submit.&lt;/li&gt;
&lt;li&gt;Finally, we&apos;ll need to wire all of the above up to the existing form.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The identical code will work for both Next.js and Gatsby sites. Here&apos;s the finished code based upon the same contact form we&apos;ve worked with in the prior examples. Note, however, that we do not need a &lt;code&gt;method&lt;/code&gt; and &lt;code&gt;action&lt;/code&gt; on the &lt;code&gt;form&lt;/code&gt; tag, nor do we need the &lt;code&gt;form-name&lt;/code&gt; element as this is wired into the submission script.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import React from &apos;react&apos;;

export default class SectionContact extends React.Component {
    state = {
      name: &apos;&apos;,
      email: &apos;&apos;,
      message: &apos;&apos;
    };
    handleInputChange = (event) =&gt; {
      const target = event.target;
      const value = target.value;
      const name = target.name;
      this.setState({
          [name]: value
      });
    };
    encode = (data) =&gt; {
      return Object.keys(data)
          .map(key =&gt; encodeURIComponent(key) + &quot;=&quot; + encodeURIComponent(data[key]))
          .join(&quot;&amp;#x26;&quot;);
    }
    handleSubmit = async (e) =&gt; {
      e.preventDefault();
      const options = {
        method: &apos;POST&apos;,
        headers: { &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos; },
        body: this.encode({ &apos;form-name&apos;: &apos;contactForm&apos;, ...this.state })
      }

      fetch(
        &quot;/&quot;,
        options
      )
      .then(function (response) {
        window.location.assign(&apos;/contact-thanks/&apos;);
      })
      .catch(function (error) {
        console.log(error);
      });
    };
    render() {
        &amp;#x3C;form name=&quot;contactForm&quot; data-netlify=&quot;true&quot; id=&quot;contact-form&quot; className=&quot;contact-form&quot; onSubmit={this.handleSubmit}&gt;
        &amp;#x3C;p className=&quot;form-row&quot;&gt;
            &amp;#x3C;label htmlFor=&quot;contact-form-name&quot; className=&quot;form-label&quot;&gt;Name&amp;#x3C;/label&gt;
            &amp;#x3C;input type=&quot;text&quot; name=&quot;name&quot; id=&quot;contact-form-name&quot; className=&quot;form-input&quot; value={this.state.name} onChange={this.handleInputChange}/&gt;
        &amp;#x3C;/p&gt;
        &amp;#x3C;p className=&quot;form-row&quot;&gt;
            &amp;#x3C;label htmlFor=&quot;contant-form-email&quot; className=&quot;form-label&quot;&gt;Email address&amp;#x3C;/label&gt;
            &amp;#x3C;input type=&quot;email&quot; name=&quot;email&quot; id=&quot;contant-form-email&quot; className=&quot;form-input&quot; value={this.state.email} onChange={this.handleInputChange}/&gt;
        &amp;#x3C;/p&gt;
        &amp;#x3C;p className=&quot;form-row&quot;&gt;
            &amp;#x3C;label htmlFor=&quot;contant-form-message&quot; className=&quot;form-label&quot;&gt;Message&amp;#x3C;/label&gt;
            &amp;#x3C;textarea name=&quot;message&quot; id=&quot;contant-form-message&quot; className=&quot;form-textarea&quot; rows=&quot;7&quot; value={this.state.message} onChange={this.handleInputChange} /&gt;
        &amp;#x3C;/p&gt;
        &amp;#x3C;p className=&quot;form-row form-submit&quot;&gt;
            &amp;#x3C;button type=&quot;submit&quot; className=&quot;button&quot;&gt;Send Message&amp;#x3C;/button&gt;
        &amp;#x3C;/p&gt;
    &amp;#x3C;/form&gt;
        );
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Managing Submissions&lt;/h2&gt;
&lt;p&gt;All form submissions handled via Netlify Forms will be stored and accessible via the Forms tab in your project&apos;s Netlify dashboard. From here, you can expand them to view the submission details, delete them or mark them as spam. You can also download all the submissions as a CSV file.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/forms-management-sm.png&quot; alt=&quot;managing forms in the Netlify dashboard&quot;&gt;&lt;/p&gt;
&lt;h3&gt;Notifications&lt;/h3&gt;
&lt;p&gt;More than likely you&apos;ll want to receive some form of notification when a form is submitted or to put the information into some sort of workflow to process. To manage this, go to Settings &gt; Forms &gt; Form notifications in your project&apos;s Netlify dashboard. From there you can configure an email notification, a notification to an existing Slack channel or post form details to a webhook.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/forms-notifications-sm.png&quot; alt=&quot;adding form notifications in the Netlify dashboard&quot;&gt;&lt;/p&gt;
&lt;p&gt;The outgoing webhook offers an opportunity to connect form submissions with any number of tools. For example, you could use a tool like IFTTT or Zapier, both of which offer webhooks, to integrate with the thousands of tools that they have prebuilt integrations for.&lt;/p&gt;
&lt;h2&gt;Forms Handling in Netlify Functions&lt;/h2&gt;
&lt;p&gt;Netlify Functions are serverless functions that can easily be deployed with your Netlify project. They can perform all kinds of server-side business logic. They can also respond to &lt;a href=&quot;https://docs.netlify.com/functions/trigger-on-events/#available-triggers&quot;&gt;events and triggers&lt;/a&gt;, including the &lt;code&gt;submission-created&lt;/code&gt; event that occurs when a form is submitted. Let&apos;s see how we can take advantage of this by automatically writing our contact form submissions to a Google Sheet.&lt;/p&gt;
&lt;h3&gt;Configuring Google Sheets&lt;/h3&gt;
&lt;p&gt;Before I start, though, credit goes to &lt;a href=&quot;https://www.swyx.io/writing/netlify-google-sheets/&quot;&gt;this post by Shawn Wang&lt;/a&gt; for the inspiration and code examples and &lt;a href=&quot;https://css-tricks.com/using-netlify-forms-and-netlify-functions-to-build-an-email-sign-up-widget/&quot;&gt;this post by Matthew Ström&lt;/a&gt; for additional insight into working with the Netlify Forms trigger.&lt;/p&gt;
&lt;p&gt;Firstly, we&apos;ll be working with this &lt;a href=&quot;https://theoephraim.github.io/node-google-spreadsheet/#/classes/google-spreadsheet-row&quot;&gt;Google Spreadsheet wrapper for Node&lt;/a&gt;, which handles much of the complexity for us. So we&apos;ll start by adding this to our project via &lt;code&gt;npm install google-spreadsheet&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are quite a few requirements for connecting to the Google Sheet that &lt;a href=&quot;https://www.swyx.io/writing/netlify-google-sheets/&quot;&gt;Shawn covers in his post&lt;/a&gt;. They are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We may need to create a project in Google if you do not have one already. Go to your &lt;a href=&quot;https://console.developers.google.com/apis/dashboard&quot;&gt;Google APIs dashboard&lt;/a&gt; and click the project drop down in the upper-left-hand side of the page and then click the &quot;New Project&quot; button.&lt;/li&gt;
&lt;li&gt;We&apos;ll need to &lt;a href=&quot;https://console.developers.google.com/apis/library/sheets.googleapis.com&quot;&gt;enable the Google Sheets API for our project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We&apos;ll need to create service account credentials from the &lt;a href=&quot;https://console.developers.google.com/apis/credentials&quot;&gt;credentials page in our Google APIs dashboard&lt;/a&gt;. Go down to the &quot;Service Accounts&quot; section, click &quot;Manage Service Accounts&quot; and then &quot;Create Service Account&quot;. The service account name can be anything you choose. For the role, we can choose Project &gt; Editor. We can just click &quot;Done&quot; when asked to grant user&apos;s permission to the service account, leaving this blank.&lt;/li&gt;
&lt;li&gt;When the service account is created, select the &quot;Actions&quot; dropdown on the row with our new service account and click &quot;Create Key&quot;. Choose JSON and download the key file somewhere safe on your computer.&lt;/li&gt;
&lt;li&gt;Open the file and copy the following items into a &lt;code&gt;.env&lt;/code&gt; file in your project (be sure that this file is added to your &lt;code&gt;.gitignore&lt;/code&gt; as you do not want to accidentally check in your credentials to a public repository):
_ The value of &lt;code&gt;client_email&lt;/code&gt; from the JSON file is &lt;code&gt;GOOGLE_SERVICE_ACCOUNT_EMAIL&lt;/code&gt; in your &lt;code&gt;.env&lt;/code&gt;
_ The value of &lt;code&gt;private_key&lt;/code&gt; in the JSON file is &lt;code&gt;GOOGLE_PRIVATE_KEY&lt;/code&gt; in the &lt;code&gt;.env&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ok. I know that&apos;s already a lot of steps, but we&apos;re almost done. We just need to create the sheet that we&apos;ll connect to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a spreadsheet in Google Sheets (name it whatever you like, mine is &quot;Contact Form Submissions&quot;).&lt;/li&gt;
&lt;li&gt;Add a first row with headers. These need to match the values we&apos;ll be sending &lt;em&gt;exactly&lt;/em&gt; (even case is important here). For our contact form, these should read &quot;name&quot;, &quot;email&quot; and &quot;message&quot;. You can freeze the header row if you wish by selecting it in Google Sheets and clicking View &gt; Freeze &gt; 1 Row.&lt;/li&gt;
&lt;li&gt;Copy the ID of the sheet from the URL. For example, my URL is &lt;code&gt;https://docs.google.com/spreadsheets/d/1sCwnjw0K9a2F9i9oR2MO8tPv_u3X_dIbLa12bnxh2B0/edit#gid=0&lt;/code&gt;, so my sheet ID is &lt;code&gt;1sCwnjw0K9a2F9i9oR2MO8tPv_u3X_dIbLa12bnxh2B0&lt;/code&gt;. Place this into the &lt;code&gt;.env&lt;/code&gt; file as &lt;code&gt;GOOGLE_SPREADSHEET_ID_FROM_URL&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Writing the Function&lt;/h3&gt;
&lt;p&gt;Whew! We&apos;re finally ready to code our Netlify Function. Let&apos;s start by creating a folder named &lt;code&gt;lambda&lt;/code&gt; that will hold our functions (this name isn&apos;t required, it&apos;s just what I chose). Then open the &lt;code&gt;netlify.toml&lt;/code&gt; file and add this as our functions folder. For example, here&apos;s the contents of my project&apos;s &lt;code&gt;netlify.toml&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-toml&quot;&gt;[build]
publish = &quot;out&quot;
command = &quot;./stackbit-build.sh&quot;
functions = &quot;./lambda&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Within the &lt;code&gt;lambda&lt;/code&gt; folder, create a file named &lt;code&gt;submission-created.js&lt;/code&gt;. The name is critical here as it tells Netlify to call this whenever the &lt;code&gt;submission-created&lt;/code&gt; event is triggered. The function itself will look like this (I&apos;ll explain it in a moment):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;if (!process.env.NETLIFY) {
    // get local env vars if not in CI
    // if in CI i expect its already set via the Netlify UI
    require(&apos;dotenv&apos;).config();
}

if (!process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL) throw new Error(&apos;no GOOGLE_SERVICE_ACCOUNT_EMAIL env var set&apos;);
if (!process.env.GOOGLE_PRIVATE_KEY) throw new Error(&apos;no GOOGLE_PRIVATE_KEY env var set&apos;);
if (!process.env.GOOGLE_SPREADSHEET_ID_FROM_URL) throw new Error(&apos;no GOOGLE_SPREADSHEET_ID_FROM_URL env var set&apos;);

const { GoogleSpreadsheet } = require(&apos;google-spreadsheet&apos;);

exports.handler = async (event, context) =&gt; {
    const doc = new GoogleSpreadsheet(process.env.GOOGLE_SPREADSHEET_ID_FROM_URL);

    await doc.useServiceAccountAuth({
        client_email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
        private_key: process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, &apos;\n&apos;)
    });
    await doc.loadInfo();
    const sheet = doc.sheetsByIndex[0];

    try {
        const data = JSON.parse(event.body).payload.data;
        const addedRow = await sheet.addRow(data);
        return {
            statusCode: 200,
            body: JSON.stringify({
                message: `POST Success - added row ${addedRow._rowNumber - 1}`
            })
        };
    } catch (err) {
        console.error(&apos;error ocurred in processing &apos;, event);
        console.error(err);
        return {
            statusCode: 500,
            body: err.toString()
        };
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first part just looks for the required environment variables. Right now these are in our &lt;code&gt;.env&lt;/code&gt; file but we&apos;ll need to also add these via our Netlify Dashboard before the function will work when deployed. To do this, go to your Settings &gt; Build &amp;#x26; Deploy &gt; Environment and set the same variable names and values as from the &lt;code&gt;.env&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The core of the function first connects to the Google Sheet. Once this connection succeeds, it parses the JSON payload automatically passed in by Netlify with the &lt;code&gt;submission-created&lt;/code&gt; event trigger and adds a row to the sheet. Yes, you are justified in thinking that the code is way simpler than the setup it required.&lt;/p&gt;
&lt;p&gt;Here you can see the code in action as I submit the form and it &quot;magically&quot; appears in my spreadsheet.&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/xDdgOCo5mbw&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;Obviously, you are not limited to this functionality. This is just one example and you can do any number of amazing things with your form submission data in your Netlify Function. For a very good reference on the data that Netlify makes available in Netlify Forms-related functions, check &lt;a href=&quot;https://www.raymondcamden.com/2019/01/15/customized-form-handling-on-netlify-with-serverless-functions&quot;&gt;this post by Raymond Camden&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Where to Go From Here&lt;/h2&gt;
&lt;p&gt;My goal here was to give you the most comprehensive guide I could to Netlify Forms. The &lt;a href=&quot;https://docs.netlify.com/forms/setup/&quot;&gt;documentation&lt;/a&gt; is still an important resource. You can also get support for your Netlify Forms questions via &lt;a href=&quot;https://community.netlify.com/t/support-guide-form-problems-form-debugging-404-when-submitting/92&quot;&gt;Netlify&apos;s community forums&lt;/a&gt;, but hopefully I have given you everything you need. So, first remember that no one loves filling out forms, and try not to go overboard. Otherwise, just go build some forms!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Adding a Mailing List to Your Gatsby Site]]></title><description><![CDATA[Documentation sites are a longstanding and common use case for the JAMstack. In this post we explore some of the options available to you for developing them and show an example of how to build one.]]></description><link>https://www.stackbit.com/blog/jamstack-gatsby-mailchimp/</link><guid isPermaLink="false">https://www.stackbit.com/blog/jamstack-gatsby-mailchimp/</guid><pubDate>Mon, 27 Jul 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Yes, we all get far too much emails. There&apos;s basically a whole sub-genre of memes dedicated to the topic, such as...&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1595861992-toomanyemails.jpg&quot; alt=&quot;too many emails&quot;&gt;&lt;/p&gt;
&lt;p&gt;Nonetheless, newsletters and mailing lists are often one of the most effective ways we have to communicate with our users, customers, readers, etc. So, what if I wanted to create a simple form on my site that let people enter their email and sign up for my mailing list. In this post, we&apos;ll quickly look at how you can add a newsletter sign up form to a Gatsby site that automatically subscribes a user to a mailing list on Mailchimp.
The site we&apos;ll work on was built built using Stackbit, so if you used Stackbit to build your Gatsby site, it&apos;ll be easy to follow along, however there is nothing Stackbit specific about the code and integrations. You can find the code in this &lt;a href=&quot;https://github.com/remotesynth/good-celery&quot;&gt;sample project&lt;/a&gt;, where I&apos;ve been working on a number upgrades to an existing Stackbit generated site.&lt;/p&gt;
&lt;h2&gt;Installing and Configuring the Gatsby Plugin&lt;/h2&gt;
&lt;p&gt;You probably won&apos;t be surprised that Gatsby already has a &lt;a href=&quot;https://www.gatsbyjs.org/packages/gatsby-plugin-mailchimp/&quot;&gt;plugin to integrate with Mailchimp&lt;/a&gt;. We&apos;ll take advantage of this as it makes the process of adding a subscription form much simpler. Start by installing the plugin into your existing project:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install gatsby-plugin-mailchimp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The plugin has very a minimal amount of required configuration. While it has some additional options that you can read about in the &lt;a href=&quot;https://www.gatsbyjs.org/blog/2019-01-31-using-react-context-api-with-gatsby/&quot;&gt;documentation&lt;/a&gt;, the only required configuration parameter is a Mailchimp endpoint. For example, here is the configuration added to &lt;code&gt;plugins&lt;/code&gt; within my &lt;code&gt;gatsby-config.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;...
{
  resolve: &apos;gatsby-plugin-mailchimp&apos;,
  options: {
    endpoint: &apos;https://remotesynthesis.us6.list-manage.com/subscribe/post?u=231f8aff82a1f82e4d6ab23d8&amp;#x26;amp;id=d00ad8719a&apos;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To obtain your enpoint URL, log into your Mailchimp account and go to &quot;Audience&quot; &gt; &quot;All Contacts&quot; from the top navigation. Once there, click &quot;Signup forms&quot; and then &quot;Embedded forms&quot;. This will open a page with HTML that you can copy to add an embedded form on your site. However, we don&apos;t want the full embedded form code as we are creating a custom form. We only want the endpoint URL in the &lt;code&gt;action&lt;/code&gt; attribute of the form as seen below.
&lt;img src=&quot;/images/1595862101-endpoint-sm.png&quot; alt=&quot;getting the Mailchimp endpoint URL&quot;&gt;
Paste that URL into the &lt;code&gt;endpoint&lt;/code&gt; option for the plugin configuration and we are done with configuration.&lt;/p&gt;
&lt;h2&gt;Updating the Form Code&lt;/h2&gt;
&lt;p&gt;You can create your subscribe form code from scratch depending on what site you are working on. If you are building your own, you can skip ahead to the &lt;a href=&quot;#finished-component&quot;&gt;finished component&lt;/a&gt;. In my case, my site was generated using Stackbit&apos;s Azimuth template that already has an existing &lt;code&gt;SubscribeForm.js&lt;/code&gt; component that renders a mailing list sunscription form. It has been preconfigured to submit directly to Netlify&apos;s Forms functionality. Here&apos;s the code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import React from &apos;react&apos;;
export default class SubscribeForm extends React.Component {
    render() {
        return (
            &amp;#x3C;form
                name=&quot;subscribeForm&quot;
                method=&quot;POST&quot;
                netlifyHoneypot=&quot;bot-field&quot;
                data-netlify=&quot;true&quot;
                id=&quot;subscribe-form&quot;
                className=&quot;subscribe-form&quot;
            &gt;
                &amp;#x3C;div className=&quot;screen-reader-text&quot;&gt;
                    &amp;#x3C;label&gt;
                        Don&apos;t fill this out if you&apos;re human: &amp;#x3C;input name=&quot;bot-field&quot; /&gt;
                    &amp;#x3C;/label&gt;
                &amp;#x3C;/div&gt;
                &amp;#x3C;div className=&quot;form-row&quot;&gt;
                    &amp;#x3C;label&gt;
                        &amp;#x3C;span className=&quot;screen-reader-text&quot;&gt;Email address&amp;#x3C;/span&gt;
                        &amp;#x3C;input className=&quot;subscribe-email&quot; type=&quot;email&quot; name=&quot;email&quot; placeholder=&quot;Enter Email Address...&quot; /&gt;
                    &amp;#x3C;/label&gt;
                &amp;#x3C;/div&gt;
                &amp;#x3C;input type=&quot;hidden&quot; name=&quot;form-name&quot; value=&quot;subscribeForm&quot; /&gt;
                &amp;#x3C;button className=&quot;button&quot; type=&quot;submit&quot;&gt;
                    Subscribe
                &amp;#x3C;/button&gt;
            &amp;#x3C;/form&gt;
        );
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First, let&apos;s remove the code specific to Netlify Forms. Remove the &lt;code&gt;netlifyHoneypot=&quot;bot-field&quot; data-netlify=&quot;true&quot;&lt;/code&gt; from the &lt;code&gt;form&lt;/code&gt; tag. Remove the entire &lt;code&gt;div&lt;/code&gt; containing the &lt;code&gt;bot-field&lt;/code&gt; hidden form field. Finally, remove the hidden &lt;code&gt;form-name&lt;/code&gt; field.
&lt;a name=&quot;finished-component&quot;&gt;&lt;/a&gt;The finished form component is simple, only containing a single form input for the email and a submit button. It should look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import React from &apos;react&apos;;
export default class SubscribeForm extends React.Component {
    render() {
        return (
            &amp;#x3C;form name=&quot;subscribeForm&quot; method=&quot;POST&quot; id=&quot;subscribe-form&quot; className=&quot;subscribe-form&quot;&gt;
                &amp;#x3C;div className=&quot;form-row&quot;&gt;
                    &amp;#x3C;label&gt;
                        &amp;#x3C;span className=&quot;screen-reader-text&quot;&gt;Email address&amp;#x3C;/span&gt;
                        &amp;#x3C;input className=&quot;subscribe-email&quot; type=&quot;email&quot; name=&quot;email&quot; placeholder=&quot;Enter Email Address...&quot; /&gt;
                    &amp;#x3C;/label&gt;
                &amp;#x3C;/div&gt;
                &amp;#x3C;button className=&quot;button&quot; type=&quot;submit&quot;&gt;
                    Subscribe
                &amp;#x3C;/button&gt;
            &amp;#x3C;/form&gt;
        );
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Connecting the Form to Mailchimp&lt;/h2&gt;
&lt;p&gt;The first thing we&apos;ll need to do is add state to the component. The first item will be &lt;code&gt;email&lt;/code&gt; that will represent the input from the form and the second is &lt;code&gt;message&lt;/code&gt; that will hold the response sent back from Mailchimp via the plugin (this already sends friendly HTML formatted messages we can use). The &lt;code&gt;handleInputChange&lt;/code&gt; method is taken directly from &lt;a href=&quot;https://www.gatsbyjs.org/docs/adding-forms/&quot;&gt;Gatsby&apos;s handling forms documentation&lt;/a&gt; for updating the state based upon form input changes.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;state = {
    email: &apos;&apos;,
    message: &apos;&apos;
};
handleInputChange = (event) =&gt; {
    const target = event.target;
    const value = target.value;
    const name = target.name;
    this.setState({
        [name]: value
    });
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, let&apos;s connect the value of our email input to the component state and handle updating the state.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;#x3C;input
    className=&quot;subscribe-email&quot;
    type=&quot;email&quot;
    name=&quot;email&quot;
    placeholder=&quot;Enter Email Address...&quot;
    value=&quot;{this.state.email}&quot;
    onChange=&quot;{this.handleInputChange}&quot;
/&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we need some way to display the message response to the user. We&apos;ll want that to be highlighted in some meaningful way. For example, within Azimuth, I added a new style to &lt;code&gt;_general.scss&lt;/code&gt; under the subscribe form section that uses the bright orange accent color already configured in the styles.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.message {
    color: _palette(accent-orange);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let&apos;s add the message to the form by adding a &lt;code&gt;div&lt;/code&gt; before the &lt;code&gt;form-row&lt;/code&gt; containing the email input.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;#x3C;div className=&quot;message&quot; dangerouslySetInnerHTML=&quot;{{&quot; __html: this.state.message}} /&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we&apos;re ready to make the final connection to the plugin. Of course, we need to add the plugin to our imports.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import addToMailchimp from &apos;gatsby-plugin-mailchimp&apos;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&apos;s add the submit handler. The code for this is only a few lines, passing the email to the call to Mailchimp and setting the &lt;code&gt;message&lt;/code&gt; in our state to the message in the response.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;handleSubmit = async (e) =&gt; {
    e.preventDefault();
    const result = await addToMailchimp(this.state.email);
    this.setState({ message: result.msg });
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we just need to wire the &lt;code&gt;form&lt;/code&gt; to call this function when the user clicks submit by adding an &lt;code&gt;onsubmit&lt;/code&gt; handler to the &lt;code&gt;form&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; onSubmit={this.handleSubmit}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;The Form in Action and Next Steps&lt;/h2&gt;
&lt;p&gt;We&apos;re done! Let&apos;s go ahead and test this out. I&apos;ve connected mine to an existing mailing list I had for new and throwback music picks called &lt;a href=&quot;https://codabreaker.rocks/&quot;&gt;Coda Breaker&lt;/a&gt;. Entering an email address that is not yet subscribed will display a message indicating that they need to confirm their subscription as that is how our email list is configured in Mailchimp.
&lt;img src=&quot;/images/1595862039-confirm-sm.png&quot; alt=&quot;confirming your email&quot;&gt;
If I enter an email address that is already subscribed, I&apos;ll get an error message like the following:
&lt;img src=&quot;/images/1595862071-error-sm.png&quot; alt=&quot;Mailchimp subscription error message&quot;&gt;
Moving forward, you may want to expand your form to include more information about the user for your list, and that is completely possible using the plugin. The plugin allows for a second parameter to the &lt;code&gt;addToMailchimp&lt;/code&gt; function called &lt;code&gt;listFields&lt;/code&gt;, which is a structure containing additional values about the user for your list. You can reference the &lt;a href=&quot;https://www.gatsbyjs.org/packages/gatsby-plugin-mailchimp/&quot;&gt;plugin documentation&lt;/a&gt; for more details.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Adding Search to Your Gatsby Site]]></title><description><![CDATA[Search is a common site requirement. Let's look at how to populate a search index on Algolia and implement search on a Jamstack site built with Gatsby.]]></description><link>https://www.stackbit.com/blog/gatsby-search/</link><guid isPermaLink="false">https://www.stackbit.com/blog/gatsby-search/</guid><pubDate>Wed, 01 Jul 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Search is an important part of almost any site. Once you have a lot of content, it becomes an especially critical tool for helping your users find what they need. But search is also totally dynamic, so it must be impossible or, at the very least, really difficult to do on a Jamstack site, right?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1593607475-nope.jpg&quot; alt=&quot;nope&quot;&gt;&lt;/p&gt;
&lt;p&gt;In this post, we&apos;re going to explore adding search to a site built with Gatsby. We&apos;ll use a service called &lt;a href=&quot;https://www.algolia.com/&quot;&gt;Algolia&lt;/a&gt; for the search API. This is a commercial offering, but it has a generous free tier. The example site was built with Stackbit, though there&apos;s nothing in the code that we&apos;ll discuss that is Stackbit specific (for reference, you can see the full project code at &lt;a href=&quot;https://github.com/remotesynth/good-celery&quot;&gt;https://github.com/remotesynth/good-celery&lt;/a&gt;). Ok, enough intro...let&apos;s get coding.&lt;/p&gt;
&lt;h2&gt;Setting Up Algolia&lt;/h2&gt;
&lt;p&gt;First things first, you&apos;ll need to set up your account on Algolia and set up a project. You can skip the steps about setting up indices as we&apos;ll take care of that via code. However, be sure to grab all your API keys from the Algolia dashboard as we&apos;ll need them later.&lt;/p&gt;
&lt;p&gt;Algolia provides two projects that we&apos;ll make use of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/algolia/gatsby-plugin-algolia&quot;&gt;Gatsby Plugin Algolia&lt;/a&gt; will help us create our indices and make sure they are kept in sync with our content.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/algolia/react-instantsearch&quot;&gt;React InstantSearch&lt;/a&gt; provides a pre-built set of tools for interacting with Algolia&apos;s search API for a &quot;search as you type&quot; UI. This project also encompasses the &lt;code&gt;react-instantsearch-dom&lt;/code&gt; UI tools we&apos;ll also use.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&apos;s start by installing these on our Gatsby project.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install gatsby-plugin-algolia react-instantsearch react-instantsearch-dom --save
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Configuring Algolia in Our Gatsby Project&lt;/h3&gt;
&lt;p&gt;Next we need to edit our &lt;code&gt;gatsby-config.js&lt;/code&gt; file, first by adding these two lines prior to the &lt;code&gt;module.exports&lt;/code&gt; block.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const queries = require(&apos;./src/utils/algolia&apos;);
require(&apos;dotenv&apos;).config();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Neither of these files exist yet, but we&apos;ll create them in a moment. Staying in &lt;code&gt;gatsby-config.js&lt;/code&gt;, within the &lt;code&gt;module.exports&lt;/code&gt; block and within the &lt;code&gt;plugins&lt;/code&gt; array, add the following details:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  resolve: `gatsby-plugin-algolia`,
  options: {
    appId: process.env.GATSBY_ALGOLIA_APP_ID,
    apiKey: process.env.ALGOLIA_ADMIN_KEY,
    queries,
    chunkSize: 10000,
  },
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, create (or open) a &lt;code&gt;.env&lt;/code&gt; file and add the API key details from Algolia to the file as follow (replacing the values on the right of the equal signs with the appropriate keys from Algolia)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GATSBY_ALGOLIA_APP_ID=MY_ALGOLIA_APP_ID
GATSBY_ALGOLIA_SEARCH_KEY=MY_ALGOLIA_SEARCH_KEY
GATSBY_ALGOLIA_ADMIN_KEY=MY_ALGOLIA_ADMIN_KEY
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Please ensure that this &lt;code&gt;.env&lt;/code&gt; file is added to your &lt;code&gt;.gitignore&lt;/code&gt; so that you do not accidentally check in your private keys.&lt;/p&gt;
&lt;h3&gt;Adding Slugs to Posts&lt;/h3&gt;
&lt;p&gt;In some cases, as in my site generated by Stackbit, pages do not have a &lt;code&gt;slug&lt;/code&gt; field in the frontmatter. Having slugs available in the search made it much easier to output the results. Rather than manually add slugs to all of my content, Gatsby provides instructions on how to &lt;a href=&quot;https://www.gatsbyjs.org/docs/creating-slugs-for-pages/&quot;&gt;create slugs for pages&lt;/a&gt; automatically.&lt;/p&gt;
&lt;p&gt;This depends on &lt;code&gt;gatsby-source-filesystem&lt;/code&gt;, so you&apos;ll need to install that first. Then, add the following code to &lt;code&gt;gatsby-node.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const { createFilePath } = require(`gatsby-source-filesystem`);

exports.onCreateNode = ({ node, getNode, actions }) =&gt; {
    const { createNodeField } = actions;
    if (node.internal.type === `MarkdownRemark`) {
        const slug = createFilePath({ node, getNode, basePath: `pages` });
        createNodeField({
            node,
            name: `slug`,
            value: slug
        });
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when we query Gastby for our pages, we&apos;ll be able to get the slug and provide that to our Algolia search index.&lt;/p&gt;
&lt;h3&gt;Populating Our Indices&lt;/h3&gt;
&lt;p&gt;Let&apos;s create the queries that will populate our indices on Algolia. It&apos;s important to note that your query depends on the data you have in your content and how you store your content. The best way to create and test your GraphQL queries to be sure you will populate your indices correctly is to use GraphiQL, which is running locally whenever you run &lt;code&gt;gatsby develop&lt;/code&gt; generally at &lt;code&gt;http://localhost:8000/___graphql&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In my case, my Stackbit site has both pages and posts that have differing frontmatter properties. For this example, we&apos;ll be creating a blog search so I created an index that is specific to the blog calles &lt;code&gt;Posts&lt;/code&gt;. Feel free to customize your query to create indices for whatever content you wish to make searchable.&lt;/p&gt;
&lt;p&gt;Place the query in a &lt;code&gt;/src/utils/algolia.js&lt;/code&gt; file like the one below (recall that we referenced this file in our &lt;code&gt;gatsby-config.js&lt;/code&gt; file above). Note that the excerpts for the content are truncated to prevent going over the character limit for individual Algolia records.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const postQuery = `{
    posts: allMarkdownRemark(
        filter: { fileAbsolutePath: { regex: &quot;/posts/&quot; } }
    ) {
        edges {
            node {
                objectID: id
                frontmatter {
                    title
                    date(formatString: &quot;MMM D, YYYY&quot;)
                    subtitle
                    description: excerpt
                    thumb_image
                }
                fields {
                    slug
                }
                excerpt(pruneLength: 5000)
            }
        }
    }
}`;

const flatten = (arr) =&gt;
    arr.map(({ node: { frontmatter, ...rest } }) =&gt; ({
        ...frontmatter,
        ...rest
    }));
const settings = { attributesToSnippet: [`excerpt:20`] };

const queries = [
    {
        query: postQuery,
        transformer: ({ data }) =&gt; flatten(data.posts.edges),
        indexName: `Posts`,
        settings
    }
];

module.exports = queries;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the queries in place, our indices on Algolia will update whenever we build our Gatsby site. To do this, run &lt;code&gt;gatsby build&lt;/code&gt; from the command line to run a production build of the site. We should see an indication that our indices have been populated from the console output.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1593607471-indices-populated-sm.png&quot; alt=&quot;console showing indices have been populated&quot;&gt;&lt;/p&gt;
&lt;p&gt;We can now see the results when going into Algolia and browsing Indices.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1593607436-algolia-indices-sm.png&quot; alt=&quot;indices populated on Algolia dashboard&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Creating the Search UI&lt;/h2&gt;
&lt;p&gt;Now that our search indices are populated, let&apos;s display some results. To do this, we&apos;re going to use &lt;a href=&quot;https://github.com/algolia/react-instantsearch&quot;&gt;React InstantSearch&lt;/a&gt;, which offers a search-as-you-type experience. It pretty much works out of the box using the &lt;a href=&quot;https://www.algolia.com/doc/guides/building-search-ui/installation/react/&quot;&gt;code they provide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let&apos;s look at the most basic implementation in action. Start by creating a new template as &lt;code&gt;/src/templates/search.js&lt;/code&gt;. This template will just wrap the example code taken almost directly from the InstantSearch page and place it in the site&apos;s UI so that we can try it out.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import React from &apos;react&apos;;
import algoliasearch from &apos;algoliasearch/lite&apos;;
import { InstantSearch, SearchBox, Hits } from &apos;react-instantsearch-dom&apos;;
import { Layout } from &apos;../components/index&apos;;

const searchClient = algoliasearch(process.env.GATSBY_ALGOLIA_APP_ID, process.env.GATSBY_ALGOLIA_SEARCH_KEY);

export default class Search extends React.Component {
    render() {
        return (
            &amp;#x3C;Layout {...this.props}&gt;
                &amp;#x3C;div className=&quot;outer&quot;&gt;
                    &amp;#x3C;div className=&quot;inner&quot;&gt;
                        &amp;#x3C;InstantSearch searchClient={searchClient} indexName=&quot;Posts&quot;&gt;
                            &amp;#x3C;SearchBox /&gt;
                            &amp;#x3C;Hits /&gt;
                        &amp;#x3C;/InstantSearch&gt;
                    &amp;#x3C;/div&gt;
                &amp;#x3C;/div&gt;
            &amp;#x3C;/Layout&gt;
        );
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We initialize the search client with the secrets that are in the &lt;code&gt;.env&lt;/code&gt; file we created earlier. Within the layout elements, we include the &lt;code&gt;InstantSearch&lt;/code&gt; element tied to our &lt;code&gt;Posts&lt;/code&gt; index in Algolia. The &lt;code&gt;SearchBox&lt;/code&gt; outputs a search input UI and &lt;code&gt;hits&lt;/code&gt; outputs the results. Next, just create a search page that will utilize this layout at &lt;code&gt;/src/pages/blog/search.md&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;---
title: Search the Blog
template: search
---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From the console run &lt;code&gt;gatsby develop&lt;/code&gt; and then navigate to the page, which is typically available at &lt;code&gt;http://localhost:8000/blog/search/&lt;/code&gt;. Here&apos;s what you should see:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/gatsby-basic-instant-search.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;Looks great! We&apos;re done!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1593607483-shipit.jpg&quot; alt=&quot;ship it squirrel&quot;&gt;&lt;/p&gt;
&lt;h3&gt;Customizing the Output&lt;/h3&gt;
&lt;p&gt;So, ok, our boss has suggested that perhaps we&apos;re not quite done yet. She doesn&apos;t think the search results are very attractive and, worse yet, they don&apos;t even lead anywhere. She has a point.&lt;/p&gt;
&lt;p&gt;What if, instead of a separate search page, we actually integrated the search into our existing blog page, allowing a user to filter the results based upon their search? Let&apos;s do that and, in doing so, learn how to customize the output of the InstantSearch &lt;code&gt;Hits&lt;/code&gt; component.&lt;/p&gt;
&lt;p&gt;Create a new component as &lt;code&gt;src/components/search.js&lt;/code&gt; using the source below. Don&apos;t worry, I&apos;ll explain what we&apos;re doing in a moment.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import React from &apos;react&apos;;
import algoliasearch from &apos;algoliasearch/lite&apos;;
import { connectHits, InstantSearch, SearchBox } from &apos;react-instantsearch-dom&apos;;
import { Link, safePrefix } from &apos;../utils&apos;;
import moment from &apos;moment-strftime&apos;;

const Hits = connectHits(({ hits }) =&gt; (
    &amp;#x3C;div&gt;
        {hits.length ? (
            &amp;#x3C;div className=&quot;post-feed&quot;&gt;
                {hits.map((hit) =&gt; {
                    return (
                        &amp;#x3C;article key={hit.objectID} className=&quot;post post-card&quot;&gt;
                            &amp;#x3C;div className=&quot;post-card-inside&quot;&gt;
                                &amp;#x3C;Link className=&quot;post-card-thumbnail&quot; to={safePrefix(hit.fields.slug)}&gt;
                                    &amp;#x3C;img className=&quot;thumbnail&quot; src={safePrefix(hit.thumb_image)} alt={hit.title} /&gt;
                                &amp;#x3C;/Link&gt;
                                &amp;#x3C;div className=&quot;post-card-content&quot;&gt;
                                    &amp;#x3C;header className=&quot;post-header&quot;&gt;
                                        &amp;#x3C;h2 className=&quot;post-title&quot;&gt;
                                            &amp;#x3C;Link to={safePrefix(hit.fields.slug)} rel=&quot;bookmark&quot;&gt;
                                                {hit.title}
                                            &amp;#x3C;/Link&gt;
                                        &amp;#x3C;/h2&gt;
                                    &amp;#x3C;/header&gt;
                                    &amp;#x3C;div className=&quot;post-excerpt&quot;&gt;
                                        &amp;#x3C;p&gt;{hit.description}&amp;#x3C;/p&gt;
                                    &amp;#x3C;/div&gt;
                                    &amp;#x3C;footer className=&quot;post-meta&quot;&gt;
                                        &amp;#x3C;time className=&quot;published&quot; dateTime={moment(hit.date).strftime(&apos;%Y-%m-%d %H:%M&apos;)}&gt;
                                            {moment(hit.date).strftime(&apos;%B %d, %Y&apos;)}
                                        &amp;#x3C;/time&gt;
                                    &amp;#x3C;/footer&gt;
                                &amp;#x3C;/div&gt;
                            &amp;#x3C;/div&gt;
                        &amp;#x3C;/article&gt;
                    );
                })}
            &amp;#x3C;/div&gt;
        ) : (
            &amp;#x3C;p&gt;There were no results for your query. Please try again.&amp;#x3C;/p&gt;
        )}
    &amp;#x3C;/div&gt;
));

export default function Search({ indexName }) {
    const searchClient = algoliasearch(process.env.GATSBY_ALGOLIA_APP_ID, process.env.GATSBY_ALGOLIA_SEARCH_KEY);
    return (
        &amp;#x3C;InstantSearch indexName={indexName} searchClient={searchClient}&gt;
            &amp;#x3C;SearchBox /&gt;
            &amp;#x3C;Hits /&gt;
        &amp;#x3C;/InstantSearch&gt;
    );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, the actual component output UI is almost identical to the prior search page, with just a &lt;code&gt;SearchBox&lt;/code&gt; and &lt;code&gt;Hits&lt;/code&gt;. However, prior to that, we are overriding the default output behavior of &lt;code&gt;Hits&lt;/code&gt;. If the results return any records, we loop through them, outputting cards identical to the existing blog list on &lt;code&gt;src/templates/blog.js&lt;/code&gt;, using the &lt;code&gt;hit&lt;/code&gt; (i.e. search result) values to populate the output. If there are no results, we just display some text informing the user.&lt;/p&gt;
&lt;p&gt;Now let&apos;s add it to our blog. Keep in mind that the output of the search results are identical to the regular blog list output and we are using the search without &lt;a href=&quot;https://www.algolia.com/doc/guides/building-search-ui/going-further/conditional-display/react/#handling-the-empty-query&quot;&gt;conditionally handling an empty query&lt;/a&gt; - this means it will always display posts even if the user has not searched yet. Thus, we can actually replace the regular page output with the search results as in the updated source for &lt;code&gt;src/templates/blog.js&lt;/code&gt; below:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import React from &apos;react&apos;;
import _ from &apos;lodash&apos;;
import Search from &apos;../components/Search&apos;;

import { Layout } from &apos;../components/index&apos;;
import { getPages } from &apos;../utils&apos;;

export default class Blog extends React.Component {
    render() {
        let display_posts = _.orderBy(getPages(this.props.pageContext.pages, &apos;/posts&apos;), &apos;frontmatter.date&apos;, &apos;desc&apos;);
        return (
            &amp;#x3C;Layout {...this.props}&gt;
                &amp;#x3C;div className=&quot;outer&quot;&gt;
                    &amp;#x3C;div className=&quot;inner&quot;&gt;
                        &amp;#x3C;Search indexName=&quot;Posts&quot;&gt;&amp;#x3C;/Search&gt;
                    &amp;#x3C;/div&gt;
                &amp;#x3C;/div&gt;
            &amp;#x3C;/Layout&gt;
        );
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The result works as shown below.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/gatsby-finished-search.png&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Where to Go From Here&lt;/h2&gt;
&lt;p&gt;There&apos;s one more step that I should mention. We need to ensure that the environment variables we created are available when we deploy. On Netlify, all we need to do is go to Settings &gt; Build &amp;#x26; Deploy &gt; Environment and add the necessary variables defined in our &lt;code&gt;.env&lt;/code&gt; file to our deployment settings.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1593607459-env-variables-sm.png&quot; alt=&quot;Netlify environment variables&quot;&gt;&lt;/p&gt;
&lt;p&gt;We&apos;re all set!&lt;/p&gt;
&lt;p&gt;Obviously, this is just one way to implement the search. The &lt;a href=&quot;https://www.gatsbyjs.org/docs/adding-search-with-algolia/&quot;&gt;Gatsby documentation&lt;/a&gt; offers a similar but probably more flexible implementation. The &lt;a href=&quot;https://www.algolia.com/doc/api-reference/widgets/instantsearch/react/&quot;&gt;InstantSearch&lt;/a&gt; documentation also offers a ton of API and customization details with code samples to help you make the tools fit the needs of your specific site. In the end, implementing a search seems like a complicated task, but, thankfully, the tools and libraries available to us do a lot of the heavy lifting, making our jobs much easier.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Getting Started with Next.js for Jamstack Development]]></title><description><![CDATA[Next.js is an increasingly popular solution for creating Jamstack sites using JavaScript and React. In this post we explore how to build your first Jamstack site using Next.js that connects to a headless CMS for content using the Sourcebit open source project.]]></description><link>https://www.stackbit.com/blog/getting-started-nextjs-sourcebit/</link><guid isPermaLink="false">https://www.stackbit.com/blog/getting-started-nextjs-sourcebit/</guid><pubDate>Tue, 23 Jun 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;There&apos;s been a lot of well-deserved buzz around Next.js lately - with two major consecutive releases in &lt;a href=&quot;https://nextjs.org/blog/next-9-3&quot;&gt;9.3&lt;/a&gt; and then &lt;a href=&quot;https://nextjs.org/blog/next-9-4&quot;&gt;9.4&lt;/a&gt; bringing tons of new functionality to the framework. Jamstack developers have been excited by a ton of new features that support Next.js for Jamstack sites including new data-fetching methods and incremental static regeneration. In this post, I want to give an introduction to Next.js for Jamstack development and explore how you can leverage it with &lt;a href=&quot;https://github.com/stackbithq/sourcebit&quot;&gt;Sourcebit&lt;/a&gt; to build CMS-driven Jamstack apps.&lt;/p&gt;
&lt;h2&gt;What is Next.js?&lt;/h2&gt;
&lt;p&gt;Next.js is a very popular React-based framework for building single-page applications (SPAs). It has gained a great deal of popularity in large part because it simplifies a number of aspects of developing full-stack React applications. For example, routes are handled automatically with zero configuration. However, your Next.js also handles all of the server-side rendering of the page, meaning you can use a single framework for both the frontend and backend of your application.&lt;/p&gt;
&lt;h3&gt;What Makes Next.js Different?&lt;/h3&gt;
&lt;p&gt;Next.js is also a static site generator (SSG), but it differs from tools like Hugo, Jekyll or even Gatsby in that generating static assets is not its only purpose. You can build an SPA with server-side rendering (SSR) using Next.js and then decide to static export all or &lt;em&gt;even just part of your app&lt;/em&gt;. That&apos;s a key distinction because, when choosing most other SSGs, you are committing to going fully static right out of the gate.&lt;/p&gt;
&lt;p&gt;This can also present some mental hurdles for someone (like me) coming to Next.js after working primarily with more traditional SSGs like Hugo or Jekyll. Not only did it force me to grok a lot of React (which I&apos;ve admittedly had limited experience with in the past) but it also somewhat upends the way I&apos;ve traditionally thought of Jamstack, by challenging the static versus dynamic assets dichotomy.&lt;/p&gt;
&lt;h2&gt;The Sample App&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/images/1592918919-finished-project-sm.png&quot; alt=&quot;The completed sample app&quot;&gt;&lt;/p&gt;
&lt;p&gt;For this tutorial, I decided to take a prior example written using Hugo and instead build it using Next.js. The site is a fan page for the video game &lt;a href=&quot;https://controlgame.com/&quot;&gt;Control&lt;/a&gt; (great game, highly recommend it). The site itself is fairly simple, made up of posts that talk about the game and an about page. You can view the live demo at &lt;a href=&quot;https://control-next.netlify.app/&quot;&gt;https://control-next.netlify.app/&lt;/a&gt;. You can also view the project repository at &lt;a href=&quot;https://github.com/remotesynth/control-next&quot;&gt;https://github.com/remotesynth/control-next&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Contentful and Sourcebit&lt;/h3&gt;
&lt;p&gt;Behind the scenes, the content actually comes from Contentful. In order to integrate Contentful with Next.js, I chose to use &lt;a href=&quot;https://github.com/stackbithq/sourcebit&quot;&gt;Sourcebit&lt;/a&gt;, an open source project that can connect data sources (like Contentful, Sanity and Kentico Kontent) with static site generators (like Hugo, Jekyll and, of course, Next.js). While it is possible to use Next.js directly with the Contentful API (see the &lt;a href=&quot;https://github.com/zeit/next.js/tree/canary/examples/cms-contentful&quot;&gt;official sample Contentful app&lt;/a&gt; from Next.js here), Sourcebit offers functionality that makes this integration even easier.&lt;/p&gt;
&lt;p&gt;We&apos;ll cover using Sourcebit with Next.js here, but you can also view the original tutorial (with the Hugo demo) &lt;a href=&quot;https://www.stackbit.com/blog/data-driven-jamstack-sourcebit/&quot;&gt;here&lt;/a&gt;. In addition, Sourcebit is entirely extensible, and you can learn &lt;a href=&quot;https://www.stackbit.com/blog/sourcebit-plugin/&quot;&gt;how to build a Sourcebit plugin&lt;/a&gt; to support your favorite headless CMS or static site generator.&lt;/p&gt;
&lt;p&gt;Please note that the example code shown throughout the article below are simplified versions of the actual code for the purposes of making them easier to understand.&lt;/p&gt;
&lt;h3&gt;Challenges&lt;/h3&gt;
&lt;p&gt;Converting an existing project (in my case from Hugo to Next.js) rather than starting from scratch did present some challenges. The site was not originally built using a &quot;React mindset&quot;. While this largely meant making small changes to convert the HTML to be React components , there were also some small visual elements that relied upon DOM manipulation that happened on window load. These required some refactoring to get them to work properly using the &lt;a href=&quot;https://reactjs.org/docs/react-component.html#componentdidmount&quot;&gt;&lt;code&gt;componentDidMount()&lt;/code&gt;&lt;/a&gt;. While I&apos;m not sure my solution is what you might consider React best practice, it worked and this wasn&apos;t something I&apos;d consider core to the site&apos;s functionality.&lt;/p&gt;
&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;The easiest way to get started with Next.js is to run the following command in the console/terminal:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm init next-app
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will only ask a couple questions such as the project name and template. I chose to use the default starter template, but there are also currently a ton of &lt;a href=&quot;https://github.com/zeit/next.js/tree/canary/examples/&quot;&gt;examples from the Next.js example repo&lt;/a&gt; that you can also choose to start with.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1592918922-init-next-sm.png&quot; alt=&quot;initializing a Next.js application&quot;&gt;&lt;/p&gt;
&lt;p&gt;The default starter doesn&apos;t include too much boilerplate. Let&apos;s look at what&apos;s there:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;pages&lt;/code&gt; directory is a critical part in any Next.js application. One of the benefits of using Next.js is that it will automatically create a route for any &lt;a href=&quot;https://nextjs.org/docs/basic-features/pages&quot;&gt;pages&lt;/a&gt; (which in the Next.js are React components) contained within this directory. If, for example, I were to create a &lt;code&gt;foo.js&lt;/code&gt; file in this directory, then I could navigate to it via the &lt;code&gt;/foo&lt;/code&gt; route (i.e. &lt;code&gt;http://localhost:3000/foo&lt;/code&gt; if you are testing locally). Pages can also handle dynamic routes, which we&apos;ll get into later.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;public&lt;/code&gt; directory is where you can place static assets that you want to be able to serve and access via your site. These may be things like images, PDF files, downloads, or even CSS or JavaScript files you want included. For instance, any images under &lt;code&gt;/public/images&lt;/code&gt; will be accessible to your site as just &lt;code&gt;/images&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now I can run either &lt;code&gt;npm run dev&lt;/code&gt; or &lt;code&gt;yarn dev&lt;/code&gt; to start the local development server and go to &lt;code&gt;localhost:3000&lt;/code&gt; where you should see the Next.js default boilerplate page.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1592918935-next-boilerplate-home-sm.png&quot; alt=&quot;Next.js boilerplate home page&quot;&gt;&lt;/p&gt;
&lt;p&gt;Note that from here on out I use npm instead of Yarn as the libraries related to Sourcebit are automatically installed using npm during the configuration process.&lt;/p&gt;
&lt;h2&gt;Loading Local Data&lt;/h2&gt;
&lt;p&gt;It&apos;s pretty common for a Jamstack site to store some portions of site data in a JSON or YAML file. A common use of this is often the site configuration file containing things like the site title, description and so on. For example, my site has a &lt;code&gt;/data/config.json&lt;/code&gt; file that looks like this (note that Next.js has no opinion on where you should store any data files):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &quot;title&quot;: &quot;Control&quot;,
    &quot;tagline&quot;: &quot;Discover an unknown world.&quot;,
    &quot;logo&quot;: &quot;/images/logo.png&quot;,
    &quot;bgimage&quot;: &quot;/images/header-bg.jpg&quot;,
    &quot;footerContent&quot;: &quot;Content courtesy of the [Control Wiki](https://control.fandom.com/wiki/Control_Wiki).&quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To simplify the example, I&apos;m going to create a simple home page in &lt;code&gt;/pages/index.js&lt;/code&gt; without any of the site&apos;s design:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import Head from &apos;next/head&apos;;

export default function Home() {
    return (
        &amp;#x3C;div&gt;
            &amp;#x3C;Head&gt;
                &amp;#x3C;title&gt;Create Next App&amp;#x3C;/title&gt;
                &amp;#x3C;link rel=&quot;icon&quot; href=&quot;/favicon.ico&quot; /&gt;
            &amp;#x3C;/Head&gt;

            &amp;#x3C;h1&gt;Hello World&amp;#x3C;/h1&gt;
            &amp;#x3C;p&gt;This is my home page&amp;#x3C;/p&gt;
        &amp;#x3C;/div&gt;
    );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since this is just a local JSON file, I&apos;ll just import it at the top of the page:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import configData from &apos;../../data/config.json&apos;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we need to make that data available to the site. Recall that Next.js handles both pages loaded via SSR and pages loaded as static. Data that needs to be accessible to a statically generated page is loaded via a special method called &lt;code&gt;getStaticProps()&lt;/code&gt;. This method was added to Next.js as of version 9.3. I&apos;ll add that method to the home page and load in the config file shown above.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export async function getStaticProps() {
  return {
    props: {
      configData
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now I need to modify the &lt;code&gt;Home&lt;/code&gt; component to receive the data from this method and then display it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export default function Home(props) {
    const config = props.configData;
    return (
        &amp;#x3C;div&gt;
            &amp;#x3C;Head&gt;
                &amp;#x3C;title&gt;{config.title}&amp;#x3C;/title&gt;
                &amp;#x3C;link rel=&quot;icon&quot; href=&quot;/favicon.ico&quot; /&gt;
            &amp;#x3C;/Head&gt;

            &amp;#x3C;h1&gt;{config.title}&amp;#x3C;/h1&gt;
            &amp;#x3C;p&gt;{config.tagline}&amp;#x3C;/p&gt;
        &amp;#x3C;/div&gt;
    );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, I set &lt;code&gt;Home()&lt;/code&gt; to receive the &lt;code&gt;props&lt;/code&gt; object and then assign the &lt;code&gt;configData&lt;/code&gt; I loaded into a value called &lt;code&gt;config&lt;/code&gt; (this latter part isn&apos;t required but I find it a useful for convenience of referencing the value). Finally, I output the values from the config data on the page as &lt;code&gt;{config.title}&lt;/code&gt; or &lt;code&gt;{config.tagline}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It is worth noting, as we move on to talk about components, that the &lt;code&gt;getStaticProps()&lt;/code&gt; exists only on pages and is not available on components.&lt;/p&gt;
&lt;h2&gt;Building Components&lt;/h2&gt;
&lt;p&gt;While you can build the site by creating pages in the &lt;code&gt;/pages&lt;/code&gt; directory, this would become unmaintainable very quickly as many aspects of each page will be reused. For a simple site like the sample app, this may only be a few components like the layout, header and footer. Next.js has no opinion about where you put your components, but generally developers choose to use a &lt;code&gt;/components&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;To demonstrate an example, let&apos;s look at creating a Layout component that will handle all the common layout elements across the site. This is going to be a very simplified version of the project&apos;s &lt;a href=&quot;https://github.com/remotesynth/control-next/blob/master/components/Layout.js&quot;&gt;full layout component&lt;/a&gt;. To begin, we&apos;ll create a &lt;code&gt;/components/Layout.js&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This layout will take the very basic layout that already existed in &lt;code&gt;index.js&lt;/code&gt; above but abstract it so that it is available to add to any page.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import Head from &apos;next/head&apos;;

export default function Layout({ children }) {
    return (
        &amp;#x3C;div&gt;
            &amp;#x3C;Head&gt;
                &amp;#x3C;title&gt;Control&amp;#x3C;/title&gt;
                &amp;#x3C;link rel=&quot;icon&quot; href=&quot;/favicon.ico&quot; /&gt;
            &amp;#x3C;/Head&gt;
            &amp;#x3C;h1&gt;Control&amp;#x3C;/h1&gt;
            &amp;#x3C;h2&gt;Discover an unknown world.&amp;#x3C;/h2&gt;
            {children}
        &amp;#x3C;/div&gt;
    );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The key thing to notice in the component is the inclusion of &lt;code&gt;children&lt;/code&gt;, which will output any child elements contained by the component. I can now modify &lt;code&gt;index.js&lt;/code&gt; to use the component.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import Layout from &apos;../components/Layout&apos;;
import configData from &apos;../../data/config.json&apos;;

export default function Home(props) {
    const config = props.configData;
    return (
        &amp;#x3C;Layout&gt;
            &amp;#x3C;p&gt;This is my homepage&amp;#x3C;/p&gt;
        &amp;#x3C;/Layout&gt;
    );
}

export async function getStaticProps() {
    return {
        props: {
            configData
        }
    };
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First, import the component and then replace the existing layout elements with &lt;code&gt;&amp;#x3C;Layout&gt;&lt;/code&gt;. The paragraph element inside &lt;code&gt;&amp;#x3C;Layout&gt;&lt;/code&gt; will be what is output using &lt;code&gt;children&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There&apos;s one problem here, however. The layout is no longer leveraging the configuration data that I set up. As mentioned, &lt;code&gt;getStaticProps()&lt;/code&gt; cannot be called from within a component. Instead, it needs to be passed in to give the component access to it. First, in &lt;code&gt;index.js&lt;/code&gt; it is passed down.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export default function Home(props) {
    const config = props.configData;
    return (
        &amp;#x3C;Layout config={config}&gt;
            &amp;#x3C;p&gt;This is my homepage&amp;#x3C;/p&gt;
        &amp;#x3C;/Layout&gt;
    );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then in &lt;code&gt;Layout.js&lt;/code&gt; it is used.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export default function Layout({ children, config }) {
    return (
        &amp;#x3C;div&gt;
            &amp;#x3C;Head&gt;
                &amp;#x3C;title&gt;{config.title}&amp;#x3C;/title&gt;
                &amp;#x3C;link rel=&quot;icon&quot; href=&quot;/favicon.ico&quot; /&gt;
            &amp;#x3C;/Head&gt;
            &amp;#x3C;h1&gt;{config.title}&amp;#x3C;/h1&gt;
            &amp;#x3C;h2&gt;{config.tagline}&amp;#x3C;/h2&gt;
            {children}
        &amp;#x3C;/div&gt;
    );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Connecting to a CMS&lt;/h2&gt;
&lt;p&gt;The sample site content comes from a pre-existing headless CMS instance on Contentful. Of course, Next.js makes it relatively painless to connect to APIs, but I used an open source tool called &lt;a href=&quot;https://github.com/stackbithq/sourcebit&quot;&gt;Sourcebit&lt;/a&gt; that makes it even easier. The best part is Sourcebit already has &lt;a href=&quot;https://github.com/stackbithq/sourcebit-target-next&quot;&gt;Next.js integration&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Configuring Sourcebit for Next.js&lt;/h3&gt;
&lt;p&gt;The first step is to configure Sourcebit. Thankfully, the tool uses an interactive configuration process so that I don&apos;t need to manually create or edit any configuration. To begin the interactive configuration process, enter:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npx create-sourcebit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following video shows the setup process for configuring Sourcebit for Contentful and Next.js using my existing Contentful space (which has a simple content model with only two content types). Note that I am also configuring Sourcebit to pull any assets associated with the content locally into the &lt;code&gt;/public/images&lt;/code&gt; folder.&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/Uqp9-WYiINI&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;Once connecting to my Contentful account, I choose the space and the content types within that space that represent pages. I have set the route for the about page to &lt;code&gt;/{slug}&lt;/code&gt; meaning that &lt;code&gt;/about&lt;/code&gt; will match. However, blog posts are set to match a pattern of &lt;code&gt;/posts/{slug}&lt;/code&gt;. In both cases, the title of the post is what will generate the slug.&lt;/p&gt;
&lt;h3&gt;Getting Headless CMS Data from Sourcebit for Next.js&lt;/h3&gt;
&lt;p&gt;Now that Sourcebit is configured, I can use it within my Next.js project. The first step is to create a &lt;code&gt;next.config.js&lt;/code&gt; configuration file if there isn&apos;t one already. I&apos;ll require Sourcebit and call the &lt;code&gt;fetch()&lt;/code&gt; method in this file so that Sourcebit will pull the data and images from Contentful whenever the site loads.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const sourcebit = require(&apos;sourcebit&apos;);
const sourcebitConfig = require(&apos;./sourcebit.js&apos;);
sourcebit.fetch(sourcebitConfig);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To use the Sourcebit CMS content in a page, I leverage the &lt;code&gt;sourcebitDataClient&lt;/code&gt; that it provides. For example, let&apos;s look at a simplified version of &lt;code&gt;/posts/[slug].js&lt;/code&gt;. The &lt;code&gt;[slug].js&lt;/code&gt; filename indicates that this is a dynamic route in Next.js. In this case, this is the page that will match the &lt;code&gt;/posts/{slug}&lt;/code&gt; pattern we defined when configuring Sourcebit above. Note that I am leveraging &lt;a href=&quot;https://github.com/rexxars/react-markdown&quot;&gt;react-markdown&lt;/a&gt; to render the Markdown body content as React components.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import Layout from &apos;../../components/Layout&apos;;
import { sourcebitDataClient } from &apos;sourcebit-target-next&apos;;
import ReactMarkdown from &apos;react-markdown&apos;;
import configData from &apos;../../data/config.json&apos;;

export default function Post(props) {
    const config = props.configData;
    const page = props.page;
    return (
        &amp;#x3C;Layout config={config}&gt;
            &amp;#x3C;h1&gt;{page.page.title}&amp;#x3C;/h1&gt;
            &amp;#x3C;ReactMarkdown source={page.page.body} /&gt;
        &amp;#x3C;/Layout&gt;
    );
}

export async function getStaticPaths() {
    const paths = await sourcebitDataClient.getStaticPaths();
    return {
        paths: paths.filter((path) =&gt; path.startsWith(&apos;/posts/&apos;)),
        fallback: false
    };
}

export async function getStaticProps({ params }) {
    const configData = await import(`../../data/config.json`);
    const pagePath = &apos;/posts/&apos; + params.slug;
    const page = await sourcebitDataClient.getStaticPropsForPageAtPath(pagePath);

    return {
        props: {
            configData,
            page
        }
    };
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&apos;s look at &lt;code&gt;getStaticPaths()&lt;/code&gt; first. Next.js uses this method to define all of the dynamic paths that need to be exported as static pages. Sourcebit also provides a method called &lt;code&gt;getStaticPaths()&lt;/code&gt; that returns all the paths within the site content pulled from the CMS. In this example, I am filtering the list for this specific dynamic route to provide all the paths to blog posts.&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;getStaticProps()&lt;/code&gt; method, I am still getting the site configuration as discussed earlier in this article. I am also determining the page path by pulling the slug variable Next.js provides. Since this dynamic route is defined as &lt;code&gt;/pages/posts/[slug].js&lt;/code&gt; the slug variable that I defined will be populated with anything after &lt;code&gt;/posts/&lt;/code&gt; in the URL. For example, for a URL that went to the path &lt;code&gt;/posts/federal-bureau-of-control&lt;/code&gt; (which is one of the posts in this example), the slug would be &lt;code&gt;federal-bureau-of-control&lt;/code&gt;. We use the full directory and path to get all the page data from Sourcebit using &lt;code&gt;getStaticPropsForPageAtPath()&lt;/code&gt;. This data is passed to the page via props and then displayed.&lt;/p&gt;
&lt;p&gt;When starting my local server using &lt;code&gt;npm run dev&lt;/code&gt;, I can see the posts and assets that are pulled from Contentful by Sourcebit.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1592918925-loading-sourcebit-sm.png&quot; alt=&quot;loading Next.js with Sourcebit&quot;&gt;&lt;/p&gt;
&lt;p&gt;If I load the URL locally via &lt;code&gt;http://localhost:3000/posts/federal-bureau-of-control&lt;/code&gt;, I will see the post contents including the image, which uses the locally downloaded asset.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1592918939-post-page-sm.png&quot; alt=&quot;displaying a post&quot;&gt;&lt;/p&gt;
&lt;p&gt;This is the finished page on the sample site with the complete design and assets being loaded.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1592918912-finished-post-sm.png&quot; alt=&quot;fully designed posts page&quot;&gt;&lt;/p&gt;
&lt;p&gt;One key difference you may notice between the &lt;a href=&quot;https://github.com/remotesynth/control-next/blob/master/pages/posts/%5Bslug%5D.js&quot;&gt;finished code for this page&lt;/a&gt; and the sample code presented here is that in the finished project I am using &lt;code&gt;getData()&lt;/code&gt; rather than &lt;code&gt;getStaticPropsForPageAtPath()&lt;/code&gt;. The reason for this is that populating my navigation requires information about other pages in the CMS. Rather than make two separate calls to Sourcebit, I use one call and then filter the content based upon the path. For comparison&apos;s sake, here is the &lt;code&gt;getStaticProps()&lt;/code&gt; method from the finished site:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export async function getStaticProps({ params }) {
    const sb = await sourcebitDataClient.getData();
    const pagePath = &apos;/posts/&apos; + params.slug;
    const page = sb.pages.filter((page) =&gt; page.path == pagePath)[0];
    const pages = sb.pages.filter((page) =&gt; page.path !== &apos;/&apos; &amp;#x26;&amp;#x26; !page.path.startsWith(&apos;/posts/&apos;));

    return {
        props: {
            configData,
            page,
            pages
        }
    };
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Deploying the Site&lt;/h2&gt;
&lt;p&gt;Running &lt;code&gt;npm run export&lt;/code&gt; on the Next.js site will export everything you need to the &lt;code&gt;/out&lt;/code&gt; folder. However, it&apos;s also easy to deploy on Jamstack-focused, continuous deployment solutions like Netlify. Let&apos;s take a quick look at how to do that.&lt;/p&gt;
&lt;p&gt;Once connected to the GitHub repository for the site, the build command should be set to &lt;code&gt;npm run export&lt;/code&gt; while the publish directory set to &lt;code&gt;/out&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1592918927-netlify-build-settings-sm.png&quot; alt=&quot;Netlify&amp;#x27;s build settings&quot;&gt;&lt;/p&gt;
&lt;p&gt;Sourcebit stores environment variables in a &lt;code&gt;.env&lt;/code&gt; file that is loaded when the site starts up. This is how it knows the Contentful access token that has been configured. This &lt;code&gt;.env&lt;/code&gt; file should be added to your &lt;code&gt;.gitignore&lt;/code&gt; so that it is not committed to a source repository. Thus, your Netlify build does not have access to it. Instead, set an environment variable within the Netlify dashboard for &lt;code&gt;CONTENTFUL_ACCESS_TOKEN&lt;/code&gt; with the proper value.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1592918931-netlify-env-variables-sm.png&quot; alt=&quot;Netlify environment variables&quot;&gt;&lt;/p&gt;
&lt;p&gt;With that configured, Sourcebit will pull the latest content and assets from Contentful every time your site rebuilds on Netlify. You can see my finished, deployed site on Netlify at &lt;a href=&quot;https://control-next.netlify.app/&quot;&gt;https://control-next.netlify.app/&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Where to Go Next&lt;/h2&gt;
&lt;p&gt;See what I did there? 😉 I&apos;ve only scratched the surface of building an application with Next.js, but hopefully I have piqued your curiosity to give it a try (and try Sourcebit as well). Be sure to check out the full source code of the example site at &lt;a href=&quot;https://github.com/remotesynth/control-next&quot;&gt;https://github.com/remotesynth/control-next&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you&apos;d like to explore further, I&apos;ll leave you with a bunch of worthy resources to explore:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://nextjs.org/learn/basics/getting-started&quot;&gt;Official Next.js getting started guide&lt;/a&gt; - This is an well done, step by step tutorial that will guide you through the ins and outs of Next.js, including SSR as well as static generation.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.netlify.com/blog/2020/05/04/building-a-markdown-blog-with-next-9.3-and-netlify/&quot;&gt;Building a Markdown blog with Next 9.3 and Netlify&lt;/a&gt; - Next.js 9.3 brought some big improvements to the framework, especially around generating Jamstack sites, and this tutorial walks through building a blog using traditional file-based Markdown.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.contentful.com/blog/2018/05/09/building-portfolio-website-contentful-nextjs-netlify/&quot;&gt;Building a portfolio site with Contentful, Next.js and Netlify&lt;/a&gt; - While Sourcebit makes the process easier in my opinion, this tutorial will help you if you want to directly call Contentful APIs.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.sanity.io/blog/build-your-own-blog-with-sanity-and-next-js&quot;&gt;Make a blog with Next.js, React and Sanity&lt;/a&gt; - Sourcebit also has a plugin that supports Sanity, but this tutorial uses the Sanity API and SSR deployed to Now (note that it uses an earlier version of Next.js)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.maximeheckel.com/posts/data-fetching-with-next-js&quot;&gt;Data Fetching with NextJS: What I learned&lt;/a&gt; - A good overview of the data fetching methods in Next.js as of 9.3.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[4 Tips to Improve Your Stackbit Gatsby Site]]></title><description><![CDATA[Step-by-step instructions for adding a favicon, analytics, social sharing meta tags and a site map to your Gatsby site created using the Stackbit site builder.]]></description><link>https://www.stackbit.com/blog/stackbit-gatsby-site-improvements/</link><guid isPermaLink="false">https://www.stackbit.com/blog/stackbit-gatsby-site-improvements/</guid><pubDate>Thu, 18 Jun 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Stackbit makes it incredibly easy to build and deploy a new Gatsby site without ever touching a line of code. Between clicking &quot;create project&quot; in the Stackbit dashboard until live editing my Gatsby site, takes only around a minute. Since the generated code is in your own GitHub repository, you are free to edit it to your heart&apos;s content.&lt;/p&gt;
&lt;p&gt;If you are relatively new to Gatsby, perhaps you&apos;re wondering about how to make some simple improvements to your site.&lt;/p&gt;
&lt;p&gt;Things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adding a favicon&lt;/li&gt;
&lt;li&gt;Adding Google Analytics or other analytics scripts&lt;/li&gt;
&lt;li&gt;Adding social cards to enhance social media sharing&lt;/li&gt;
&lt;li&gt;Creating a sitemap to submit to search engines.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this post, we&apos;ll cover step by step how to do each of these things.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: the examples below were all tested on the Azimuth theme within Stackbit. Other themes use a common structure so in most cases the code and files should largely be the same.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Add a favicon&lt;/h2&gt;
&lt;p&gt;A favicon is a small icon that will display typically in the tab next to the site&apos;s name within the browser, next to the bookmark if the page is bookmarked or on the shortcut if a user saves a shortcut to the site to the desktop of a mobile device. In order to create a favicon, it is best to have multiple versions of the image to match the various sizes needed on differing devices. There are sites that will help you create these such as &lt;a href=&quot;https://favicon.io&quot;&gt;favicon.io&lt;/a&gt;. Let&apos;s walk through the steps.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Start by uploading your image to favicon.io at &lt;a href=&quot;https://favicon.io/favicon-converter/&quot;&gt;https://favicon.io/favicon-converter/&lt;/a&gt;. This will automatically create the sizes you need. Click the &quot;Download&quot; button to download a zip file with all the images.&lt;/li&gt;
&lt;li&gt;Extract the images from the zip and place them in you site at &lt;code&gt;/static/images/favicon&lt;/code&gt;. In Gatsby, anything in the static folder will be made accessible to your site as assets. You do not need the &lt;code&gt;/static&lt;/code&gt; portion of the path when accessing them within your site.&lt;/li&gt;
&lt;li&gt;Open &lt;code&gt;/src/components/Layout.js&lt;/code&gt; in your project and place the following HTML within the &lt;code&gt;&amp;#x3C;Helmet&gt;&lt;/code&gt; block, for instance, after the CSS stylesheet link.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;#x3C;link rel=&quot;stylesheet&quot; href={safePrefix(&apos;assets/css/main.css&apos;)}/&gt;
&amp;#x3C;link rel=&quot;apple-touch-icon&quot; sizes=&quot;180x180&quot; href=&quot;/images/favicon/apple-touch-icon.png&quot;/&gt;
&amp;#x3C;link rel=&quot;icon&quot; type=&quot;image/png&quot; sizes=&quot;32x32&quot; href=&quot;/images/favicon/favicon-32x32.png&quot;/&gt;
&amp;#x3C;link rel=&quot;icon&quot; type=&quot;image/png&quot; sizes=&quot;16x16&quot; href=&quot;/images/favicon/favicon-16x16.png&quot;/&gt;
&amp;#x3C;link rel=&quot;manifest&quot; href=&quot;/images/favicon/site.webmanifest&quot;&gt;&amp;#x3C;/link&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;We&apos;ll need to update the location of the images within the provided &lt;code&gt;/images/favicon/site.webmanifest&lt;/code&gt; file. Open that file and replace the JSON with the follow code (note that you can change &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;short_name&lt;/code&gt; to whatever suits your project):&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;{
  &quot;name&quot;: &quot;Azimuth&quot;,
  &quot;short_name&quot;: &quot;Azimuth&quot;,
  &quot;icons&quot;: [{
    &quot;src&quot;: &quot;/images/favicon/android-chrome-192x192.png&quot;,
    &quot;sizes&quot;: &quot;192x192&quot;,
    &quot;type&quot;: &quot;image/png&quot;
  }, {
    &quot;src&quot;: &quot;/images/favicon/android-chrome-512x512.png&quot;,
    &quot;sizes&quot;: &quot;512x512&quot;,
    &quot;type&quot;: &quot;image/png&quot;
  }],
  &quot;theme_color&quot;: &quot;#ffffff&quot;,
  &quot;background_color&quot;: &quot;#ffffff&quot;,
  &quot;display&quot;: &quot;standalone&quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when you run &lt;code&gt;gatsby develop&lt;/code&gt; from the command-line/terminal, you should see an icon like in the example below.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1592484603-favicon.png&quot; alt=&quot;a favicon in Chrome&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Adding Google Analytics&lt;/h2&gt;
&lt;p&gt;Adding the Google Analytics (or any analytics script really) to a Stackbit site - Gatsby or not - is easy and doesn&apos;t require that you edit any code at all. Instead, we&apos;ll use a feature in Netlify called &lt;a href=&quot;https://docs.netlify.com/site-deploys/post-processing/snippet-injection/&quot;&gt;snippet injection&lt;/a&gt;. Here are the steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Get the Google Analytics code for your site from Google&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1592484639-google-analytics-code.png&quot; alt=&quot;Getting the Google Analytics code&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In your site&apos;s Netlify dashboard, go to Settings &gt; Build &amp;#x26; Deploy &gt; Post Processing and click the &quot;Add Snippet&quot; button.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1592484670-netlify-snippet-injection.png&quot; alt=&quot;Netlify snippet inject&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Choose &quot;before &lt;code&gt;&amp;#x3C;/head&gt;&lt;/code&gt;&quot;, which is where Google suggests you place analytics code and then paste your analytics snippet into the provided text box. Hit save.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1592484695-netlify-snippet-injection2.png&quot; alt=&quot;Adding analytics snippet in Netlify&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Your site will now automatically have the analytics code injected on every page.&lt;/p&gt;
&lt;h2&gt;Add Social Sharing Meta Tags&lt;/h2&gt;
&lt;p&gt;One of the ways to improve the shareability of your site is to add meta tags that improve the way your content appears when shared on social media such as Twitter and Facebook. If you don&apos;t know about these meta tags, &lt;a href=&quot;https://css-tricks.com/essential-meta-tags-social-media/&quot;&gt;this article by Adam Coti&lt;/a&gt; offers a good primer. But how do you add it to your Gatsby site created by Stackbit? Let&apos;s take a look.&lt;/p&gt;
&lt;p&gt;I should note that there is a more complete &lt;a href=&quot;https://www.gatsbyjs.org/tutorial/seo-and-social-sharing-cards-tutorial/#implementing-social-seo&quot;&gt;tutorial created by Gatsby&lt;/a&gt;, which is also worth reviewing. Some of this code is based upon their tutorial but tweaked for simplicity and to make target for certain Stackbit generated sites. We will also note that this section might not work with some themes out of the box, as it requires &lt;code&gt;author&lt;/code&gt; and &lt;code&gt;excerpt&lt;/code&gt; fields to be defined.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Open &lt;code&gt;site-metadata.json&lt;/code&gt; file and find the section with the social links and be sure to add your Twitter username to the end of the Twitter URL as below:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    ...
&quot;social_links&quot;: [
{
&quot;label&quot;: &quot;Twitter&quot;,
&quot;url&quot;: &quot;https://twitter.com/remotesynth&quot;,
&quot;new_window&quot;: true
},
{
&quot;label&quot;: &quot;Instagram&quot;,
&quot;url&quot;: &quot;https://www.instagram.com/&quot;,
&quot;new_window&quot;: true
},
{
&quot;label&quot;: &quot;LinkedIn&quot;,
&quot;url&quot;: &quot;https://www.linkedin.com/&quot;,
&quot;new_window&quot;: true
}
],
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Create a file named &lt;code&gt;SEO.js&lt;/code&gt; in the &lt;code&gt;/src/components/&lt;/code&gt; folder. This will be a reusable component that we can include on templates to output the meta tags for our site. Add the following code to &lt;code&gt;SEO.js&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import React from &apos;react&apos;;
import { Helmet } from &apos;react-helmet&apos;;

function SEO({ description, image, title, author }) {
    return (
        &amp;#x3C;Helmet
            meta={[
                {
                    property: `og:title`,
                    content: title
                },
                {
                    property: `og:description`,
                    content: description
                },
                {
                    property: `og:type`,
                    content: `website`
                },
                {
                    name: `twitter:creator`,
                    content: author
                },
                {
                    name: `twitter:title`,
                    content: title
                },
                {
                    name: `twitter:description`,
                    content: description
                },
                {
                    property: &apos;og:image&apos;,
                    content: image
                },
                {
                    name: &apos;twitter:card&apos;,
                    content: &apos;summary_large_image&apos;
                }
            ]}
        /&gt;
    );
}

export default SEO;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This component uses a plugin called &lt;a href=&quot;https://github.com/nfl/react-helmet&quot;&gt;React Helmet&lt;/a&gt; that comes pre-installed with Stackbit generated Gatsby sites. It is using the &lt;code&gt;description&lt;/code&gt;, &lt;code&gt;image&lt;/code&gt;, &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;author&lt;/code&gt; properties passed into it to populate the necessary meta tags and add them to the document &lt;code&gt;&amp;#x3C;head&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Let&apos;s add the SEO data to a template. In this case, I&apos;ll be editing the blog posts template in the Azimuth theme. To do that, open &lt;code&gt;/src/templates/post.js&lt;/code&gt;. Let&apos;s look at what the code will look like and I&apos;ll explain it after so that you can edit other themes or templates (note, I have left the main code out and replaced it with &lt;code&gt;...&lt;/code&gt; to make this easier to read):&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import React from &apos;react&apos;;
import _ from &apos;lodash&apos;;
import moment from &apos;moment-strftime&apos;;
import SEO from &apos;../components/SEO&apos;;

import { Layout } from &apos;../components/index&apos;;
import { safePrefix, htmlToReact } from &apos;../utils&apos;;

export default class Post extends React.Component {
    render() {
        let twitter = &apos;&apos;;
        if (
            _.get(this.props, &apos;pageContext.site.siteMetadata.footer.has_social&apos;) &amp;#x26;&amp;#x26;
            _.get(this.props, &apos;pageContext.site.siteMetadata.footer.social_links&apos;)
        ) {
            let social_links = _.get(this.props, &apos;pageContext.site.siteMetadata.footer.social_links&apos;);
            let twitter =
                &apos;@&apos; +
                social_links
                    .find((element) =&gt; element.label === &apos;Twitter&apos;)
                    .url.split(&apos;/&apos;)
                    .pop();
        }
        return (
            &amp;#x3C;Layout {...this.props}&gt;
                &amp;#x3C;SEO
                    title={_.get(this.props, &apos;pageContext.frontmatter.title&apos;)}
                    description={_.get(this.props, &apos;pageContext.frontmatter.excerpt&apos;)}
                    image={safePrefix(_.get(this.props, &apos;pageContext.frontmatter.image&apos;))}
                    pathname={this.props.location.pathname}
                    author={twitter}
                /&gt;
                ...
            &amp;#x3C;/Layout&gt;
        );
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First, we need to import the SEO component at the top via &lt;code&gt;import SEO from &apos;../components/SEO&apos;&lt;/code&gt;. Inside the &lt;code&gt;render()&lt;/code&gt; function, we are getting the Twitter username by splitting it out of the Twitter URL that is in the &lt;code&gt;site-metadata.json&lt;/code&gt; file. Finally, we add the &lt;code&gt;SEO&lt;/code&gt; component and pass it the necessary properties, which are loaded via &lt;a href=&quot;https://lodash.com/&quot;&gt;Lodash&lt;/a&gt; to prevent errors if the value is undefined.&lt;/p&gt;
&lt;p&gt;Now if you load a blog post on the site, you can see that the necessary SEO metadata is included in the &lt;code&gt;&amp;#x3C;head&gt;&lt;/code&gt; block. This will result in nicer formatting for shares on social media.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1592484729-social.png&quot; alt=&quot;social share meta tags&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Add a Sitemap&lt;/h2&gt;
&lt;p&gt;For our last example, we&apos;ll add a &lt;code&gt;sitemap.xml&lt;/code&gt; to the site. This is useful for submitting to search engines like Google that use this to assist in properly crawling your site. Having a sitemap is another way to improve your site SEO. In this case, we will be utilizing a Gatsby plugin called simply &lt;a href=&quot;https://www.gatsbyjs.org/packages/gatsby-plugin-sitemap/&quot;&gt;gatsby-plugin-sitemap&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open the command line/Terminal, navigate to your projects directory and install the plugin.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install --save gatsby-plugin-sitemap
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Open gatsby-config.js in your code editor. Under the &lt;code&gt;plugins&lt;/code&gt; section, add an entry for &lt;code&gt;gatsby-plugin-sitemap&lt;/code&gt; as below (note that the &lt;code&gt;...&lt;/code&gt; is where the other existing plugins listed will exist)&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;plugins: [
        `gatsby-plugin-sitemap`,
        ...
]
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Open &lt;code&gt;site-metadata.json&lt;/code&gt; and add an entry for &lt;code&gt;siteUrl&lt;/code&gt; right after the opening curly bracket (aagin, the &lt;code&gt;...&lt;/code&gt; represents the rest of the file):&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;{
    &quot;siteUrl&quot;: &quot;https://good-celery-27120.netlify.app/&quot;,
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;This plugin only runs when the site is run in production mode, so to test it, open the command-line/Terminal and use the following command to run your site:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;gatsby build &amp;#x26;&amp;#x26; gatsby serve
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Then navigate to `http://localhost:9000/sitemap.xml` to view your sitemap.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&apos;s worth noting that the gatsby-plugin-sitemap plugin is configurable. By default it includes every page on your site. Check the &lt;a href=&quot;https://www.gatsbyjs.org/packages/gatsby-plugin-sitemap/&quot;&gt;documentation&lt;/a&gt; for customization options.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[10 of the Best Gatsby Themes]]></title><description><![CDATA[Exploring some of the best options for free and open source Gatsby themes to help you get started on your next Gatsby Jamstack site.]]></description><link>https://www.stackbit.com/blog/10-best-gatsby-themes/</link><guid isPermaLink="false">https://www.stackbit.com/blog/10-best-gatsby-themes/</guid><pubDate>Mon, 15 Jun 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;One of Gatsby&apos;s strengths is in the size of its community and ecosystem of plugins. This means that there are many themes for Gatsby developers to choose from as a starting point for their new project.  I listed my 10 favorites Gatsby themes below, in order of quality based on aesthetics and features like CMS support, unique capabilities, etc.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;https://app.stackbit.com/create?theme=azimuth&amp;#x26;utm_source=blog&amp;#x26;utm_campaign=gatsbythemes&quot;&gt;Azimuth SaaS/Business by Stackbit&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://app.stackbit.com/create?theme=azimuth&amp;utm_source=blog&amp;utm_campaign=gatsbythemes&quot; class=&quot;button-component button-component-theme-accent&quot;&gt;Try Now&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://themes.stackbit.com/demos/azimuth?utm_source=blog&amp;#x26;utm_campaign=gatsbythemes&quot;&gt;&lt;img src=&quot;/images/themes/azimuth-gatsby-theme.png&quot; alt=&quot;Azimuth&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Supported CMS&lt;/strong&gt;: Sanity, Contentful, Git&lt;/p&gt;
&lt;p&gt;This is one of my favorite Stackbit templates. It&apos;s designed for a business like a SaaS service, for example, so it is fully featured and extremely versatile, packed with modules and feature options. It also looks great on mobile which is very important. To use this theme with Gatsby, head over to &lt;a href=&quot;https://app.stackbit.com/create?theme=azimuth&amp;#x26;utm_source=blog&amp;#x26;utm_campaign=gatsbythemes&quot;&gt;Stackbit&lt;/a&gt; and get started for free. From there you&apos;ll get a fully-functioning Azimuth Gatsby site in about 60 seconds, and you&apos;ll be able to easily edit it on the Stackbit Studio.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://app.stackbit.com/create?theme=azimuth&amp;utm_source=blog&amp;utm_campaign=gatsbythemes&quot; class=&quot;button-component button-component-theme-accent&quot;&gt;Create Azimuth Gatsby Site&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;&lt;a href=&quot;https://app.stackbit.com/create?theme=https://github.com/stackbit-themes/gatsby-theme-intro&amp;#x26;utm_source=blog&amp;#x26;utm_campaign=gatsbythemes&quot;&gt;Intro. by Wojciech Kocjan&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://app.stackbit.com/create?theme=https://github.com/stackbit-themes/gatsby-theme-intro&amp;utm_source=blog&amp;utm_campaign=gatsbythemes&quot; class=&quot;button-component button-component-theme-accent&quot;&gt;Try Now&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://jamstackthemes.dev/theme/gatsby-theme-intro/&quot;&gt;&lt;img src=&quot;/images/1592228111-wkocjan-gatsby-theme-intro-master.png&quot; alt=&quot;Intro. theme&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Supported CMS&lt;/strong&gt;: Git&lt;/p&gt;
&lt;p&gt;This is a really attractive personal branding and resume template that has some interesting design features in the way that it displays skills and work history.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://app.stackbit.com/create?theme=https://github.com/stackbit-themes/gatsby-theme-intro&amp;utm_source=blog&amp;utm_campaign=gatsbythemes&quot; class=&quot;button-component button-component-theme-accent&quot;&gt;Create Intro Gatsby Site&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;&lt;a href=&quot;https://app.stackbit.com/create?theme=https://github.com/stackbit-themes/gatsby-starter-zenii&amp;#x26;utm_source=blog&amp;#x26;utm_campaign=gatsbythemes&quot;&gt;Zenii by The Bakerdev&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://app.stackbit.com/create?theme=https://github.com/stackbit-themes/gatsby-starter-zenii&amp;utm_source=blog&amp;utm_campaign=gatsbythemes&quot; class=&quot;button-component button-component-theme-accent&quot;&gt;Try Now&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://jamstackthemes.dev/theme/gatsby-starter-zenii/&quot;&gt;&lt;img src=&quot;/images/zenii-gatsby-theme.png&quot; alt=&quot;Zenii. theme&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Supported CMS&lt;/strong&gt;: Contentful&lt;/p&gt;
&lt;p&gt;A fully-featured business/services theme offering great versatility of content displays and highlights, pricing, forms and more.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://app.stackbit.com/create?theme=https://github.com/stackbit-themes/gatsby-starter-zenii&amp;utm_source=blog&amp;utm_campaign=gatsbythemes&quot; class=&quot;button-component button-component-theme-accent&quot;&gt;Create Zenii Gatsby Site&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;&lt;a href=&quot;https://app.stackbit.com/create?theme=fjord&amp;#x26;utm_source=blog&amp;#x26;utm_campaign=gatsbythemes&quot;&gt;Fjord Blog by Stackbit&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://app.stackbit.com/create?theme=fjord&amp;utm_source=blog&amp;utm_campaign=gatsbythemes&quot; class=&quot;button-component button-component-theme-accent&quot;&gt;Try Now&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://themes.stackbit.com/demos/fjord?utm_source=blog&amp;#x26;utm_campaign=gatsbythemes&quot;&gt;&lt;img src=&quot;/images/themes/fjord-gatsby-theme.png&quot; alt=&quot;Fjord&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Supported CMS&lt;/strong&gt;: Sanity, DatoCMS, Contentful, NetlifyCMS, Forestry CMS, Git&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Another one of my favorite Stackbit templates is this beautiful blog theme. It&apos;s a great fit for personal websites, artist showcases and portfolios, to name a few. This Gatsby theme is especially easy to use and friendly for non-developers, so you can invite collaborators to join your site and add their content independently. To create this Fjord Gatsby site, go to &lt;a href=&quot;https://app.stackbit.com/create?theme=fjord&amp;#x26;utm_source=blog&amp;#x26;utm_campaign=gatsbythemes&quot;&gt;Stackbit&lt;/a&gt; and generate a new Jamstack site. Within about a minute you&apos;ll be inside the Stackbit Studio, ready to start editing.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://app.stackbit.com/create?theme=fjord&amp;utm_source=blog&amp;utm_campaign=gatsbythemes&quot; class=&quot;button-component button-component-theme-accent&quot;&gt;Create Fjord Gatsby Site&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;&lt;a href=&quot;https://app.stackbit.com/create?theme=https://github.com/stackrole/gatsby-starter-foundation&amp;#x26;ssg=gatsby&amp;#x26;cms=netlifycms&amp;#x26;utm_source=blog&amp;#x26;utm_campaign=gatsbythemes&quot;&gt;Foundation by Stackrole&lt;/a&gt;&lt;/h2&gt;
&lt;div&gt;
&lt;a href=&quot;https://app.stackbit.com/create?theme=https://github.com/stackrole/gatsby-starter-foundation&amp;ssg=gatsby&amp;cms=netlifycms&amp;utm_source=blog&amp;utm_campaign=gatsbythemes&quot; class=&quot;button-component button-component-theme-accent&quot;&gt;Try Now&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://jamstackthemes.dev/theme/gatsby-starter-foundation/&quot;&gt;&lt;img src=&quot;/images/1592228108-stackrole-gatsby-starter-foundation-master.png&quot; alt=&quot;Foundation Jamstack theme&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Supported CMS&lt;/strong&gt;: Netlify CMS&lt;/p&gt;
&lt;p&gt;This is a personal website and blog theme that is simple and clean. It supports a one-click deployment to Netlify and is well documented, both in terms of installation and use.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://app.stackbit.com/create?theme=https://github.com/stackrole/gatsby-starter-foundation&amp;ssg=gatsby&amp;cms=netlifycms&amp;utm_source=blog&amp;utm_campaign=gatsbythemes&quot; class=&quot;button-component button-component-theme-accent&quot;&gt;Create Foundation Gatsby Site&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;&lt;a href=&quot;https://app.stackbit.com/create?theme=https://github.com/RyanFitzgerald/devblog&amp;#x26;ssg=gatsby&amp;#x26;cms=netlifycms&amp;#x26;utm_source=blog&amp;#x26;utm_campaign=gatsbythemes&quot;&gt;Gatsby Dev Blog by Ryan Fitzgerald&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://app.stackbit.com/create?theme=https://github.com/RyanFitzgerald/devblog&amp;ssg=gatsby&amp;cms=netlifycms&amp;utm_source=blog&amp;utm_campaign=gatsbythemes&quot; class=&quot;button-component button-component-theme-accent&quot;&gt;Try Now&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://jamstackthemes.dev/theme/gatsby-dev-blog-fitzgerald/&quot;&gt;&lt;img src=&quot;/images/fitzgerald.png&quot; alt=&quot;Gatsby Dev Blog&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Supported CMS&lt;/strong&gt;: Netlify CMS&lt;/p&gt;
&lt;p&gt;A clean, bright, hyper customizable blogging theme designed with developers in mind. Great for showcasing processes, thoughts, code, and more.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://app.stackbit.com/create?theme=https://github.com/RyanFitzgerald/devblog&amp;ssg=gatsby&amp;cms=netlifycms&amp;utm_source=blog&amp;utm_campaign=gatsbythemes&quot; class=&quot;button-component button-component-theme-accent&quot;&gt;Create Gatsby Dev Blog&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;&lt;a href=&quot;https://app.stackbit.com/create?theme=https://github.com/narative/gatsby-theme-novela&amp;#x26;ssg=gatsby&amp;#x26;utm_source=blog&amp;#x26;utm_campaign=gatsbythemes&quot;&gt;Novela by Narative&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://app.stackbit.com/create?theme=https://github.com/narative/gatsby-theme-novela&amp;ssg=gatsby&amp;utm_source=blog&amp;utm_campaign=gatsbythemes&quot; class=&quot;button-component button-component-theme-accent&quot;&gt;Try Now&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://jamstackthemes.dev/theme/gatsby-theme-novela/&quot;&gt;&lt;img src=&quot;/images/novela.png&quot; alt=&quot;Novela&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Supported CMS&lt;/strong&gt;: Contentful&lt;/p&gt;
&lt;p&gt;A creative and eye catching portfolio or blogging site intended for artists, photographers or writers. Featuring a choice between blog-like list or tiled arrangement, as well as light or dark mode.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://app.stackbit.com/create?theme=https://github.com/narative/gatsby-theme-novela&amp;ssg=gatsby&amp;utm_source=blog&amp;utm_campaign=gatsbythemes&quot; class=&quot;button-component button-component-theme-accent&quot;&gt;Create Novela Gatsby Site&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;&lt;a href=&quot;https://jamstackthemes.dev/theme/gatsby-agency-portfolio/&quot;&gt;Gatsby Agency Portfolio by Cosmic.js&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://jamstackthemes.dev/theme/gatsby-agency-portfolio/&quot;&gt;&lt;img src=&quot;/images/1592228088-cosmicjs-gatsby-agency-portfolio-master.png&quot; alt=&quot;Gatsby Agency Portfolio&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Supported CMS&lt;/strong&gt;: Cosmic.js&lt;/p&gt;
&lt;p&gt;A nice template for an agency focused on a list of clients and a portfolio of projects. Has a one-click deploy to Netlify and is well-documented.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;&lt;a href=&quot;https://jamstackthemes.dev/theme/gatsby-oneshopper/&quot;&gt;OneShopper by Rohit Gupta&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://jamstackthemes.dev/theme/gatsby-oneshopper/&quot;&gt;&lt;img src=&quot;/images/1592228101-rohitguptab-oneshopper-master.png&quot; alt=&quot;OneShopper&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Supported CMS&lt;/strong&gt;: Contentful&lt;/p&gt;
&lt;p&gt;Pretty much everything you need from a starter design for a fully-featured ecommerce site. The ecommerce functionality uses Snipcart.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;&lt;a href=&quot;https://jamstackthemes.dev/theme/gatsby-myclicks/&quot;&gt;MyClicks by Himali Patel&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://jamstackthemes.dev/theme/gatsby-myclicks/&quot;&gt;&lt;img src=&quot;/images/1592228097-himali-patel-myclicks-master.png&quot; alt=&quot;MyClicks&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Supported CMS&lt;/strong&gt;: Contentful&lt;/p&gt;
&lt;p&gt;This is specifically a portfolio site for photographers that uses a Contentful backend. It offers one-click deploy to Netlify.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;&lt;a href=&quot;https://jamstackthemes.dev/?&amp;#x26;utm_source=blog&amp;#x26;utm_campaign=gatsbythemes&quot;&gt;More Jamstack Themes&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Didn&apos;t find what you were looking for? No worries. As of this writing, there are 257 Gatsby themes listed on the &lt;a href=&quot;https://jamstackthemes.dev/?&amp;#x26;utm_source=blog&amp;#x26;utm_campaign=gatsbythemes&quot;&gt;Jamstack Themes site&lt;/a&gt;, which is the most comprehensive resource for themes across all Jamstack tools. There you can filter Jamstack themes by CMS, Static Site Generator, and more. Alternatively, head over to &lt;a href=&quot;https://www.stackbit.com/?&amp;#x26;utm_source=blog&amp;#x26;utm_campaign=gatsbythemes&quot;&gt;Stackbit&lt;/a&gt; to choose from our collection and build your Jamstack website in 60 seconds or less.&lt;/p&gt;
&lt;hr&gt;</content:encoded></item><item><title><![CDATA[4 New Tools to Watch in the Jamstack Ecosystem]]></title><description><![CDATA[There have been a lot of new innovations in the Jamstack ecosystem already in 2020. Let's look at some of the major highlights including new static site generators and new deployment tools.]]></description><link>https://www.stackbit.com/blog/4-new-jamstack-tools/</link><guid isPermaLink="false">https://www.stackbit.com/blog/4-new-jamstack-tools/</guid><pubDate>Mon, 08 Jun 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;While all of us at &lt;a href=&quot;https://www.stackbit.com/&quot;&gt;Stackbit&lt;/a&gt; have been firm believers in the Jamstack for pretty much as long as it&apos;s been a thing, but 2020 is really feeling like the year it goes mainstream! In fact, data from Netlify&apos;s recent &lt;a href=&quot;https://www.netlify.com/blog/2020/05/27/state-of-the-jamstack-survey-2020-first-results/&quot;&gt;State of the Jamstack community survey&lt;/a&gt; confirm that &quot;Jamstack is seeing a wave of mainstream adoption.&quot; Developer communities are increasingly curious about the Jamstack and adopting its various tools as they quickly realize &lt;a href=&quot;https://www.software.com/src/supercharge-web-development-with-git-and-netlify&quot;&gt;the value of the architecture&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This year has been filled with new tools and new offerings in the Jamstack ecosystem. Our goal at Stackbit is to let you use the tools you choose, so we&apos;re always trying to stay on top of the latest trends in the community. In this post, I want to cover some of the recent tools that have been trending in the Jamstack ecosystem.&lt;/p&gt;
&lt;h2&gt;RedwoodJS&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/images/1591622805-redwoodsm.png&quot; alt=&quot;RedwoodJS&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://redwoodjs.com/&quot;&gt;RedwoodJS&lt;/a&gt; is a new JavaScript and React-based Jamstack framework backed by Tom Preston-Werner, a GitHub co-founder and also the original creator of Jekyll. While there are other very popular React frameworks already available for the Jamstack like Next.js and Gatsby, RedwoodJS aims to be something more comprehensive. It wants to be something more like a Ruby On Rails for the Jamstack by bringing together all of the various pieces you need for a complex Jamstack application - on the frontend and the backend - and giving you a single convention-based framework to build it.&lt;/p&gt;
&lt;p&gt;What does this mean in practice? Well, imagine your Jamstack site that requires a frontend made up of static HTML, JavaScript and CSS assets needs to connect to multiple backend APIs. In some cases, these may actually be first or third-party APIs and services, in others it may even be a relational database and finally it likely needs some form of authentication. RedwoodJS has built-in tooling and helpers that help enable developers to develop all of these pieces, including generators and scaffolding the speed up the process of building the initial app prototype.&lt;/p&gt;
&lt;p&gt;RedwoodJS is still very new but it definitely occupies a unique place in the ecosystem and is worth keeping an eye on.&lt;/p&gt;
&lt;h2&gt;Bridgetown&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/images/1591622832-bridgetownsm.png&quot; alt=&quot;Bridgetown&quot;&gt;&lt;/p&gt;
&lt;p&gt;Jekyll was originally created around 2008, making it one of the older static site generators still in widespread use. It is still being actively developed (and something we support in our &lt;a href=&quot;https://app.stackbit.com/create&quot;&gt;site builder&lt;/a&gt;) but some people in the community were clamoring for a major change direction. Instead, Jared White decided to fork Jekyll and make some big changes to how it works.&lt;/p&gt;
&lt;p&gt;Bridgetown aims to add some aspects of modern web development that were missing from Jekyll, such as embracing Webpack and thereby making it easier to work with tools like modern JavaScript and CSS frameworks. It recently &lt;a href=&quot;https://www.bridgetownrb.com/release/whats-new-in-0.14-hazelwood/&quot;&gt;overhauled the plugins API&lt;/a&gt; to make it easier to write and test plugins that may integrate with your app in multiple ways. They also added support for &lt;a href=&quot;https://www.bridgetownrb.com/feature/supercharge-your-bridgetown-site-with-ruby-front-matter/&quot;&gt;Ruby code in frontmatter&lt;/a&gt;, which isn&apos;t as crazy as it sounds.&lt;/p&gt;
&lt;p&gt;It&apos;ll be interesting to watch Bridgetown to see how it continues to diverge from its Jekyll origins and to see if this is the modern Ruby-based SSG that developers have been waiting for.&lt;/p&gt;
&lt;h2&gt;Scully&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/images/1591622861-scullysm.png&quot; alt=&quot;Scully&quot;&gt;&lt;/p&gt;
&lt;p&gt;JavaScript and frontend developers who prefer React or Vue have had multiple options for static site generators based on those technologies for quite some time already. Strangely, until recently there was no Angular-based SSG. &lt;a href=&quot;https://scully.io/&quot;&gt;Scully&lt;/a&gt; fixes that.&lt;/p&gt;
&lt;p&gt;Scully&apos;s approach differs from other tools in more than just it&apos;s use of Angular. It aims to be less opinionated than some of its non-Angular counterparts so that it can be added to existing Angular projects, essentially allowing an Angular SPA to be converted to a a Jamstack application. In addition, it takes a unique approach to rendering by searching your application for static routes and then using &lt;a href=&quot;https://github.com/puppeteer/puppeteer&quot;&gt;Puppeteer&lt;/a&gt; to take a snapshot of the application, using &lt;a href=&quot;https://github.com/angular/angular/tree/master/packages/zone.js&quot;&gt;Zone.js&lt;/a&gt; (a tool built into Angular) to help it determine when the snapshot is complete ⁠— even when asynchronous calls are involved. The goal of this, as I understand it, is to deliver predictable rendering results while also enabling interesting features, such as the ability to add breakpoints in the rendering process.&lt;/p&gt;
&lt;p&gt;While Angular doesn&apos;t seem to get the attention of it&apos;s framework counterparts lately, it still has a large community and a strong foothold in the enterprise, and Scully&apos;s approach seems geared to take advantage of that.&lt;/p&gt;
&lt;h2&gt;Azure Static Web Apps&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/images/1591622890-azuresm.png&quot; alt=&quot;Azure Static Web Apps&quot;&gt;&lt;/p&gt;
&lt;p&gt;It has been entirely possible to host Jamstack applications on services like Azure and AWS for some time, but without many of the integration and deployment features offered by services like Netlify, Vercel or Render. Last week at the Build online conference, Microsoft announced a new Azure service that begins to address that called &lt;a href=&quot;https://azure.microsoft.com/en-us/services/app-service/static/&quot;&gt;App Service Static Web Apps&lt;/a&gt;, which is currently in public preview.&lt;/p&gt;
&lt;p&gt;Some aspects of Static Web Apps make it unique. First, it uses GitHub Actions to enable its CI/CD deployment. Using settings that you configure within Azure, the service generates the GitHub Action necessary to build and deploy your application. This also means that it should be relatively easy to customize the configuration to support any additional requirements you may have. In addition to serverless function creation and deployment similar to Netlify Functions (JavaScript only at the moment, but planned for other languages), the service also provides built-in authentication. This feature uses a JSON file that defines routes within the applicaton that require authentication and what role the user requires to access it.&lt;/p&gt;
&lt;h2&gt;More to Come For Sure&lt;/h2&gt;
&lt;p&gt;Given the growth in adoption of the Jamstack, we&apos;re sure to see more tools, services and companies jumping in. We&apos;ve already worked hard to support a wide range of tools using Stackbit, and, as the ecosystem expands, we&apos;ll continue to build tools that help developers bring all the pieces of the Jamstack together. &lt;a href=&quot;https://app.stackbit.com/create&quot;&gt;Why not give it a try&lt;/a&gt;?&lt;/p&gt;</content:encoded></item><item><title><![CDATA[What is Markdown and Why Does it Matter to the Jamstack?]]></title><description><![CDATA[Markdown is so ubiquitous in the Jamstack that many people confuse the M in the JAM acronym to mean Markdown rather than markup. But how did this happen and why does Markdown play such a big role in Jamstack development?]]></description><link>https://www.stackbit.com/blog/what-is-markdown/</link><guid isPermaLink="false">https://www.stackbit.com/blog/what-is-markdown/</guid><pubDate>Tue, 19 May 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Markdown has become so ubiquitous to developers that it is often taken for granted and assumed that just about anyone creating content is familiar with it. However, once you move out of developer circles, it becomes much less common that anyone has ever heard of it, much less used it. The primary means of authoring content for the average non-developer is still Word or a tool with a similar authoring experience (ex. Pages or Google Docs).&lt;/p&gt;
&lt;p&gt;If you&apos;re unfamilar with Markdown but find yourself writing or editing content for Jamstack sites, you may be wondering what all this weird formatting is all about. In this post, I hope to offer some background on what Markdown is and the role it typically plays in the Jamstack.&lt;/p&gt;
&lt;h2&gt;A Brief History of Markdown&lt;/h2&gt;
&lt;p&gt;Markdown was originally &lt;a href=&quot;https://daringfireball.net/projects/markdown/&quot;&gt;released in 2004 by John Gruber&lt;/a&gt; who was already very well known for his Apple-focused blog. He created the syntax in collaboration with Aaron Swartz, co-founder of Reddit.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1589897495-gruber-markdown.png&quot; alt=&quot;John Gruber&amp;#x27;s original Markdown&quot;&gt;&lt;/p&gt;
&lt;p&gt;Markdown has two parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A syntax for marking up plain text documents.&lt;/li&gt;
&lt;li&gt;A tool (originally written in Perl) to convert this markup into valid HTML.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The idea was that Markdown would not only be easy to write, with a relatively limited and simple syntax, but more importantly it would be easy to read. This contrasted with writing in straight HTML which has a tag-based markup that can be verbose and make readability difficult, especially if you are unfamiliar with the meanings of each tag.&lt;/p&gt;
&lt;p&gt;While other markup languages like BBCode, Textile, AsciiDoc, and ReStructuredText already existed, Markdown caught on and was adopted by sites like GitHub, Reddit and StackOverflow for formatting content. Like other markup languages such as Textile, Markdown had no official specification, which led to one of Markdown&apos;s most enduring and confusing aspects.&lt;/p&gt;
&lt;h3&gt;Markdown &quot;Flavors&quot;&lt;/h3&gt;
&lt;p&gt;The original Markdown Perl script that is still available on John Gruber&apos;s site for download was last updated in late 2004. Markdown had some issues, which &lt;a href=&quot;https://blog.codinghorror.com/responsible-open-source-code-parenting/&quot;&gt;Jeff Atwood detailed back in 2009&lt;/a&gt;, but they were never addressed by the &quot;official&quot; Markdown. This lead to improvements being made within each individual Markdown implementation. Each of these Markdown variants are often referred to as flavors.&lt;/p&gt;
&lt;p&gt;The most accurate list I can find identifies &lt;a href=&quot;https://github.com/commonmark/commonmark-spec/wiki/markdown-flavors&quot;&gt;36 flavors of Markdown&lt;/a&gt;, each with its own particular syntax variations. Those of us with experience in Markdown have likely encountered these differences. They often become visible in small rendering differences when copying Markdown from one program to another.&lt;/p&gt;
&lt;p&gt;These issues led to the creation of the &lt;a href=&quot;https://commonmark.org/&quot;&gt;CommonMark specification&lt;/a&gt;, which aimed to create a clear and evolving standard for Markdown syntax. While this has lead to some programs and Markdown implementations to adopt the standard, the adoption has been far from universal. Thankfully, in most cases the rendering differences tend to be small.&lt;/p&gt;
&lt;h2&gt;Markdown and Static Site Generators&lt;/h2&gt;
&lt;p&gt;Jekyll was one of the earliest static site generators that gained widespread adoption, partly because it was the default tool supported in GitHub Pages. Jekyll moved from Textile markup to Markdown in 2008 with the release of &lt;a href=&quot;https://jekyllrb.com/docs/history/#v0-1-3&quot;&gt;v0.1.3&lt;/a&gt;. Most of the popular static site generators that followed also supported Markdown by default.&lt;/p&gt;
&lt;p&gt;Developers had become increasingly comfortable with Markdown because of its adoption on sites that were popular with them. Thus, one of the early draws of static site generators for creating sites - particularly blogs - was the ability to author content using Markdown. Eventually, Markdown became so embedded in the ecosystem of static site generators that, with the introduction of the term JAMstack (now Jamstack), many people still confuse the M in the JAM acronym for Markdown (so much so that I once wrote a post on &lt;a href=&quot;https://remotesynthesis.com/blog/m-is-for-markup&quot;&gt;that topic alone&lt;/a&gt;).&lt;/p&gt;
&lt;h3&gt;Front matter&lt;/h3&gt;
&lt;p&gt;One of the benefits of Markdown was that it was flexible enough to meet almost any content-related task as, in most cases, it was implemented to allow for any arbitrary HTML. However, this didn&apos;t completely meet the needs of static site generators. Posts and pages often needed some form of properties or metadata that contained data associated with the content. This introduced the concept of front matter.&lt;/p&gt;
&lt;p&gt;Front matter is generally YAML, TOML or JSON data placed at the beginning of a Markdown file that contains any metadata associated with that file. It could include things such as SEO attributes of a post, which template to use to render a page, or complex structures of navigation or taxonomies. There really isn&apos;t a limitaton on what is allowed in front matter.&lt;/p&gt;
&lt;p&gt;Here&apos;s a very simple example of YAML frontmatter you might find in a Jekyll post:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;---
layout: default
title: What is Markdown?
date: 2020-05-20 12:34
author: Brian Rinaldi
---
This is my post.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In some cases, this front matter can contain the majority of the content of a page. For example, a site&apos;s home page can often have long and complex front matter that defines content for the various sections and sub-sections within the design.&lt;/p&gt;
&lt;h2&gt;Markdown in the Modern Jamstack&lt;/h2&gt;
&lt;p&gt;Markdown&apos;s central place in static site generators means that it remains a key ingredient in modern Jamstack applications. This has hardly diminished as Jamstack applications have moved towards headless CMS for managing content.&lt;/p&gt;
&lt;h3&gt;Markdown in Headless CMS&lt;/h3&gt;
&lt;p&gt;There are two main types of headless CMS: git-based and API-based. (Not sure what the differences are? I &lt;a href=&quot;https://docs.stackbit.com/best-practices/api-versus-git-based-cms/&quot;&gt;explain them here&lt;/a&gt;.) Regardless of which type you choose, you will end up working with Markdown on some level.&lt;/p&gt;
&lt;p&gt;Since a git-based CMS adds a content management layer over your existing file-based content, a key component of any git-based CMS is a Markdown editor. For example, here is the Markdown editor built into Netlify CMS:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1589897532-netlifycms-markdown-sm.png&quot; alt=&quot;Editing Markdown in Netlify CMS&quot;&gt;&lt;/p&gt;
&lt;p&gt;Rather than require that all content writers and editors know Markdown, the git-based CMS provides a WYSIWYG (What You See Is What You Get) style editor for managing Markdown-based content. This mimics the experience of WYSIWYG HTML editors common in traditional CMS with the difference being, of course, that the resulting source is written Markdown syntax.&lt;/p&gt;
&lt;p&gt;Similarly, API-based CMS will generally provide a WYSIWYG-style Markdown editor for long form text content. For example, here is the Markdown editor inside Contentful:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1589897569-contentful-markdown.png&quot; alt=&quot;Editing Markdown in Contentful&quot;&gt;&lt;/p&gt;
&lt;p&gt;One key distinction is that most API-based CMS also provide some form of structured long-form content. For instance, in Contentful it is called Rich Text or in Sanity it is called Block Content. While the WYSIWYG editors generally looks similar to their comparable Markdown editor, the underlying source is very different, instead relying on some form of rich text specification that, in the case of a web site, would need to be converted to HTML.&lt;/p&gt;
&lt;p&gt;Why the difference? Why not use Markdown for rich text? The key thing here is that Markdown is designed to be converted to HTML. API-based headless CMS are designed to create content that can drive more than just web pages. This means that the end result of the structured text might not always be HTML. In addition, these rich text specifications generally have support for things that Markdown does not, like linking objects in the CMS, as one example.&lt;/p&gt;
&lt;h3&gt;MDX&lt;/h3&gt;
&lt;p&gt;Markdown&apos;s inability to easily embed complex UI elements has led to a further expansion of the Markdown ecosystem with the creation of &lt;a href=&quot;https://mdxjs.com/&quot;&gt;MDX&lt;/a&gt;. While Markdown can generally accept any arbitrary HTML in use cases that Markdown syntax doesn&apos;t cover, this still presented a problem for React-based sites that require React components instead of standard HTML.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1589897599-mdx-site-sm.png&quot; alt=&quot;MDX homepage&quot;&gt;&lt;/p&gt;
&lt;p&gt;MDX aims to solve that problem by allowing the author to embed &lt;a href=&quot;https://reactjs.org/docs/introducing-jsx.html&quot;&gt;JSX&lt;/a&gt;, which are effectively a JavaScript representation of HTML, into Markdown text. With the widespread usage of React-based static site generators like Next.js and Gatsby, usage of MDX has grown. It remains very much a developer-centric solution though, and not something one would anticipate that a non-developer content author or editor would need to become familiar with.&lt;/p&gt;
&lt;h2&gt;Where to Go From Here&lt;/h2&gt;
&lt;p&gt;If you already know Markdown, then hopefully this was a good look at the ecosystem that relies on it. If you are new to Markdown, then hopefully this offered some good background on what it is and how to use it. Regardless, I wanted to leave you with some resources and tools related to using Markdown.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://guides.github.com/features/mastering-markdown/&quot;&gt;Mastering Markdown&lt;/a&gt; - a comprehensive overview of Markdown and usage of the GitHub flavored Markdown syntax.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://commonmark.org/help/&quot;&gt;CommonMark Markdown Tutorial&lt;/a&gt; - a good reference for a common flavor of Markdown syntax. It&apos;ll teach you the basics that cross the various implementations and has a good interactive tutorial for learning Markdown syntax.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://typora.io/&quot;&gt;Typora&lt;/a&gt; - an excellent editor (still in beta and free) for writing and reading Markdown available for MacOS, Windows and Linux.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://markitdown.medusis.com/&quot;&gt;Paste as Markdown&lt;/a&gt; - for when you need to quickly convert rich text copied (ex. from the browser) to Markdown.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://word2md.com/&quot;&gt;Word to Markdown converter&lt;/a&gt; - while far from perfect, this tool can help in a crunch to comnvert Word documents.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.deckset.com/&quot;&gt;Deckset&lt;/a&gt; - a tool I enjoy for creating full slide decks using only Markdown (Mac only).&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Understanding Content Modeling in a Headless World]]></title><description><![CDATA[A look at why content modeling can be important in a Jamstack context, where headless content management systems rule, and some best practices for creating a content model.]]></description><link>https://www.stackbit.com/blog/content-modeling-headless/</link><guid isPermaLink="false">https://www.stackbit.com/blog/content-modeling-headless/</guid><pubDate>Mon, 04 May 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;For better or worse, many of the mental models that we bring into Jamstack development come from the traditional CMS world, and from Wordpress in particular. Take the case of content modeling. This was largely an afterthought in Wordpress since it defaulted to some basic - and largely unstructured - content types: the post and the page.&lt;/p&gt;
&lt;p&gt;The thing is, this worked well, as Wordpress (and most traditional CMS systems) had only one intended result: the web page. Unstructured content fit this purpose and gave content writers the flexibility to create just about anything within the confines of the post and page content models. Even today, the Wordpress API is built to deliver rendered HTML. But unstructured content has limitations, which is why Wordpress ACF (advanced custom fields) has become a ubiquitous add on.&lt;/p&gt;
&lt;p&gt;The Jamstack is, obviously, still about building outputs for the web, whatever the form factor, but one of its key selling points is its decoupled nature. In the case of content, the frontend of a Jamstack site is decoupled from the backend headless content management system (CMS). One key benefit of this is that the content can be reused in multiple different sites, a mobile app, a chat app, a voice-enabled app, etc. This means a more thoughtful approach to content modeling is needed, but, in many cases, we default to the largely unstructured post and page model of Wordpress.&lt;/p&gt;
&lt;p&gt;In this post I want to explore why content modeling is important in the Jamstack and how to approach content modeling for headless CMS.&lt;/p&gt;
&lt;h2&gt;What is a Content Model?&lt;/h2&gt;
&lt;p&gt;A content model is a diagram of your content universe. It describes the various content types that comprise your content, lists their content attributes and shows how the various types relate to one another.&lt;/p&gt;
&lt;p&gt;Let&apos;s take a very simple and common example. Imagine I am responsible for a very simple blog wherein all of my content are blog posts, with each post having an author. My simple content model might look something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1588610614-simple-blog-model-sm.png&quot; alt=&quot;A very simple blog content model&quot;&gt;&lt;/p&gt;
&lt;p&gt;For anyone used to database modeling, this may seem somewhat familiar but less granular (we aren&apos;t focused on things like primary keys, data types, length and so on). In this case, we just have two content types - a post and an author. Each post contains a reference to an author. This is very simplistic and you can already imagine I might expand this with things like a category type that also relates to post. Or my post may have related posts wherein the post type references other instances of a post.&lt;/p&gt;
&lt;p&gt;Most content models won&apos;t be as simple as the one shown above. For instance, let&apos;s see a slightly more complex example that consists of posts with authors but also events. Each event can have multiple sessions and each session can have one or more speakers. However, in this case not only is the information that I need for a speaker largely the same as the information that I need for an author, but it is also entirely possible that someone could be both an author and a speaker. Preferably, we&apos;d want to avoid duplicating this information in our CMS, so abstracting both speaker and author as person would allow us to reuse that in both the relationship with sessions and with posts.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1588610562-events-site-sm.png&quot; alt=&quot;A simple events site model&quot;&gt;&lt;/p&gt;
&lt;p&gt;Without thinking through a content model, abstractions like the author/speaker one shown in the example above be get easily overlooked during development. Refactoring an existing content model can often be very painful (I know this from personal experience), so planning can save you a lot of time and effort down the road. This is also why it is important not to think of it purely as a description of the pages of your website, even if that may be its primary use initially. Keep in mind that this content may be used in any number of destinations.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;I highly recommend reading &lt;a href=&quot;https://alistapart.com/article/content-modelling-a-master-skill/&quot;&gt;Content Modelling: A Master Skill&lt;/a&gt; by Rachel Lovinger for A List Apart. It gives an excellent overview of concepts and considerations that expand upon the topics covered here.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Unstructured Content Versus Structured Content&lt;/h3&gt;
&lt;p&gt;Thinking only about a web page output will also lead to the overuse of unstructured content. Unstructured content can lead to maintainability problems down the road.&lt;/p&gt;
&lt;p&gt;To illustrate what I mean, let&apos;s imagine the events site again. Thinking in terms of purely a web page, you might come up with something like this, whereby your event has a &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;startDateTime&lt;/code&gt;, &lt;code&gt;endDateTime&lt;/code&gt; and then a &lt;code&gt;body&lt;/code&gt; that represents the remainder of the page content.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1588610556-event-page-layout1-sm.png&quot; alt=&quot;An unstructured event page layout&quot;&gt;&lt;/p&gt;
&lt;p&gt;The benefit here is that the content editor has almost unlimited flexibility in how the event description and schedule is laid out. However, after the page is up, perhaps we decide it is probably worth having pages for each author and session. Or, even worse, after we&apos;ve done a ton of events, we decide that we want to change the layout of the all the events to be consistent to help avoid confusion. In each of these cases, our unstructured page content means that we&apos;ll have to make some painful changes to our existing content model and manually fix each instance of an event.&lt;/p&gt;
&lt;p&gt;The better approach, illustrated in the model from the prior section might look something like this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1588610559-event-page-layout2-sm.png&quot; alt=&quot;A structured event page layout approach&quot;&gt;&lt;/p&gt;
&lt;p&gt;Since &lt;code&gt;session&lt;/code&gt; and &lt;code&gt;speaker&lt;/code&gt; are now separate content types, we can easily manage the layout to be consistent across pages and create separate pages for each session and speaker. Plus, we can now use the same content to populate our event&apos;s mobile app without duplicating the effort!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;For a deeper look at structured content, read &lt;a href=&quot;https://www.smashingmagazine.com/2018/11/structured-content-done-right/&quot;&gt;Strategies For Headless Projects With Structured Content Management Systems&lt;/a&gt; by Knut Melvær of Sanity.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Balancing Developer Wants with User Needs&lt;/h3&gt;
&lt;p&gt;While structuring your content can be hugely beneficial for things like flexibility, reuse and long term maintainability. It does come with some tradeoffs. The more you abstract your content model by separating things into distinct content types, the more steps you create for an author/editor who wants to create content.&lt;/p&gt;
&lt;p&gt;For example, despite its issues, the unstructured event page we discussed earlier would be fairly simple to create, and involve just one step. The unstructured version would involve multiple steps, some of which themselves are made up of multiple steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add each individual speaker;&lt;/li&gt;
&lt;li&gt;Add each individual session and associate the speakers with the session;&lt;/li&gt;
&lt;li&gt;Add the event and associate each individual session with the event.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In this case, this is a worthwhile, in fact necessary, tradeoff. In some cases though, the additional complexity from a content creation and editing standpoint may not be worth the potential benefit of further abstraction.&lt;/p&gt;
&lt;p&gt;As a simple example, sometimes you may want to separate out image objects that are used for things like headers as a separate content type.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1588610549-abstract-images-sm.png&quot; alt=&quot;abstracting images from posts&quot;&gt;&lt;/p&gt;
&lt;p&gt;This can be very useful if these banners are likely to be reused across multiple posts or included in other types of content, especially as it allows the custom title and description fields to populate the &lt;code&gt;img&lt;/code&gt; properties without cluttering up the post attributes. However, if these images are specific to a post, it can be cumbersome to have to create a separate image object when the image could be a single property of a post and the &lt;code&gt;img&lt;/code&gt; properties could reuse the title and description from the post.&lt;/p&gt;
&lt;p&gt;Finding this balance can be difficult but the point is not to go overboard abstracting out content types.&lt;/p&gt;
&lt;h2&gt;Content Models in Headless CMS&lt;/h2&gt;
&lt;p&gt;One of the benefits of creating a content model is that it can make the process of setting up your headless CMS much more straightforward. How that happens depends largely on the headless CMS you choose (and there are &lt;a href=&quot;https://bejamas.io/blog/headless-cms/&quot;&gt;a lot of great options&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;In a git-based headless CMS, you&apos;ll generally be translating your content model into a combination of Markdown, YAML and JSON. In some cases, you&apos;ll need to directly map these individual content types and content attributes out in a configuration file (for instance, this is required by Netlify CMS but only necessary for granular control of the content model in Forestry). One aspect that isn&apos;t necessarily obvious, though, is &lt;a href=&quot;https://www.stackbit.com/blog/git-based-cms-relationships/&quot;&gt;managing content type relationships in a git-based system&lt;/a&gt;. Planning your content model ahead of time can save you a ton of frustration. I can attest from personal experience that adding or updating attributes can, in some cases, require a lot of manual file editing.&lt;/p&gt;
&lt;p&gt;How you configure an API-based CMS based upon your content model depends largely on which one you are using. In systems like Contentful, for instance, content models are built using a web-based UI. In others like Sanity, they are configured with code.&lt;/p&gt;
&lt;p&gt;For example, here is the simple post content type shown above configured in Contentful.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1588610554-contentful-sm.png&quot; alt=&quot;post content type in Contentful&quot;&gt;&lt;/p&gt;
&lt;p&gt;Meanwhile, in Sanity the code representing the same content type is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;{
  title: &quot;Post&quot;,
  name: &quot;post&quot;,
  type: &quot;document&quot;,
  fields: [
    {
      title: &quot;Title&quot;,
      name: &quot;title&quot;,
      type: &quot;string&quot;
    },
    {
      title: &quot;Description&quot;,
      name: &quot;description&quot;,
      type: &quot;text&quot;
    },
    {
      title: &quot;Author&quot;,
      name: &quot;author&quot;,
      type: &quot;reference&quot;,
      to: [{type: &apos;author&apos;}]
    },
    {
      title: &quot;Body&quot;,
      name: &quot;body&quot;,
      type: &quot;text&quot;
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Managing relationships between content types in an API-based CMS is built into the system, and there are protections to maintain the integrity of the data. For instance, in the above example, by default I will not be able to delete an author that is referenced in an instance of a post.&lt;/p&gt;
&lt;p&gt;While the specifics of how the content models are created may change across tools, the benefit of planning ahead with a content model can save a lot of time in development and prevent painful modification to a content model after the content has already been populated.&lt;/p&gt;
&lt;h2&gt;Summing Up&lt;/h2&gt;
&lt;p&gt;Developing a content model will save you time and effort when configuring your headless CMS and prevent costly mistakes down the road. If done early in the planning process, it can help define the constraints for design and user experience, inform your technology choices and help clarify business goals. The best part is, content models don&apos;t have to be compilcated to be useful. Simply establishing your content types, attributes and relationships is enough. There&apos;s no need to necessarily dig deep into data types or validations at this point.&lt;/p&gt;
&lt;p&gt;One final point is that this should not simply be a developer task. A content model is more likely to be accurate and successful if it involves people from across your organization - in particular those who will be responsible for writing and editing different aspects of the content (both written and media assets). So involve stakeholders from marketers to content writers and designers whenever possible.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[What the Heck are Content Slugs and How Do I Use Them?]]></title><description><![CDATA[What is a slug and why do so many CMS use them? How can they be useful when creating Jamstack sites using a headless CMS? We explore everything you ever wanted to know about the post slug.]]></description><link>https://www.stackbit.com/blog/what-is-a-content-slug/</link><guid isPermaLink="false">https://www.stackbit.com/blog/what-is-a-content-slug/</guid><pubDate>Mon, 27 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;The use of a &quot;slug&quot; pattern in content management systems (CMS) has been common for some time. Many of us may generally grasp what one is given the ubiquity of its usage in everything from Wordpress to Drupal to Jekyll. But, if you&apos;re like me, you may never have really thought about why they exist. In this post, we&apos;ll take a closer look at what the slug in a CMS is and why it exists.&lt;/p&gt;
&lt;p&gt;Furthermore, in my experience, slugs are often a common point of failure, in particular in Jamstack sites, because they can be prone to simple typos or other mistakes that can cause site builds to break. So we&apos;ll also explore managing slugs in popular headless CMS and using them in Jamstack sites.&lt;/p&gt;
&lt;h2&gt;Defining Slug&lt;/h2&gt;
&lt;p&gt;You may have been using slug fields in your content for ages but never really given much thought to what they are or why they exist. So let&apos;s take a quick look at that.&lt;/p&gt;
&lt;p&gt;Years ago it was common to have URLs with identifiers, often passed as a URL parameter, to identify individual pages. For example, you might have a URL like &lt;code&gt;http://foo.bar/?id=12345&lt;/code&gt;. The &lt;code&gt;id=12345&lt;/code&gt; would often represent a database record ID for the content page being loaded. This has the problem of being not indicative of what the page actually contains and not being human readable. It is also considered detrimental to your page SEO as the URL also gives the search engine no indication what the page contains.&lt;/p&gt;
&lt;p&gt;The slug helps resolve this problem by allowing a human readable (and frequently user generated) identifier for a piece of content. The term appears to have originated in Wordpress, having been adopted from the print publishing industry. Where a permalink represented the full URL that accessed a particular piece of content, including the domain, the path and the identifier (i.e &lt;code&gt;https://stackbit.com/blog/what-is-a-slug&lt;/code&gt;), the slug is only the identifier portion (i.e. &lt;code&gt;what-is-a-slug&lt;/code&gt;). Slugs are human readable, but, since they are intended for the URL, they should not contain any special characters or spaces.&lt;/p&gt;
&lt;p&gt;Yoast, creators of popular SEO plugins for Wordpress, have a good &lt;a href=&quot;https://yoast.com/slug/&quot;&gt;intro to slugs&lt;/a&gt; that also covers their SEO impact. &lt;a href=&quot;https://en.ryte.com/wiki/Slug&quot;&gt;This wiki&lt;/a&gt; has a more in depth look at both the term and its usage.&lt;/p&gt;
&lt;h2&gt;Using the Slug in Static Site Generators&lt;/h2&gt;
&lt;p&gt;Pretty much every static site generator defaults to using the filename as the default slug. Most of them also offer some additional configuration for how the default slug is determined, thereby overriding the filename-based slug. In addition, most static site generators offer a &lt;code&gt;slug&lt;/code&gt; front matter field that can be used to override the slug on a per page/post basis. For example, let&apos;s imagine a page on &lt;code&gt;mysite.com&lt;/code&gt; in the &lt;code&gt;/blog&lt;/code&gt; directory that has a filename of &lt;code&gt;whats-slug.md&lt;/code&gt;. However, the front matter has defined &lt;code&gt;slug: what-is-a-slug&lt;/code&gt;. In this case, the generated site will use &lt;code&gt;http://mysite.com/blog/what-is-a-slug&lt;/code&gt; as the permalink (i.e. the URL) for the page.&lt;/p&gt;
&lt;p&gt;Here are a few examples for some of the popular static site generator options and how they handle slugs and permalinks.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hugo has &lt;a href=&quot;https://gohugo.io/content-management/urls&quot;&gt;granular control&lt;/a&gt; for how the default permalink and slug of a page/post is managed. In addition, you can define either a &lt;code&gt;slug&lt;/code&gt; or &lt;code&gt;url&lt;/code&gt; &lt;a href=&quot;https://gohugo.io/content-management/organization/#override-destination-paths-via-front-matter&quot;&gt;front matter overrides&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Jekyll relies on a default file-naming for posts but also offers &lt;a href=&quot;https://jekyllrb.com/docs/permalinks/&quot;&gt;granular control&lt;/a&gt; for how slugs and permalinks are determined for posts. If you would like to override how these are determined on a per post basis, you need to use the &lt;a href=&quot;https://jekyllrb.com/docs/front-matter/&quot;&gt;front matter &lt;code&gt;permalink&lt;/code&gt; option&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Gatsby&apos;s default behavior is to use the file name as the slug, with the URL directory being the path. Overriding that on a per post basis requires the &lt;a href=&quot;https://www.gatsbyjs.org/packages/gatsby-plugin-slug/&quot;&gt;gatsby-plugin-slug&lt;/a&gt; plugin.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Creating a Slug in Netlify CMS&lt;/h2&gt;
&lt;p&gt;In Netlify CMS there is, unfortunately, no configurable slug type for content models. This means that the front matter slug field isn&apos;t treated any differently than any other front matter string.&lt;/p&gt;
&lt;p&gt;Since Netlify CMS is a git-based headless CMS, it will generate an actual file when creating content. By default, it generates the slug for new pages, posts or uploads based upon the title. You can &lt;a href=&quot;https://www.netlifycms.org/docs/configuration-options/#slug-type&quot;&gt;configure how these slugs are generated&lt;/a&gt; in the site config. This doesn&apos;t give the user access to a slug field in the content though.&lt;/p&gt;
&lt;p&gt;A front matter slug in Netlify CMS would simply be a &lt;a href=&quot;https://www.netlifycms.org/docs/widgets/#string&quot;&gt;&lt;code&gt;string&lt;/code&gt; widget&lt;/a&gt;. While Netlify CMS does not allow you to generate the slug or validate that it is unique, you can add a &lt;code&gt;pattern&lt;/code&gt; validation to ensure that it meets certain criteria like not using special characters or spaces. The below snippet from a Netlify CMS configuration validates a slug field based upon a regex pattern taken &lt;a href=&quot;https://www.regextester.com/96861&quot;&gt;from here&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;- widget: string
  name: slug
  label: Slug
  required: true
  pattern: [&apos;^[a-z0-9]+(?:-[a-z0-9]+)*$&apos;, &apos;A slug can have no spaces or special characters&apos;]
  hint: &gt;-
      The post URL (do not include folder or file extension)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&apos;s worth noting that Netlify CMS also supports &lt;a href=&quot;https://www.netlifycms.org/docs/custom-widgets/&quot;&gt;custom widgets&lt;/a&gt; and these &lt;em&gt;may&lt;/em&gt; allow for the creation of a custom slug widget.&lt;/p&gt;
&lt;h2&gt;Creating a Slug in Contentful&lt;/h2&gt;
&lt;p&gt;Within Contentful, a slug is simply a specialized text field. The good news is that it has features like auto-populating based on the title and it validates for uniqueness. To create a slug field, first create a new text field as part of your content model.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1587993056-contentful-create-field-sm.png&quot; alt=&quot;Creating a slug field in Contentful&quot;&gt;&lt;/p&gt;
&lt;p&gt;Click the &quot;Create and configure&quot; button and then select the &quot;Appearance&quot; tab and choose slug.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1587993061-contentful-field-appearance-sm.png&quot; alt=&quot;Modifying the appearance of a slug field in Contentful&quot;&gt;&lt;/p&gt;
&lt;p&gt;You can see below how a slug auto-populates as a user types in the title field.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1587993065-contentful-typing.gif&quot; alt=&quot;Typing a slug in contentful&quot;&gt;&lt;/p&gt;
&lt;p&gt;To learn more about the slug field in Contentful visit &lt;a href=&quot;https://www.contentful.com/blog/2019/11/29/creating-automated-slug-with-contentful/&quot;&gt;this blog post&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Creating a Slug in Sanity&lt;/h2&gt;
&lt;p&gt;Sanity also has a &lt;a href=&quot;https://www.sanity.io/docs/slug-type&quot;&gt;slug type&lt;/a&gt;. In Sanity, you&apos;d define this in &lt;code&gt;/schemas/schema.js&lt;/code&gt;. A basic implementation would like like this simple blog post schema below:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;{
  title: &quot;Blog&quot;,
  name: &quot;blog&quot;,
  type: &quot;document&quot;,
  fields: [
    {
      title: &quot;Title&quot;,
      name: &quot;title&quot;,
      type: &quot;string&quot;
    },
    {
      title: &quot;Slug&quot;,
      name: &quot;slug&quot;,
      type: &quot;slug&quot;,
      options: {
        source: &quot;title&quot;
      }
    },
    {
      title: &quot;Body&quot;,
      name: &quot;body&quot;,
      type: &quot;text&quot;
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;source&lt;/code&gt; option defines what field Sanity will use to generate the slug. As you can see below, the slug isn&apos;t auto-generated from the &lt;code&gt;title&lt;/code&gt; field, but, instead, will generate when a user clicks on the &quot;generate&quot; button.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1587993069-sanity-slug-sm.png&quot; alt=&quot;Generating a slug in Sanity&quot;&gt;&lt;/p&gt;
&lt;p&gt;Sanity also provides a number of different customization options. For example, the &lt;code&gt;slugify&lt;/code&gt; option lets you specify a custom function for converting the source into a slug and the &lt;code&gt;isUnique&lt;/code&gt; option lets you supply a custom function to determine if the slug value is unique. For more details on those, check out &lt;a href=&quot;https://www.sanity.io/docs/slug-type&quot;&gt;Sanity&apos;s documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Best Slug Practices When Using the Jamstack with a Headless CMS&lt;/h2&gt;
&lt;p&gt;As we&apos;ve noted, the slug is important for readability and for SEO. Having a configurable slug in posts and pages can also be useful when creating Jamstack sites that rely upon a headless CMS. You&apos;ll want your content editors to be able to create pages dynamically within the CMS, which means that paths and slugs should rarely ever be hardcoded in your template code. For example, don&apos;t create an &quot;About Us&quot; page template that looks specifically for the &quot;About Us&quot; content record. Instead, create a standard page template that looks for any content that uses the standard page content model in the CMS and determines the path based upon the slug.&lt;/p&gt;
&lt;p&gt;This also means that you can have different content types with dynamic links that follow the same slug patterns but differ in their presentation. For example, imagine a site with content models for blog, standard pages and landing pages.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The blog post may follow a permalink pattern of &lt;code&gt;/blog/{slug}&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;The standard page may follow a permalink pattern of &lt;code&gt;/{slug}&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;But a landing page may also follow a permalink pattern of &lt;code&gt;/{slug}&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Even though the standard page and landing page may have the same slug pattern, they have different content models and are assigned a different layout. While the slug would have to be unique across both standard and landing pages, your content editors will be free to create pages of differing types without breaking your site.&lt;/p&gt;
&lt;p&gt;Following these patterns will benefit you in the long run to make your site flexible in meeting your long term needs without requiring constant code changes to support new content.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Advanced Hugo Template Tips and Tricks]]></title><description><![CDATA[Hugo's Go-powered templates can accomplish some very powerful templating tasks. In this post, we explore some tips and tricks for building advanced Hugo templates.]]></description><link>https://www.stackbit.com/blog/advanced-hugo-templates/</link><guid isPermaLink="false">https://www.stackbit.com/blog/advanced-hugo-templates/</guid><pubDate>Mon, 20 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;https://gohugo.io/&quot;&gt;Hugo&lt;/a&gt; is one of the most popular static site generators. It is a Go-based tool originally created by Steve Francia (now the Go product lead at Google) around 2013 - so it&apos;s been around for a while by JAMstack standards.&lt;/p&gt;
&lt;p&gt;Hugo uses Go&apos;s &lt;a href=&quot;https://golang.org/pkg/text/template/&quot;&gt;text&lt;/a&gt; and &lt;a href=&quot;https://golang.org/pkg/html/template/&quot;&gt;HTML&lt;/a&gt; templates that underly a lot of the core features you&apos;ll use in every template, but it adds a &lt;a href=&quot;https://gohugo.io/functions/&quot;&gt;long list of functions&lt;/a&gt; that help you accomplish some pretty complex templating tasks. In this article, I&apos;m going to discuss some of the things you may encounter or need as you develop more complex Hugo templates. This is by no means a comprehensive list, but they are things that I&apos;ve personally needed (or needed help with) when developing with Hugo.&lt;/p&gt;
&lt;h2&gt;Scoping&lt;/h2&gt;
&lt;p&gt;One of the things you will encounter regularly in Hugo once you get beyond the basics are issues around the current scope (sometimes also called context). If you&apos;ve done any kind of Hugo templating, you&apos;ll be used to typing the leading &lt;code&gt;.&lt;/code&gt; on a value or even the &lt;code&gt;.&lt;/code&gt; by itself but never thought much about it.&lt;/p&gt;
&lt;p&gt;The initial template scope is a &lt;code&gt;Page&lt;/code&gt;. This is why you can generally access any &lt;a href=&quot;https://gohugo.io/variables/page/&quot;&gt;page variables&lt;/a&gt; without any additional scope. For example, if you want to output the title of a page, you simply put &lt;code&gt;{{ .Title }}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The most common time you&apos;ll encounter scope being changed is when looping over values with &lt;code&gt;range&lt;/code&gt;. For example, if you are looping over pages on a &lt;a href=&quot;https://gohugo.io/templates/lists/&quot;&gt;list template&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;{{ range .Pages }}
&amp;#x3C;li&gt;
    &amp;#x3C;a href=&quot;{{.Permalink}}&quot;&gt;{{.Title}}&amp;#x3C;/a&gt;
&amp;#x3C;/li&gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the above example, &lt;code&gt;.Permalink&lt;/code&gt; and &lt;code&gt;.Title&lt;/code&gt; refer to the current iteration of &lt;code&gt;.Pages&lt;/code&gt; rather than the current page. This can get complex when you have multiple nested loops, but generally it makes sense. However, sometimes it is useful to change the base scope, while other times you are likely to encounter weird issues that are often related to scope. Let&apos;s look at these.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Régis Philibert has a great deep dive into this topic that is worth checking out: &lt;a href=&quot;https://regisphilibert.com/blog/2018/02/hugo-the-scope-the-context-and-the-dot/&quot;&gt;Hugo, the scope, the context and the dot&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;with&lt;/h3&gt;
&lt;p&gt;First, let&apos;s look at changing the current scope using &lt;code&gt;with&lt;/code&gt;. There are times when your code will be much easier to write and to understand if you change the scope. For example, let&apos;s imagine you have social accounts configured in your &lt;a href=&quot;https://gohugo.io/variables/site/&quot;&gt;&lt;code&gt;.Site.Params&lt;/code&gt;&lt;/a&gt;. Rather than write out the full path like &lt;code&gt;.Site.Params.Twitter&lt;/code&gt; for each, you can use &lt;code&gt;with&lt;/code&gt; to set the scope.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;{{ with .Site.Params }}
&amp;#x3C;div class=&quot;social&quot;&gt;
    &amp;#x3C;a href=&quot;https://twitter.com/{{.Twitter}}&quot;&gt;&amp;#x3C;i class=&quot;fa fa-twitter&quot;&gt;&amp;#x3C;/i&gt;&amp;#x3C;/a&gt;
    &amp;#x3C;a href=&quot;https://www.instagram.com/{{.Instagram}}&quot;&gt;&amp;#x3C;i class=&quot;fa fa-instagram&quot;&gt;&amp;#x3C;/i&gt;&amp;#x3C;/a&gt;
    &amp;#x3C;a href=&quot;https://www.youtube.com/channel/{{.Youtube}}&quot;&gt;&amp;#x3C;i class=&quot;fa fa-youtube&quot;&gt;&amp;#x3C;/i&gt;&amp;#x3C;/a&gt;
&amp;#x3C;/div&gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because of the use of &lt;code&gt;with&lt;/code&gt; above, every variable within the block is scoped to &lt;code&gt;.Site.Params&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;with&lt;/code&gt; can also save you from having to write &lt;code&gt;if&lt;/code&gt; statements to see if a parameter exists because the block gets skipped if the variable does not exist. In the below example, if &lt;code&gt;.Site.Params.Twitter&lt;/code&gt; does not exist, the entire block is skipped (note that we then reference the variable as only the &lt;code&gt;.&lt;/code&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;{{ with .Site.Params.Twitter }}
&amp;#x3C;a href=&quot;https://twitter.com/{{.}}&quot;&gt;&amp;#x3C;i class=&quot;fa fa-twitter&quot;&gt;&amp;#x3C;/i&gt;&amp;#x3C;/a&gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case, the block functions similarly to if it were surrounded by &lt;code&gt;{{ if isset .Site.Params &quot;Twitter&quot; }}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I have found &lt;code&gt;with&lt;/code&gt; especially useful in combination with &lt;code&gt;GetPage&lt;/code&gt; to scope output within a block to the loaded page content. We&apos;ll be discussing &lt;code&gt;GetPage&lt;/code&gt; in just a bit.&lt;/p&gt;
&lt;h3&gt;Scratch&lt;/h3&gt;
&lt;p&gt;I have to admit that for the longest time I never understood the need for &lt;a href=&quot;https://gohugo.io/functions/scratch/&quot;&gt;&lt;code&gt;.Scratch&lt;/code&gt;&lt;/a&gt;, but as your templates get more complex, you&apos;ll occasionally run into hard to figure out scope issues. It&apos;s even a little tough to describe scenarios where it is useful but, most often, when I received seemingly unexplainable errors related to undefined variables (ones that I &lt;em&gt;knew&lt;/em&gt; existed), it was usually because I was encountering a scoping issue where &lt;code&gt;.Scratch&lt;/code&gt; is useful.&lt;/p&gt;
&lt;p&gt;Most of these issues involve when you move into a different scope within a block, but then need to access some of the data outside that block (i.e. when in a different scope). Let&apos;s take the following code where, within a &lt;code&gt;with&lt;/code&gt; block I need to set a variable. I should note that this example is purposefully contrived to create the problem in a way to make it clear the type of problems &lt;code&gt;.Scratch&lt;/code&gt; solves.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;{{ with .Site.Params }} {{ $greeting := &quot;hello&quot; }} {{ end }} {{ $greeting }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will result in an error &lt;code&gt;undefined variable &quot;$greeting&quot;&lt;/code&gt; even though we can see that it is being set. However, we can use &lt;code&gt;.Scratch&lt;/code&gt; to set and get the variable, bypassing the scoping issues (note that I am using the &lt;code&gt;$&lt;/code&gt; to get around the fact that the block is scoped to &lt;code&gt;.Site.Params&lt;/code&gt; and thus does not have &lt;code&gt;.Scratch&lt;/code&gt; in its scope).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;{{ with .Site.Params }} {{ $.Scratch.Set &quot;greeting&quot; &quot;Hello&quot; }} {{ end }} {{ .Scratch.Get &quot;greeting&quot; }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As I said, this is an intentionally contrived example and it is worth noting that it can actually be solved by first defining the variable outside the &lt;code&gt;with&lt;/code&gt; block so that it is declared within the same scope.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;{{ $greeting := &quot;&quot; }} {{ with .Site.Params }} {{ $greeting = &quot;Hello&quot; }} {{ end }} {{ $greeting }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Still, as your templates get more complex you may into these sorts of issues in various places and it&apos;s good to be aware that &lt;code&gt;.Scratch&lt;/code&gt; might be useful.&lt;/p&gt;
&lt;h2&gt;GetPage&lt;/h2&gt;
&lt;p&gt;Sometimes you need to load the contents of another page on a template. For example, a blog post template may require author information that is contained in a page in the &lt;code&gt;/authors&lt;/code&gt; directory. I could load my author information that exists at &lt;code&gt;/authors/brian-rinaldi.md&lt;/code&gt; as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;{{ with .GetPage &quot;/authors/brian-rinaldi&quot; }} {{.Title}} {{end}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Many times you won&apos;t be loading a hardcoded file path. For example, if you are &lt;a href=&quot;/blog/git-based-cms-relationships/&quot;&gt;managing relationships&lt;/a&gt; between content items, you might have &lt;code&gt;author&lt;/code&gt; as a frontmatter attribute on a &lt;code&gt;post&lt;/code&gt;. For example, I may have something like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;author: brian-rinaldi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case, I want to assemble the path that &lt;code&gt;GetPage&lt;/code&gt; will load dynamically. If we had the full path, we could just load it as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;{{ with .GetPage .Params.author }} {{.Title}} {{end}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What if we need to dynamically generate the URL? In this case, I&apos;ve found that using the &lt;a href=&quot;https://gohugo.io/functions/print/&quot;&gt;&lt;code&gt;print&lt;/code&gt; function&lt;/a&gt; helps when assembling the string.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;{{ $author := print &quot;/authors/&quot; .Params.author }} {{ with .GetPage $author }} {{.Title}} {{end}}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Complex Querying&lt;/h2&gt;
&lt;p&gt;If you&apos;ve done any templating in Hugo, you&apos;ve probably used the &lt;a href=&quot;https://gohugo.io/functions/where/&quot;&gt;&lt;code&gt;where&lt;/code&gt; function&lt;/a&gt; to filter an array of results. For example, if I wanted only pages in the blog section, I might do something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;{{ range where .Site.Pages &quot;Section&quot; &quot;blog&quot; }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But one of the amazing things about the &lt;code&gt;where&lt;/code&gt; statement is the ability to use it to filter an array you&apos;ve already filtered and even combine it with other filters to do some pretty complex things. For example, in the following code, I am pulling pages in an &quot;events&quot; section, ordering them by descending date, then getting only those whose frontmatter indicate they are featured. I am skipping the first two results using the &lt;a href=&quot;https://gohugo.io/functions/after/&quot;&gt;&lt;code&gt;after&lt;/code&gt; function&lt;/a&gt; and then randomizing the order using the &lt;a href=&quot;https://gohugo.io/functions/shuffle/&quot;&gt;&lt;code&gt;shuffle&lt;/code&gt; function&lt;/a&gt; (of course, the random order only happens at build time).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;{{ $remaining := shuffle (after 2 (where (where .Site.Pages.ByDate.Reverse &quot;Section&quot; &quot;events&quot;) &quot;.Params.featured&quot; true)) }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&apos;s look at the code written another way that achieves the same result but makes it clearer what is going on:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;{{ $remaining := where .Site.Pages.ByDate.Reverse &quot;Section&quot; &quot;events&quot; }} {{ $remaining = where $remaining &quot;.Params.featured&quot; true }} {{
$remaining = after 2 $remaining }} {{ $remaining = shuffle $remaining }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By layering &lt;code&gt;where&lt;/code&gt; queries and combining them with other filtering and ordering functions, you can achieve very complex results.&lt;/p&gt;
&lt;h3&gt;Intersect&lt;/h3&gt;
&lt;p&gt;One way to perform a complex query of results is using the &lt;a href=&quot;https://gohugo.io/functions/intersect/&quot;&gt;&lt;code&gt;intersect&lt;/code&gt; function&lt;/a&gt;, which will find results that overlap. You can use &lt;code&gt;intersect&lt;/code&gt; as a function or you can use it within a query. For example, let&apos;s say I have pages with frontmatter that indicates which characters it discusses like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;titans:
    - Robin
    - Starfire
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What if I want to get any pages that have one of either &quot;Starfire&quot; or &quot;Raven&quot;?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;{{ $titans := where .Site.RegularPages &quot;.Params.titans&quot; &quot;intersect&quot; (slice &quot;Starfire&quot; &quot;Raven&quot;) }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case, the results do not exclude pages that have other characters listed so long as they have at least one matching result (i.e. either &quot;Starfire&quot; or &quot;Raven&quot;). For purposes of example, I&apos;ve hardcoded the values I want to look for, but in most cases you&apos;d be basing this on a variable. For instance, perhaps I want to show related pages to the current page that discuss the same characters (while excluding the current page from the result):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;{{ if isset .Params &quot;titans&quot; }} {{ $titans := where (where .Site.RegularPages &quot;.Params.titans&quot; &quot;intersect&quot; .Params.Titans) &quot;.Permalink&quot; &quot;ne&quot;
.Permalink }}
&amp;#x3C;ul&gt;
    {{ range $titans }}
    &amp;#x3C;li&gt;&amp;#x3C;a href=&quot;{{.Permalink}}&quot;&gt;{{.Title }}&amp;#x3C;/a&gt;&amp;#x3C;/li&gt;
    {{ end }}
&amp;#x3C;/ul&gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Index&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;https://gohugo.io/functions/index-function/&quot;&gt;&lt;code&gt;index&lt;/code&gt; function&lt;/a&gt; is most commonly useful when you need to get a specific object in an array of data. For example, let&apos;s take the following data set:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;---
Robin:
    real_name: Dick Grayson
    species: human
Raven:
    real_name: Rachel Roth
    species: half-Azarathian/Half-Demon
Starfire:
    real_name: Koriand&apos;r
    species: Tamaranean
Beast Boy:
    real_name: Garfield Mark Logan
    species: Metahuman
Cyborg:
    real_name: Victor Stone
    species: Cyborg
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I could access the object for Raven via &lt;code&gt;.Site.Data.Titans.Raven&lt;/code&gt;, but what if I needed to get that dynamically via a variable or frontmatter page parameter? In this case, &lt;code&gt;index&lt;/code&gt; is very helpful:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;{{ $character := index .Site.Data.Titans .Params.Character }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, &lt;code&gt;index&lt;/code&gt; can also be useful in cases where you need to pull a specific index from a data structure. For example, in the following case I need the object in the first record of a query result:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;{{ $events := where .Site.RegularPages &quot;.Params.sessions&quot; &quot;intersect&quot; $eventArr }} {{ $event := index $events 0 }}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Where to Go From Here&lt;/h2&gt;
&lt;p&gt;Hopefully you find these tips helpful. Obviously, there&apos;s &lt;em&gt;a lot&lt;/em&gt; that I didn&apos;t cover. The first place to check for help is the &lt;a href=&quot;https://gohugo.io/documentation/&quot;&gt;Hugo docs&lt;/a&gt;, which are very well written and comprehensive - always including a relevant code sample. I definitely recommend following &lt;a href=&quot;https://regisphilibert.com/blog/&quot;&gt;Régis Philibert&apos;s blog&lt;/a&gt; as he covers a lot of beginner and advanced Hugo topics (and thanks to him for his review of this post).&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Managing Content Relationships in Git-based Headless CMS]]></title><description><![CDATA[Relationships between content items are key to developing a good content model. This post explores how to handle these relationships in a JAMstack site that uses a git-based content management system.]]></description><link>https://www.stackbit.com/blog/git-based-cms-relationships/</link><guid isPermaLink="false">https://www.stackbit.com/blog/git-based-cms-relationships/</guid><pubDate>Mon, 13 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Relationships are a key aspect of modeling content. They help represent complex content models without duplicating data, making it more maintainable, while also promoting the reuse of content. Relationships are a pretty standard part of representing content in a relational databases or in API-based headless CMS, which generally represent content that a manner similar to a database. However, git-based headless CMS store their content in files - generally a combination of Markdown, YAML and JSON - so representing relationships isn&apos;t as straightforward.&lt;/p&gt;
&lt;p&gt;In this post, I will explain how relationships are handled when content and data are held in files. We&apos;ll look at how this can be done on your own, using files without a CMS, as well as using popular git-based headless CMS options like Forestry and Netlify CMS.&lt;/p&gt;
&lt;h2&gt;Why Relationships?&lt;/h2&gt;
&lt;p&gt;Let&apos;s imagine a simple blog site that has multiple authors. The post data model might contain the following data:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Title&lt;/li&gt;
&lt;li&gt;Date Posted&lt;/li&gt;
&lt;li&gt;Description&lt;/li&gt;
&lt;li&gt;Body&lt;/li&gt;
&lt;li&gt;Author&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In most cases, &lt;code&gt;author&lt;/code&gt; will represent more than just a string with the name. However, we want to include a photo, a bio, social media profile links with our post. So let&apos;s update the content model:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Title&lt;/li&gt;
&lt;li&gt;Date Posted&lt;/li&gt;
&lt;li&gt;Description&lt;/li&gt;
&lt;li&gt;Body&lt;/li&gt;
&lt;li&gt;Author Name&lt;/li&gt;
&lt;li&gt;Author Photo&lt;/li&gt;
&lt;li&gt;Author Bio&lt;/li&gt;
&lt;li&gt;Author Twitter&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This works, but what happens when the author has 10 posts...or 100? The first problem is I will need to reenter the author information in each entry. The second problem is that I will need to update every entry each time any of this information changes. The third problem is that I want to display authors on a &quot;contributors&quot; page and there&apos;s no easy way to get just a list of authors.&lt;/p&gt;
&lt;p&gt;This is where relationships come in. Instead of putting the information in each entry, I would create an author content type:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Name&lt;/li&gt;
&lt;li&gt;Photo&lt;/li&gt;
&lt;li&gt;Bio&lt;/li&gt;
&lt;li&gt;Twitter&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And then the &lt;code&gt;author&lt;/code&gt; field of the post content type would actually be a reference to the author record. In a database, this might be a foreign key reference to the ID of the author (i.e. the author record&apos;s primary key). But what if the author is just an entry in a JSON file or even just Markdown file with frontmatter?&lt;/p&gt;
&lt;h2&gt;Manually Managing Relationships in File-based Content&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;View the code for this example at &lt;a href=&quot;https://github.com/remotesynth/content-relationships-manual&quot;&gt;https://github.com/remotesynth/content-relationships-manual&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;First, let&apos;s look at how you might define these sorts of relationships in a site where the content is manually edited without a CMS. My example will be a simple blog in which I share non-controversial opinions about Star Wars 😉. Below is my new blog in all it&apos;s beautifully designed glory!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1586786161-star-wars-blog-sm.png&quot; alt=&quot;sample star wars blog&quot;&gt;&lt;/p&gt;
&lt;p&gt;When you drill into each page, we display not just the post content and author, but a list of related posts.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1586786192-star-wars-blog-single-sm.png&quot; alt=&quot;sample star wars blog&quot;&gt;&lt;/p&gt;
&lt;p&gt;To achieve this, the blog has two types of content: posts and authors. Each post will have only one author but each post can also be related to any number of other posts. Here is a sample author page which only has their name and bio as the body:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;---
title: Brian Rinaldi
---
Love Star Wars but not a &quot;super fan.&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here&apos;s a sample blog post:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;---
title: The Last Jedi Was Good
date: 2020-04-01
author: brian-rinaldi
related_posts:
    - return-of-skywalker-awful
    - han-shot-first
---
Did it have flaws? Yes. Was it light years better than RoS? Absolutely.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I chose to manage the references to the related content objects via a file name. So &lt;code&gt;brian-rinaldi&lt;/code&gt; refers to &lt;code&gt;/authors/brian-rinaldi.md&lt;/code&gt; and &lt;code&gt;han-shot-first&lt;/code&gt; refers to &lt;code&gt;/posts/han-shot-first.md&lt;/code&gt;. Let&apos;s look at an example of how to display this data on the post detail page. In this example, I am using Hugo, but you might use similar logic in whatever static site generator (SSG) you choose.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;#x3C;h2&gt;{{ .Title }}&amp;#x3C;/h2&gt;
{{ $author_page := print &quot;/authors/&quot; .Params.Author }}
{{ with .Site.GetPage $author_page }}
    &amp;#x3C;p&gt;&amp;#x3C;em&gt;By {{.Title}}&amp;#x3C;/em&gt;&amp;#x3C;/p&gt;
{{ end }}
{{.Content}}

&amp;#x3C;h4&gt;Related Posts&amp;#x3C;/h4&gt;

&amp;#x3C;ul&gt;
{{ range $postname := .Params.Related_posts }}
    {{ $post_page := print &quot;/posts/&quot; $postname }}
    {{ with $.GetPage $post_page }}
        &amp;#x3C;li&gt;&amp;#x3C;a href=&quot;{{.Permalink}}&quot;&gt;{{ .Title }}&amp;#x3C;/a&gt;&amp;#x3C;/li&gt;
    {{ end }}
{{ end }}
&amp;#x3C;/ul&gt;
&amp;#x3C;/html&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First I assemble the URL of the author page and then use &lt;code&gt;.Site.GetPage&lt;/code&gt; to load it. The &lt;code&gt;with&lt;/code&gt; block scopes the content within to the page, thus &lt;code&gt;.Title&lt;/code&gt; outputs the title of the author content. I do a similar thing with related posts, except that instead of a single relation, I am looping over an array of related items (the use of &lt;code&gt;$.GetPage&lt;/code&gt; is just to work around scoping issues).&lt;/p&gt;
&lt;p&gt;This works, but it&apos;s likely in most cases you&apos;ll be managing this sort of content via a CMS, so let&apos;s look at how to do this. Note that our examples will focus on relationships between page-based content, though many of the same principles will apply when a relationship includes a data file.&lt;/p&gt;
&lt;h2&gt;Managing Relationships in Netlify CMS&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;View the code for this example at &lt;a href=&quot;https://github.com/remotesynth/content-relationships-netlifycms&quot;&gt;https://github.com/remotesynth/content-relationships-netlifycms&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Let&apos;s first look at how to manage these sorts of relationships in &lt;a href=&quot;https://www.netlifycms.org/&quot;&gt;Netlify CMS&lt;/a&gt;. Netlify CMS is an open source, git-based CMS. It obviously can be deployed to Netlify, but this is not a requirement. Let&apos;s look at how we&apos;d set up the example above to be using Netlify CMS. I will focus on defining and managing the relationships rather than the nuts and bolts of getting Netlify CMS up and running.&lt;/p&gt;
&lt;p&gt;Netlify CMS defines its content model via a &lt;code&gt;config.yaml&lt;/code&gt; configuration file placed within the &lt;code&gt;admin&lt;/code&gt; directory. For this site, we only need two collections: one for the posts and one for the authors. Here are the complete collections from my configuration.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;collections:
    - name: post
      label: Posts
      folder: content/posts
      create: true
      slug: &apos;{{slug}}&apos;
      fields:
          - widget: string
            name: title
            label: Title
            required: true
            hint: &gt;-
                The title of the blog post
          - widget: date
            name: date
            label: Date
            required: true
            hint: &gt;-
                The date the post is published
          - widget: string
            name: slug
            label: Slug
            required: true
            hint: &gt;-
                The post URL (do not include folder or file extension)
          - widget: relation
            name: author
            label: Author
            required: true
            hint: &gt;-
                The author of the post
            collection: author
            valueField: slug
            searchFields: [&apos;title&apos;]
            displayFields: [&apos;title&apos;]
          - widget: relation
            name: related_posts
            label: Related Posts
            required: false
            multiple: true
            hint: &gt;-
                Other related posts
            collection: post
            valueField: slug
            searchFields: [&apos;title&apos;]
            displayFields: [&apos;title&apos;]
          - widget: markdown
            name: body
            label: Content
            required: true
            hint: Page content
    - name: author
      label: Authors
      folder: content/authors
      create: true
      slug: &apos;{{slug}}&apos;
      fields:
          - widget: string
            name: title
            label: Name
            required: true
            hint: &gt;-
                The name of the author
          - widget: string
            name: slug
            label: Slug
            required: true
            hint: &gt;-
                The post URL (do not include folder or file extension)
          - widget: markdown
            name: body
            label: Content
            required: true
            hint: Author bio
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The key pieces of this, from a relationships point of view, are the &lt;code&gt;author&lt;/code&gt; and &lt;code&gt;related_posts&lt;/code&gt; fields. These use the &lt;a href=&quot;https://www.netlifycms.org/docs/widgets/#relation&quot;&gt;relation widget type&lt;/a&gt;, which allows users to select a reference to another collection via the CMS user interface. Here&apos;s what that looks like - notice the difference between &lt;code&gt;author&lt;/code&gt;, which is a single value reference, and &lt;code&gt;related_posts&lt;/code&gt;, which has &lt;code&gt;multiple: true&lt;/code&gt; thereby allowing multiple reference selections.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1586786241-netlifycms-ui-sm.png&quot; alt=&quot;The Netlify CMS relationships UI&quot;&gt;&lt;/p&gt;
&lt;p&gt;As you can see from the image above, the user can search for related items either by pulling the dropdown or by typing and filtering. The multiple select is smart enough to only show options that have not yet been selected. The configuration has different options for the field in the related content that it performs the search on (&lt;code&gt;searchFields&lt;/code&gt;) and the fields that it displays in the UI (&lt;code&gt;displayFields&lt;/code&gt;) - both allow for multiple fields to be defined. In my case, I am using just the &lt;code&gt;title&lt;/code&gt; field for both authors and posts.&lt;/p&gt;
&lt;p&gt;So far, that&apos;s pretty simple, but the &lt;code&gt;valueField&lt;/code&gt; leads us into into the trickier part. In the manual solution above, we used the slug of the file to link the objects. However, Netlify CMS does not allow you to select the filename or slug for the &lt;code&gt;valueField&lt;/code&gt; - it must be a field defined in the frontmatter.&lt;/p&gt;
&lt;p&gt;If you were paying very close attention, you may have noticed an additional field named &lt;code&gt;slug&lt;/code&gt; in both the &lt;code&gt;post&lt;/code&gt; and &lt;code&gt;author&lt;/code&gt; content types defined in the &lt;code&gt;config.yaml&lt;/code&gt;. This is a string containing the posts slug to be used by the SSG but also by Netlify CMS to manage the relationship value placed into the frontmatter. In doing so, the exact same Hugo code used to load pages will still work.&lt;/p&gt;
&lt;p&gt;The issue with this is, as you can imagine, that it is very fragile. First, my code loading the page assumes that the slug and filename match. Since &lt;code&gt;slug&lt;/code&gt; is just a textfield in the CMS, it is prone to easy typos. I could change the code to search for posts based on the &lt;code&gt;title&lt;/code&gt; value and then load the page using &lt;code&gt;GetPage&lt;/code&gt; on the result, but regardless it is still prone to typos and mistakes.&lt;/p&gt;
&lt;h2&gt;Managing Relationships in Forestry&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;View the code for this example at &lt;a href=&quot;https://github.com/remotesynth/content-relationships-forestry&quot;&gt;https://github.com/remotesynth/content-relationships-forestry&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://forestry.io/&quot;&gt;Forestry&lt;/a&gt; is another popular, commercial git-based CMS option. The basic setup of Forestry is simple. I can import the manual relationships project I created above and choose Hugo as my SSG and Forestry will automatically look at the content and map out the data models in its system for you, placing all of these settings in a &lt;code&gt;.forestry&lt;/code&gt; directory in your project. Below is the default editing for a post.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1586786277-forestry-defaults-sm.png&quot; alt=&quot;default editing in Forestry&quot;&gt;&lt;/p&gt;
&lt;p&gt;As you can see, while Forestry is extremely smart in recognizing fields, it isn&apos;t able automatically see that the &lt;code&gt;author&lt;/code&gt; and &lt;code&gt;related_posts&lt;/code&gt; represent relationships. Instead, &lt;code&gt;author&lt;/code&gt; is just a string value and &lt;code&gt;related_posts&lt;/code&gt; is an array of string values. However, we can override these - let&apos;s see how.&lt;/p&gt;
&lt;p&gt;To start with, I can open one of the posts and, from the menu icon in the top-right-corner, choose &quot;Create Template&quot; to create a &lt;a href=&quot;https://forestry.io/docs/settings/front-matter-templates/&quot;&gt;frontmatter template&lt;/a&gt; based upon the content model.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1586786310-forestry-create-template1.png&quot; alt=&quot;create a new frontmatter template&quot;&gt;&lt;/p&gt;
&lt;p&gt;I&apos;ll name my template &quot;Posts&quot;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1586786351-forestry-create-template2.png&quot; alt=&quot;name the frontmatter template&quot;&gt;&lt;/p&gt;
&lt;p&gt;This will generate a frontmatter template as shown below, which I can edit via the UI.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1586786380-forestry-create-template3.png&quot; alt=&quot;the generated template&quot;&gt;&lt;/p&gt;
&lt;p&gt;However, I need to make some changes that can&apos;t be made via the UI, so I&apos;ll need to pull the code down and edit it. Once I&apos;ve fetched the code from GitHub, the generated file can be found at &lt;code&gt;.forestry/font_matter/templates/posts.yml&lt;/code&gt;. It has the following contents:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;---
label: Posts
hide_body: false
fields:
    - type: text
      name: title
      label: title
    - type: datetime
      name: date
      label: date
    - type: text
      name: author
      label: author
    - type: list
      name: related_posts
      label: related_posts
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This file needs a little help. Let&apos;s add a &lt;code&gt;config&lt;/code&gt; option to each that contains &lt;code&gt;required: true&lt;/code&gt; to &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;date&lt;/code&gt; and &lt;code&gt;author&lt;/code&gt;. For example, our title will look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;- type: text
  name: title
  label: title
  config:
      required: true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, I need to edit the &lt;code&gt;author&lt;/code&gt; type. Rather than &lt;code&gt;type: text&lt;/code&gt; this should be &lt;a href=&quot;https://forestry.io/docs/settings/fields/select/&quot;&gt;&lt;code&gt;type: select&lt;/code&gt;&lt;/a&gt; so that it will create a drop down of options. Then within the &lt;code&gt;config&lt;/code&gt; I define a &lt;code&gt;source&lt;/code&gt; of type &lt;code&gt;pages&lt;/code&gt; that pulls from the &lt;code&gt;authors&lt;/code&gt; section as shown below:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;- type: select
  name: author
  label: author
  config:
      required: true
      source:
          type: pages
          section: authors
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;related_posts&lt;/code&gt; is already using the &lt;a href=&quot;https://forestry.io/docs/settings/fields/#sortable-list-field&quot;&gt;sortable list field type&lt;/a&gt;, which is what I need. However, I need to configure it to use a select-style entry rather than text and to pull that select from the list of posts. The configuration for this looks similar to the code above.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;- type: list
  name: related_posts
  label: related_posts
  config:
      use_select: true
      source:
          type: pages
          section: posts
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The last step is to force posts to use this template by modifying the &lt;code&gt;.forestry/settings.yml&lt;/code&gt; file. Under the section for &lt;code&gt;posts&lt;/code&gt;, I&apos;ll add the &lt;code&gt;template&lt;/code&gt; setting as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;- type: directory
  path: content/posts
  label: Posts
  create: all
  match: &apos;**/*&apos;
  templates:
      - posts
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once I check everything back into GitHub, I can see that my dropdowns are working properly.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1586786464-forestry-editing.png&quot; alt=&quot;editing a post in Forestry&quot;&gt;&lt;/p&gt;
&lt;p&gt;You may notice that my existing references to authors and related posts have now disappeared or show &quot;Invalid Reference.&quot; This is because Forestry adds the full relative path to each related file rather than just the slug. I can either edit this manually for each post via the UI or in the code. For example, here&apos;s the updated frontmatter for one of my posts:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;title: Han Shot First
date: 2020-03-31
author: authors/brian-rinaldi.md
related_posts:
    - posts/last-jedi-was-good.md
    - posts/return-of-skywalker-awful.md
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;The Problem with Relationships in Git-based CMS&lt;/h2&gt;
&lt;p&gt;The main issue with these solutions is that they are very brittle. Some of them require the user to manually enter the proper slug, which is prone to typos and mistakes. However, even in the best case scenario where the CMS helps to ensure the validity of the data, the content can be easily overridden as it is just text-based data in a flat file. All it takes is someone manually editing a file or even deleting it for it to potentially break.&lt;/p&gt;
&lt;p&gt;Because of the file-based nature of content in a git-based CMS, there really is no way to guarantee &lt;a href=&quot;https://en.wikipedia.org/wiki/Referential_integrity&quot;&gt;referential integrity&lt;/a&gt;. Thus, it is important that your templates account for this so that a broken relationship does not cause the build to fail. Be sure to verify whether a referenced page, data file or data value exists before using it.&lt;/p&gt;
&lt;h2&gt;Where to Go From Here&lt;/h2&gt;
&lt;p&gt;While it may be impossible to guarantee the integrity of relationships in file-based content, relationships are still critical to building an extensible and maintainable content model. Regardless of your git-based CMS solution, there are tools to help you, so definitely reference the documentation when building your content schema. In addition, some of the problems I discussed in the prior section are very similar to the ones I discussed in my prior post about &lt;a href=&quot;https://www.stackbit.com/blog/jamstack-api-based-cms/&quot;&gt;best practices for the JAMstack with API-based headless CMS&lt;/a&gt;, where I discuss things like handling invalid content (including linked objects) and defensive coding strategies when building templates.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Building Documentation Sites with the JAMstack]]></title><description><![CDATA[Documentation sites are a longstanding and common use case for the JAMstack. In this post we explore some of the options available to you for developing them and show an example of how to build one.]]></description><link>https://www.stackbit.com/blog/jamstack-documentation-sites/</link><guid isPermaLink="false">https://www.stackbit.com/blog/jamstack-documentation-sites/</guid><pubDate>Tue, 07 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;One of the earliest use cases for static site generators (SSGs), which are a key ingredient in the JAMstack, was for documentation sites and particularly technical documentation. Certain special factors led to SSGs being a good solution for documentation sites, even in the early days where they were largely just tools for &quot;static sites.&quot; These include the ability to version file-based content easily via source control, the ability to accept contributions and corrections via processes like a GitHub pull request, and the fact that, in many cases, the authors were technically adept with these sorts of development tools.&lt;/p&gt;
&lt;p&gt;The good news is that both the tooling and the ecosystem have improved tremendously in recent years to where the JAMstack is likely a perfect fit for just about any kind of documentation site. The prior benefits still apply, but are complimented by an array of tools and services that make the content easier to edit and contributions easier to accept - even from folks who may be unfamiliar with the tools. In this post, we&apos;ll explore some of the options available to you for developing documentation sites using the JAMstack and show an example of how to build one.&lt;/p&gt;
&lt;h2&gt;Considerations for a Docs Site&lt;/h2&gt;
&lt;p&gt;First, let&apos;s think about what type of considerations are typical for a documentation site:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;How big is the site and how often will it update?&lt;/strong&gt; If you are documenting a small library, your site may be no more than a few pages or even a single page. However, if you are documenting a large project or product, your documentation site is likely to have a lot of pages, even if it doesn&apos;t start out that way. The build speed can become a factor if the site is particularly large. However, most documentation sites update fairly infrequently, which can make the build speed a less critical consideration.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Who is writing the content? Will you allow external contributions?&lt;/strong&gt; There are a variety of possibilities here that can impact how you build your documentation site. Here are a few examples:
_ Written by a technical internal team.
_ API documentation that is largely generated.
_ Written by non-technical internal authors.
_ Written with the help and contributions of external authors. * A combination of any of the above.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While the first consideration can influence how you evaluate your SSG options (we&apos;ll discuss some in just a bit), the second impacts the tools you choose for managing and editing content. For example, an API-based headless CMS may be a great solution for documentation that is largely maintained internally, a git-based solution may be preferable if you intend to allow editing by external users - and which specific CMS of either type you choose can depend partly on the technical level of your contributors.&lt;/p&gt;
&lt;h2&gt;SSG Options for Documentation&lt;/h2&gt;
&lt;p&gt;Let me be clear up front: any SSG should work for a documentation site. That being said, there are actually a number of SSGs that are specifically geared towards documentation.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/docsifyjs/docsify&quot;&gt;Docsify&lt;/a&gt; - This is a Javascript-based SSG that serves documentation as a single-page application that can support server-side rendering (SSR).&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/slatedocs/slate&quot;&gt;Slate&lt;/a&gt; - This is a Ruby-based solution (that uses the Middleman SSG under the covers) and is geared specifically towards API docs.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mkdocs/mkdocs&quot;&gt;MkDocs&lt;/a&gt; A Python-based solution that emphasizes its speed and themes (some of which can be &lt;a href=&quot;https://jamstackthemes.dev/#ssg=mkdocs&quot;&gt;found here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While it isn&apos;t a documentation-specific solution, &lt;a href=&quot;https://gohugo.io/&quot;&gt;Hugo&lt;/a&gt; is a common solution because of its emphasis on build speed. It has a significant number of &lt;a href=&quot;https://jamstackthemes.dev/#ssg=hugo&quot;&gt;community themes&lt;/a&gt; with designs and features targeted to documentation sites including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vantagedesign/ace-documentation&quot;&gt;Ace Documentation&lt;/a&gt; is a Bootstrap-based docs theme.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bep/docuapi&quot;&gt;DocuAPI&lt;/a&gt; is geared towards multilingual API documentation.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/stackbithq/stackbit-theme-libris&quot;&gt;Libris&lt;/a&gt; is a theme created by Stackbit, which means you can connect it to a CMS and deploy it automatically using the &lt;a href=&quot;https://app.stackbit.com/create&quot;&gt;site builder&lt;/a&gt;. This also means it can be used with Jekyll or Gatsby.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/themefisher/dot&quot;&gt;Dot&lt;/a&gt; is aimed at documentation in the form of a support center or knowledge base.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/alex-shpak/hugo-book&quot;&gt;Hugo Book&lt;/a&gt; is a minimalist book-style theme with features like built-in search.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/thingsym/hugo-theme-techdoc&quot;&gt;Techdoc&lt;/a&gt; is also a minimalist book-style theme.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jsnjack/kraiklyn&quot;&gt;Kraiklyn&lt;/a&gt; is designed for creating single-page documentation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One of the benefits of Hugo for documentation sites besides the build speed is that it does not rely on a front-end framework. This is not meant to criticize framework-based SSGs, just to note that a front-end framework may add unnecessary weight to a site that, in most cases, is simply geared towards serving text content. Other popular, non-framework-based alternatives for SSGs include &lt;a href=&quot;https://www.11ty.dev/&quot;&gt;Eleventy&lt;/a&gt; and &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;The Example Site&lt;/h2&gt;
&lt;p&gt;Now that we&apos;ve covered a lot of the ecosystem of tools and themes that are available for you to develop your JAMstack documentation site, let&apos;s look at an example. The example site is simple documentation (of sorts) that teaches people how to be good teammates on the battle royale game Apex Legends. It&apos;s a fun game, but, because it is a squad-based game, playing with &quot;randos&quot; can be...ummm...let&apos;s say challenging (any of you who&apos;ve played the game probably know what I&apos;m talking about).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1586182815-sample-site.png&quot; alt=&quot;The sample documentation site&quot;&gt;&lt;/p&gt;
&lt;p&gt;Here were the basic requirements for this example site:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This is a standard documentation site and not API-documentation or a knowledge base type of site.&lt;/li&gt;
&lt;li&gt;The content will be stored in git as this gives it access to broad collaboration tools that can be open to the public.&lt;/li&gt;
&lt;li&gt;However, users should be able to edit the site without needing to go through a manual fork/pull request process by using an open authoring workflow that gives them access to the CMS.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To achieve these goals, I chose the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use Hugo as the SSG. While this site won&apos;t have a lot of pages to take advantage of the build speed, its content is simple enough that doesn&apos;t require a frontend framework and, personally, I am comfortable with Hugo.&lt;/li&gt;
&lt;li&gt;Use a fork of Hugo Book as the documentation layout (note that this differs from the theme&apos;s documentation for the theme which suggests adding it as a submodule).&lt;/li&gt;
&lt;li&gt;Use the &lt;a href=&quot;https://www.netlifycms.org/&quot;&gt;Netlify CMS&lt;/a&gt; beta. Netlify CMS is an open source, git-based CMS that includes &lt;a href=&quot;https://www.netlifycms.org/docs/open-authoring/&quot;&gt;open authoring&lt;/a&gt; capabilities.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can view the site at &lt;a href=&quot;https://apexetiquette.netlify.com/&quot;&gt;https://apexetiquette.netlify.com/&lt;/a&gt; or grab the code at &lt;a href=&quot;https://github.com/remotesynth/apexetiquette&quot;&gt;https://github.com/remotesynth/apexetiquette&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Creating the Example Site&lt;/h2&gt;
&lt;p&gt;Let&apos;s walk through the steps used to create this documentation example.&lt;/p&gt;
&lt;h3&gt;Creating the site with Hugo and Hugo Book&lt;/h3&gt;
&lt;p&gt;The first thing to do is install Hugo if you don&apos;t have it already. You can follow the &lt;a href=&quot;https://gohugo.io/getting-started/installing/&quot;&gt;installation instructions here&lt;/a&gt; for whichever platform you are working on.&lt;/p&gt;
&lt;p&gt;Once Hugo is installed, we need to create a new site (note that &lt;code&gt;apexetiquette&lt;/code&gt; is the name of my project):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;hugo new site apexetiquette
cd apexetiquette
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we need to install the Hugo Book theme. The docs for Hugo Book recommend that you install it as a &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Tools-Submodules&quot;&gt;Git Submodule&lt;/a&gt; but that presents some limitations as we will need to make some changes to the templates for open authoring later. Instead, let&apos;s just clone the repo into our themes folder.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;mkdir themes
cd themes
git clone https://github.com/alex-shpak/hugo-book
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we need to modify our Hugo site to use the new theme. Open the &lt;code&gt;config.toml&lt;/code&gt; and add a line for the theme (you can also edit the title at this point as well).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-toml&quot;&gt;baseURL = &quot;https://apexetiquette.netlify.com/&quot;
languageCode = &quot;en-us&quot;
title = &quot;Apex Etiquette&quot;
theme = &quot;hugo-book&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hugo Book has a number of &lt;a href=&quot;https://github.com/alex-shpak/hugo-book#configuration&quot;&gt;configuration options&lt;/a&gt;. Let&apos;s just add the following which enables the built-in site search capability.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-toml&quot;&gt;[params]
    BookSearch = true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point you&apos;ll have a site but no docs. First create a home page as &lt;code&gt;/content/_index.md&lt;/code&gt;. Then create the &lt;code&gt;docs&lt;/code&gt; folder under &lt;code&gt;content&lt;/code&gt; (i.e. &lt;code&gt;/content/docs&lt;/code&gt; and place your documentation pages there. The only important frontmatter on your posts are &lt;code&gt;title&lt;/code&gt;, which determines what the navigation text will be, and &lt;code&gt;weight&lt;/code&gt;, which determines the order the pages are displayed in the doc navigation. There are a number of other &lt;a href=&quot;https://github.com/alex-shpak/hugo-book#page-configuration&quot;&gt;page configuration options&lt;/a&gt; available with Hugo Book as well.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;---
title: Revive &amp;#x26; Respawn Etiquette
weight: 3
---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you&apos;ve populated some content, you can use &lt;code&gt;hugo serve&lt;/code&gt; to launch the site. However, I suggest that you use the &lt;a href=&quot;https://docs.netlify.com/cli/get-started/&quot;&gt;Netlify CLI&lt;/a&gt; and &lt;code&gt;netlify dev&lt;/code&gt; as this will make our Netlify CMS testing easier.&lt;/p&gt;
&lt;p&gt;One thing worth pointing out is that, during my tests, the Hugo Book template often did not add new pages or detect frontmatter changes in my docs section that affected the navigation without restarting the server. This could have been something particular with my setup but I wanted to mention in case anyone else gets frustrated when not seeing their changes reflected in the site.&lt;/p&gt;
&lt;h3&gt;Integrating Netlify CMS&lt;/h3&gt;
&lt;p&gt;Now that we have content and a functioning site, we need to enable it to be edited with Netlify CMS. The first step is to create the admin and add the necessary files. First, create a folder named &lt;code&gt;admin&lt;/code&gt; - since this is Hugo, it needs to be placed under the &lt;code&gt;static&lt;/code&gt; directory (i.e. &lt;code&gt;/static/admin&lt;/code&gt;) as we just want it to be copied to the build as is.&lt;/p&gt;
&lt;p&gt;Next, add two files to the &lt;code&gt;admin&lt;/code&gt; folder: &lt;code&gt;index.html&lt;/code&gt; and &lt;code&gt;config.yml&lt;/code&gt;. The &lt;code&gt;index.html&lt;/code&gt; file will load the script that runs the CMS admin. We&apos;ll use the same code supplied &lt;a href=&quot;https://www.netlifycms.org/docs/add-to-your-site/&quot;&gt;by the docs&lt;/a&gt; (Note: we no longer require the beta version as the main version includes open authoring, though the feature is still technically beta - h/t &lt;a href=&quot;https://twitter.com/erquhart/status/1247540796753989635&quot;&gt;Shawn Erquhart&lt;/a&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;#x3C;!DOCTYPE html&gt;
&amp;#x3C;html&gt;
    &amp;#x3C;head&gt;
        &amp;#x3C;meta charset=&quot;utf-8&quot; /&gt;
        &amp;#x3C;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;
        &amp;#x3C;title&gt;Content Manager&amp;#x3C;/title&gt;
    &amp;#x3C;/head&gt;
    &amp;#x3C;body&gt;
        &amp;#x3C;!-- Include the script that builds the page and powers Netlify CMS --&gt;
        &amp;#x3C;script src=&quot;https://unpkg.com/netlify-cms@beta/dist/netlify-cms.js&quot;&gt;&amp;#x3C;/script&gt;
    &amp;#x3C;/body&gt;
&amp;#x3C;/html&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;config.yml&lt;/code&gt; will hold the information the CMS needs to manage our content in the repository as well as the content models to know the nature of the content it will be managing. Here&apos;s the basic configuration portion first:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;publish_mode: editorial_workflow
media_folder: static/images
public_folder: /images
backend:
    name: github
    branch: master
    repo: remotesynth/apexetiquette
    open_authoring: true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&apos;s look at some key elements here. The &lt;code&gt;editorial_workflow&lt;/code&gt; is required for open authoring. This is a workflow whereby a draft is created by the user and then, once finalized, submitted for approval by the editor. If you are both the one making edits and an editor, you can approve and publish your own changes. The backend for open authoring has to be &lt;code&gt;github&lt;/code&gt; rather than the standard &lt;code&gt;git-gateway&lt;/code&gt; as open authoring currently requires GitHub authentication. Finally, of course, we will set &lt;code&gt;open_authoring&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; to enable it.&lt;/p&gt;
&lt;h4&gt;Configuring GitHub and Netlify&lt;/h4&gt;
&lt;p&gt;Before we move on to the content modeling, we need to add some settings in GitHub and Netlify to enable the GitHub backend we just defined above to work. First, we must create an OAuth app in GitHub by going to our &lt;a href=&quot;https://github.com/settings/developers&quot;&gt;developer settings&lt;/a&gt; and clicking &quot;&lt;a href=&quot;https://github.com/settings/applications/new&quot;&gt;New OAuth App&lt;/a&gt;. The important thing to note is the authorization callback, which should be &lt;code&gt;https://api.netlify.com/auth/done&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1586182808-github-settings.png&quot; alt=&quot;OAuth App Settings in GitHub&quot;&gt;&lt;/p&gt;
&lt;p&gt;Once this is done, you will receive a client ID and client secret. We&apos;ll use those in the next step in Netlify. Go to Settings &gt; Access Control &gt; OAuth and then click the install provider button. Click on &quot;Install provider&quot; and then choose GitHub and paste your client ID and client secret in the form.&lt;/p&gt;
&lt;h4&gt;Modeling the Content&lt;/h4&gt;
&lt;p&gt;The final step to setting up Netlify CMS is to model the content by adding &lt;a href=&quot;https://www.netlifycms.org/docs/collection-types/&quot;&gt;collections&lt;/a&gt;. Luckily, our content model is pretty simple and consists of the home page (i.e. &lt;code&gt;/content/_index.md&lt;/code&gt;) and any files in the &lt;code&gt;/content/docs&lt;/code&gt; folder. Most of our content just has a title, weight and body copy, but, as you&apos;ll see below, I&apos;ve also modeled out some of the optional frontmatter configurations that Hugo Book provides.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;collections:
    - name: pages
      label: Pages
      files:
          - name: &apos;home&apos;
            label: &apos;Home Page&apos;
            file: &apos;content/_index.md&apos;
            fields:
                - widget: string
                  name: title
                  label: Title
                  required: true
                  hint: &gt;-
                      The title of the page
                - widget: markdown
                  name: body
                  label: Content
                  required: true
                  hint: Page content
    - name: docs
      label: Docs
      folder: /content/docs
      create: true
      extension: md
      slug: &apos;{{slug}}&apos;
      fields:
          - widget: string
            name: title
            label: Title
            required: true
            hint: &gt;-
                The title of the page that will appear in the left hand navigation
          - widget: number
            name: weight
            label: Weight
            required: false
            hint: &gt;-
                The navigation order of the page.
          - widget: boolean
            name: bookToc
            label: Table of Contents
            required: false
            hint: &gt;-
                If false, the right hand table of contents will not show. Defaults to true if empty.
          - widget: boolean
            name: bookHidden
            label: Hidden?
            required: false
            hint: &gt;-
                If true, the page will not list on the left hand navigation
          - widget: markdown
            name: body
            label: Content
            required: true
            hint: Page content
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While basic content modeling in Netlify CMS is pretty easy in my opinion, there&apos;s a lot that Netlify CMS can do that I am not utilizing. Please check the &lt;a href=&quot;https://www.netlifycms.org/docs/configuration-options/#collections&quot;&gt;collection parameters&lt;/a&gt; for additional configuration options.&lt;/p&gt;
&lt;h4&gt;Editing the Content as the Site Admin&lt;/h4&gt;
&lt;p&gt;As the primary content editor, we&apos;ll want to edit pages the site directly without going through the open authoring process. The best way to do this is to invite ourselves to the site using Netlify Identity. First, let&apos;s set the registration to &quot;invite only&quot; by going to Settings &gt; Identity &gt; Registration and choosing &quot;Edit settings&quot;. Next, go to your Netlify site dashboard, choose Identity and then invite yourself as a user. This should trigger a confirmation email - you&apos;ll need to click the link in the email to confirm before continuing (this will link to the URL in Netlify, so our admin should be pushed live by now). Note that you can also set this to not require a confirmation by going to Settings &gt; Identity &gt; Notifications &gt; Confirmation Template and setting &quot;autoconfirm&quot; to yes.&lt;/p&gt;
&lt;p&gt;Once you&apos;ve accepted your invite and logged in using GitHub, you should see the site admin, which gives you access to editing the home page and content pages.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1586182788-admin-panel-sm.png&quot; alt=&quot;Netlify CMS admin&quot;&gt;&lt;/p&gt;
&lt;h4&gt;Giving External Users Access&lt;/h4&gt;
&lt;p&gt;At this point, external users can technically access your admin and submit additions and changes as pull requests. However, we need to give them a way to access this from the main site. Let&apos;s tweak the page templates to offer buttons that give them the opportunity to add or edit pages in the docs.&lt;/p&gt;
&lt;p&gt;Open &lt;code&gt;/themes/hugo-book/content-after.html&lt;/code&gt;. This file contains content that displays after the main page content has rendered and, right now, it should currently be empty. Let&apos;s add two buttons.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;{{ if ne .RelPermalink &quot;/&quot;}} {{ $edit_url := print &quot;/admin/#/edit&quot; .RelPermalink }}

&amp;#x3C;p&gt;
    &amp;#x3C;a href=&quot;{{$edit_url}}&quot; class=&quot;book-btn&quot;&gt;Edit this page&amp;#x3C;/a&gt;&amp;#x26;nbsp;&amp;#x26;nbsp;
    &amp;#x3C;a href=&quot;/admin/#/collections/docs/new&quot; class=&quot;book-btn&quot;&gt;Add a New Page&amp;#x3C;/a&gt;
&amp;#x3C;/p&gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;if&lt;/code&gt; statement is simply ensuring that this isn&apos;t the home page as we want to add these buttons to only the docs pages (technically users can access and submit edits to the home page once in the admin though). The &lt;code&gt;$edit_url&lt;/code&gt; is assembling a string that links directly to the current page within Netlify CMS. The &quot;Add a New Page&quot; button simply links to the URL to create a new docs page in the CMS. Since we only have one collection at the moment, a hardcoded link will work here. You should now see the buttons beneath any docs page.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1586182794-edit-buttons-sm.png&quot; alt=&quot;add and edit buttons on the page&quot;&gt;&lt;/p&gt;
&lt;h4&gt;The Open Authoring Workflow&lt;/h4&gt;
&lt;p&gt;So what happens if an external user clicks either of those buttons? Let&apos;s walk through it.&lt;/p&gt;
&lt;p&gt;First, they will be asked to login with GitHub. It&apos;s worth keeping in mind what kind of documentation you are creating and if this is a good option for you. If your users are unlikely to have a GitHub account, this may not be the best option.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1586182810-login-github.png&quot; alt=&quot;Login with GitHub&quot;&gt;&lt;/p&gt;
&lt;p&gt;When they click the login button, it will open a window to authorize the application where they will be asked to grant access to public repositories so that a fork can be created.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1586182805-github-authorization.png&quot; alt=&quot;GitHub Authorization&quot;&gt;&lt;/p&gt;
&lt;p&gt;Once authorized, they are given the option to &quot;fork the repo&quot;. Choosing &quot;don&apos;t fork the repo&quot; simply exits the entire process.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1586182802-fork-repo.png&quot; alt=&quot;Fork the repo&quot;&gt;&lt;/p&gt;
&lt;p&gt;Assuming they choose to fork, they are brought to the editing screen.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1586182798-editing-page-sm.png&quot; alt=&quot;Editing a page&quot;&gt;&lt;/p&gt;
&lt;p&gt;If they make changes, they will need to click the &quot;save&quot; button. After saving, they will need to set the status to &quot;In review&quot;, which will automatically submit the change as a pull request to the project.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1586182818-set-status.png&quot; alt=&quot;setting the status&quot;&gt;&lt;/p&gt;
&lt;p&gt;At this point, a pull request has been submitted and we can accept the change via GitHub.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1586182813-pull-request-sm.png&quot; alt=&quot;generated pull request&quot;&gt;&lt;/p&gt;
&lt;p&gt;The user can continue to make changes to any of the content in the admin, but these only directly affect their fork and you must approve each as a pull request. If you choose to use open authoring with Netlify CMS, I believe it is critical that part of your documentation includes a detailed guide to the contribution process so that users can understand this process as well.&lt;/p&gt;
&lt;h2&gt;Where to Go From Here&lt;/h2&gt;
&lt;p&gt;This is just one example of how to build a docs site - there are a lot of different solutions, some of which we covered, and what you choose may depend heavily on the type of documentation you are creating the audience for it (both in terms of editing and of consuming the content). Which brings us to the hardest part: actually writing good documentation. There&apos;s a lot of advice out there for this - and, again, this will depend on the type of documentation and audience - but I recommend checking out &lt;a href=&quot;https://www.writethedocs.org&quot;&gt;Write the Docs&lt;/a&gt; for resources, community and events. In addition, Google has a complete &lt;a href=&quot;https://developers.google.com/tech-writing&quot;&gt;guide to technical writing&lt;/a&gt; organized by audience and type of documentation. Now let&apos;s get documenting!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[How to Choose Your Static Site Generator]]></title><description><![CDATA[The static site generator (SSG) is a key ingredient in developing a JAMstack web app, but there are literally hundreds to choose from. In this article, Brian Rinaldi offers his advice and guidance on choosing the option that's best for you.]]></description><link>https://www.stackbit.com/blog/choosing-your-ssg/</link><guid isPermaLink="false">https://www.stackbit.com/blog/choosing-your-ssg/</guid><pubDate>Wed, 01 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;A static site generator (SSG) is one of the critical components of the JAMstack. But there continue to be &lt;em&gt;a lot&lt;/em&gt; of choices when it comes to static site generators, with new options still appearing with regular frequency. According to &lt;a href=&quot;https://staticsitegenerators.net/&quot;&gt;staticsitegenerators.net&lt;/a&gt;, there are 460 of them. Now, it&apos;s true, they vary in terms of whether they are currently maintained and updated, but even &lt;a href=&quot;https://www.staticgen.com/&quot;&gt;StaticGen&lt;/a&gt;, which aims to be more selective in what it includes, lists over 280 options.&lt;/p&gt;
&lt;p&gt;So, how are you supposed to know what&apos;s right for you? I&apos;d love to offer you a &quot;X is the best SSG, hands-down&quot; recommendation, but that&apos;s not realistic. Instead, in this post I want to offer you some guidelines that I think can help you choose the best SSG option for your project.&lt;/p&gt;
&lt;p&gt;Before we start though, I want to note that this is, by nature, an opinionated exercise. My intent is to offer clear and useful advice, not to criticize any particular tool, either in my discussion of it or my exclusion of it (by nature, when dealing with hundreds of options, I am liable to leave someone&apos;s favorite off the list).&lt;/p&gt;
&lt;h2&gt;What Is Your Level of Experience?&lt;/h2&gt;
&lt;p&gt;If you are a genius developer with unlimited free time and a deep expertise in static site generators, then any of the options will likely work for you, but, then again, you probably think you should probably just go roll your own! For the rest of us, our level of experience can factor into choosing an existing option.&lt;/p&gt;
&lt;h3&gt;New to JAMstack?&lt;/h3&gt;
&lt;p&gt;If you are relatively new to the JAMstack it&apos;s a good idea to stick with some of the more established options with large communities. This is because finding &quot;how to&apos;s&quot; and help from a variety of sources on a range of topics will be much easier. Some of these options would include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; - One of the older options, Jekyll is built in Ruby. It built a large community in part based on the fact that it was the option originally supported by GitHub Pages.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gohugo.io/&quot;&gt;Hugo&lt;/a&gt; - Hugo is a Go-based SSG that has also been around for some time. It built a strong community due to its focus on a very fast build speed.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gatsbyjs.org/&quot;&gt;Gatsby&lt;/a&gt; - Gatsby is a JavaScript-based solution that gained a lot of popularity in part based on its use of React, whose community grew enormously, and its ecosystem of plugins.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Some JAMstack Experience?&lt;/h3&gt;
&lt;p&gt;If you come in with some degree of experience with the JAMstack ecosystem and tools, there are a number of additional options that have been gaining steam lately. These have growing communities and are well-documented, but haven&apos;t been around as long as the other options, which may present some challenges. Some of the popular options in this category would be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://nextjs.org/&quot;&gt;Next.js&lt;/a&gt; - Next.js is a React framework that has been around a while and has a huge community. However, Next.js had limited options for the JAMstack, only &lt;a href=&quot;https://nextjs.org/blog/next-9-3#next-gen-static-site-generation-ssg-support&quot;&gt;recently adding some key features&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.11ty.dev/&quot;&gt;Eleventy&lt;/a&gt; - 11ty is a JavaScript-based solution that has been gaining a good deal of popularity lately in large part because it does not rely on a specific frontend framework.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nuxtjs.org/&quot;&gt;Nuxt&lt;/a&gt; - Nuxt is like Next.js but for developers who prefer to use Vue.js as their frontend framework rather than React.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gridsome.org/&quot;&gt;Gridsome&lt;/a&gt; - Gridsome is another JavaScript-based option that has been gaining interest because of its use of Vue.js.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Experienced JAMstack dev?&lt;/h3&gt;
&lt;p&gt;Obviously, you are free to live on the cutting-edge if you like regardless of your level of experience, but I generally wouldn&apos;t recommend it for most - especially if you have some semblance of a deadline. As I mentioned, there are new SSGs coming out all the time, which, by nature, will have relatively small communities and available resources. Some recent examples include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/scullyio/scully&quot;&gt;Scully&lt;/a&gt; - Scully is a new JavaScript-based solution that finally gave Angular developers an option to create JAMstack sites using their preferred frontend framework.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://redwoodjs.com/&quot;&gt;RedwoodJS&lt;/a&gt; - RedwoodJS is a brand-new JavaScript-based option that is earning a lot of buzz in part because it was built by Tom Preston-Werner, one of GitHub&apos;s co-founders (who also, not coincidentally, originally created Jekyll), and because it aims to bring a Ruby-on-Rails-like &quot;full stack&quot; approach to the JAMstack.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Does the Language or Framework Really Matter?&lt;/h2&gt;
&lt;p&gt;As you might have noticed, most of the options above are built upon JavaScript. This is a recent development in the world of SSGs. In fact, in the prehistoric SSG era (i.e. 2016) I was asked to give a presentation on JavaScript SSG tools. At the end, I would share which one I recommended you use, and the answer? None of them. Yet today, there are a number of outstanding JavaScript-based options.&lt;/p&gt;
&lt;p&gt;There are also a ton of non-JavaScript options. Pretty much any language you write, there is an SSG built in that language. For example, there are some popular options for Python devs including &lt;a href=&quot;https://github.com/getpelican/pelican&quot;&gt;Pelican&lt;/a&gt; and &lt;a href=&quot;https://github.com/lektor/lektor&quot;&gt;Lektor&lt;/a&gt;. There are options for almost any other language you can think of but the amount of usage, updates and community support is often limited. Heck, there&apos;s even a &lt;a href=&quot;https://github.com/JohnSundell/Publish&quot;&gt;Swift-based option&lt;/a&gt; now.&lt;/p&gt;
&lt;p&gt;That being said, I&apos;d argue that, in most cases, the underlying language isn&apos;t all that important unless you plan to write your own extensions for the tool (assuming it supports them). Most of the time, you&apos;ll be working in whatever templating language/framework the SSG uses.&lt;/p&gt;
&lt;p&gt;If you have strong opinions about a particular framework, then you may want to consider a tool that is built using your preferred framework (ex. React, Vue, Angular). It&apos;s important to keep in mind that just because you use a tool that isn&apos;t framework based (ex. Hugo, Jekyll or Eleventy) doesn&apos;t mean you can&apos;t use a frontend framework for your web application. So I would advise that you not let your preferred frontend framework limit your options.&lt;/p&gt;
&lt;p&gt;On the other hand, if you don&apos;t know a particular framework, this can make the learning curve steep for some framework-based SSGs. For example, if you don&apos;t know React, it can make learning Gatsby or Next.js tougher. Or if you know Vue but not React, your learning curve on Gridsome or Nuxt may be easier.&lt;/p&gt;
&lt;h2&gt;It&apos;s Tough to Go Wrong&lt;/h2&gt;
&lt;p&gt;While I haven&apos;t used all of the options I discussed here, the truth is there are a ton of worthy options, so it&apos;s tough to make a wrong choice. There are some feature differences, of course, but having used a ton of SSGs over the years, I&apos;ve found that you can get the job done with pretty much any option. In my view, narrowing your choices comes down to 3 main factors:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How steep will the learning curve be? Factors like documentation, community help forums, language and framework can all be at play here.&lt;/li&gt;
&lt;li&gt;What features do you need and how heavily will you need to customize? While you an accomplish almost anything with any one of these tools, some have features, themes or plugins and a plugin ecosystem that can help speed up your development. If they don&apos;t have a feature or plugin you need and you may need to customize the functionality by writing a plugin of your own, then the language the tool was built in can become an important factor. Build performance can a &quot;feature&quot; and a factor here as well, especially if you have a large site that updates often.&lt;/li&gt;
&lt;li&gt;What are your personal preferences? Do you have a strong preference for a particular language or framework? Or a strong distaste for either? Personal preferences are important factors but be careful of letting them lead you to simply following the crowd - explore the options that can fit your needs not just what &quot;cool kids&quot; are using.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The JAMstack ecosystem is rich - take advantage of it and explore!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Help Keep Your Community Informed During Quarantine]]></title><description><![CDATA[In an effort to help keep communities informed, Contentful created a template for COVID-19 related community updates and we have enabled this template for one-click deployment via the Stackbit site builder.]]></description><link>https://www.stackbit.com/blog/covid-19-template/</link><guid isPermaLink="false">https://www.stackbit.com/blog/covid-19-template/</guid><pubDate>Tue, 31 Mar 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I am sure that I don&apos;t need to tell any of you that COVID-19 presents us with a myriad of challenges. While the most immediate and urgent are around providing medical services to those in need, there are also challenges around communicating with our community, especially in a time when normal, in-person communication isn&apos;t possible.&lt;/p&gt;
&lt;p&gt;In an effort to assist anyone trying to convey information to the communities they serve - whether they are constituents, neighbors, customers, etc - &lt;a href=&quot;https://www.contentful.com&quot;&gt;Contentful&lt;/a&gt; launched an effort called &lt;a href=&quot;https://stop-the-spread.dev/&quot;&gt;stop-the-spread.dev&lt;/a&gt; to provide a free and simple &lt;a href=&quot;https://github.com/contentful/covid-19-site-template&quot;&gt;site template&lt;/a&gt; that makes it easy to build and launch a site that provides informational updates to the community specifically around this crisis. We felt this was a worthy effort and one that it was within our power to support.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1585661176-covid-19-site-template-shot-1-fcdceb98.png&quot; alt=&quot;COVID-19 template&quot;&gt;&lt;/p&gt;
&lt;p&gt;Therefore, I wanted to share that we have made updates to our &lt;a href=&quot;https://app.stackbit.com/create&quot;&gt;site builder&lt;/a&gt; functionality to support a &lt;a href=&quot;https://app.stackbit.com/create?theme=https://github.com/contentful/covid-19-site-template&amp;#x26;ssg=gatsby&amp;#x26;cms=contentful&amp;#x26;cmsExclusive&quot;&gt;quick, one-click deploy of this template&lt;/a&gt;. This means that Stackbit will manage cloning the repository to your GitHub, provisioning the content space on Contentful, deploying the site to Netlify and enabling rebuilds as needed when content is added or updated. This makes launching this site as quick and effortless as possible and will hopefully allow anyone to launch it - even if they don&apos;t have prior experience with Gatsby, Contentful or Netlify.&lt;/p&gt;
&lt;p&gt;We hope that you are and remain safe throughout this crisis and if there is anything that we at Stackbit can do to support your efforts in dealing with this crisis, don&apos;t hesitate to &lt;a href=&quot;https://www.stackbit.com/contact&quot;&gt;share with us&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[How (and Why!) to do Content Marketing as a Developer]]></title><description><![CDATA[Content marketing may not be a skill that comes naturally to many developers, but Peter Thaleikis shares his reasons why developers should care about it and advice on getting started with it.]]></description><link>https://www.stackbit.com/blog/content-marketing-for-devs/</link><guid isPermaLink="false">https://www.stackbit.com/blog/content-marketing-for-devs/</guid><pubDate>Mon, 30 Mar 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Developing software or, as developers say, coding, is great. The feeling you get when you work on a tricky problem, you hit save, alt+tab to your browser, try it out and it works is just amazing. Very few feelings can surpass this “yay”-moment for software engineers.&lt;/p&gt;
&lt;p&gt;This feeling is even stronger if you are working on your personal passion - your side-project. You might even hope this becomes your full-time “job” some day. You already mentally see people using and loving your project. You see the long hours in front of your screen paying off. You feel as if it’s worth spending your time on this instead of going out, meeting friends or family.&lt;/p&gt;
&lt;p&gt;The feeling fades away quickly when you notice that your work isn’t attracting any curious eyes. In our busy world full of distractions, your project might drown between the next upcoming crisis, opinion pieces or cute kittens. But there is a quite simple solution in sight: content marketing. In this post, I want to explain why content marketing can be useful to you as a developer and give you some tips to get started using content marketing to promote your work.&lt;/p&gt;
&lt;h2&gt;Content Marketing aka Blogging for Developers&lt;/h2&gt;
&lt;p&gt;Content Marketing is essentially writing articles and publishing them. You don’t need to be a professional writer to write. You can start with writing articles for your own personal blog. If you haven’t got a personal blog yet, don’t sweat the options and choices - stick to the technology you know and which works for you. You can find plenty of options here on Stackbit. Alternatively, &lt;a href=&quot;https://www.staticgen.com/&quot;&gt;StaticGen&lt;/a&gt; offers a comprehensive list of tools you can use.&lt;/p&gt;
&lt;p&gt;Jump on &lt;a href=&quot;https://startupnamecheck.com/&quot;&gt;startupnamecheck.com&lt;/a&gt; to check your social media avatars, handles and domains - it pays off to keep them consistent across all channels you are using. People will recognize you and your project. Avoid Medium, Blogspot and similar blog services as they don’t help your project to rank. The external links in their articles are usually nofollow, meaning you won’t receive &quot;&lt;a href=&quot;https://moz.com/learn/seo/what-is-link-equity&quot;&gt;link juice&lt;/a&gt;&quot; with these links. Link juice is an SEO term that describes the ability to pass ranking power in Google&apos;s eyes. Links don’t pass link juice if they are marked as rel=”nofollow”.&lt;/p&gt;
&lt;p&gt;Discuss what you do and how you do it to document your story of building your project - and don’t be afraid to share too much. According to &lt;a href=&quot;https://www.alaindebotton.com/&quot;&gt;Alain de Bottom&lt;/a&gt;, people don’t connect with others over all-is-great and my-life-is-perfect. People connect on compassion for one’s mistakes and imperfections. So share your lessons learned and mistakes equally with your winning moments.&lt;/p&gt;
&lt;p&gt;These articles build the base for getting into the next phase: Write articles to be published on other websites. As developers you have a wide range of websites happily accepting your relevant submissions: dev.to, Hashnode, Hackernoon, SitePoint and ProductHunt to name just a few. Keep an eye open as to where people publish articles - Twitter is your friend here. Again, write about your story and adjust the technical depth depending on the website audience. Don’t forget to include relevant links back to your project.&lt;/p&gt;
&lt;h2&gt;Speaking of “Links”&lt;/h2&gt;
&lt;p&gt;Links are the key part of making blogging work for you. As you’ve probably heard before, links signal to Google and other search engines a reference similar to a footnote in a book. You could say, it is a “vote of confidence” across the web. It comes down to this: the more (good) links point to a website, the higher the rank. If you want to understand this more in-depth you can read the &lt;a href=&quot;http://infolab.stanford.edu/~backrub/google.html&quot;&gt;original study&lt;/a&gt; by the Google founders.&lt;/p&gt;
&lt;p&gt;To make links “good”, they need to be placed in a context somewhat relevant to the topic of the page you are linking to. The relevance shouldn’t be too narrow. For instance, if you are building a dog training app, you could look for sites focused on topics like “dogs” (or pets in general), “educational/training apps” or “pet training”. Here again, tailor your content for the audience and make sure to fit the tone of the blog.&lt;/p&gt;
&lt;p&gt;There is one more piece of criteria you should know about. Your target blog should not just be relevant to the topic, it also should either give you a dofollow link or have a very active audience. There is little in it for you if you write content for a website which doesn’t get any visitors and doesn’t even give you a link with passing link juice to your project. To check if a website is actually receiving traffic you can use &lt;a href=&quot;https://ahrefs.com/&quot;&gt;Ahrefs&lt;/a&gt; amazing site-explorer tool or use the &lt;a href=&quot;https://neilpatel.com/&quot;&gt;free, basic tool&lt;/a&gt; by Neil Patel.&lt;/p&gt;
&lt;p&gt;The next step might be a little surprising, but is actually quite logical: include links to your own articles. Same as articles pass link juice from the website publishing it to your project, you get the same benefit if you include a link to your articles. This helps your articles on other sites to rank higher and receive more traffic. With this, you receive more traffic as well. Of course, the website owner will be more than thankful for your support and probably more than happily work with you again. It’s a win-win.&lt;/p&gt;
&lt;h2&gt;Using social media to your Advantage&lt;/h2&gt;
&lt;p&gt;Social media sites such as Facebook, Twitter and Reddit can be great places to mention your work. The internal search engines are key starting points for finding relevant content. Once you find relevant questions or posts, you also find the right audiences with them. Follow people generously, as you can learn more from their other posts.&lt;/p&gt;
&lt;p&gt;Before making your first posts, make sure to learn about the community standards. There are naturally different levels of moderation. When you are making a post make sure to mention that your reply is referring to your own project and you are looking for feedback or similar. This way, you avoid negative comments when people assume you only wanted to promote your work.&lt;/p&gt;
&lt;p&gt;While these posts can drive substantial traffic, you are also at risk of getting sucked into the addictive side. Setting yourself clear limits can help with this.&lt;/p&gt;
&lt;h2&gt;Two more hints before closing off: keywords and headlines&lt;/h2&gt;
&lt;p&gt;While naturally writing your articles works in your favor, it doesn’t hurt to use the right words. Some terms are simply used more often. You can compare terms using &lt;a href=&quot;https://trends.google.com&quot;&gt;Google Trends&lt;/a&gt; or a keywords tool such as &lt;a href=&quot;https://searchvolume.io/&quot;&gt;searchvolume.io&lt;/a&gt; or &lt;a href=&quot;https://neilpatel.com/ubersuggest/&quot;&gt;ubersuggest&lt;/a&gt;. This helps your article to be found, by helping Google to understand it easier.&lt;/p&gt;
&lt;p&gt;Headlines are what draws our initial attention in many cases. Don’t fall into the trap of writing click-bait headlines and communicate what your article is about instead. While you may get more clicks with click-bait, you aren’t making anyone happy. You will be less likely to get shares on social media and Google recognizes if people leave your articles as quickly as they found them. Crazyegg has shared a simplified approach to writing &lt;a href=&quot;https://www.crazyegg.com/blog/headlines-9-steps/&quot;&gt;good headlines&lt;/a&gt; with examples to “fill in”. Write a few variations and test them by asking others or tweeting the different variations at the same time and see which one draws more attention. The latter approach requires a larger following before you can use it efficiently.&lt;/p&gt;
&lt;h2&gt;Bringing it together&lt;/h2&gt;
&lt;p&gt;That’s it! No magic. No big secrets. All you need is what you’ve already got in front of you and use on a daily basis: your laptop. The process is fairly simple and requires mostly putting your mind and fingers to work. Now it’s time to stop “learn procrastinating” by reading articles and starting to write articles.&lt;/p&gt;
&lt;h2&gt;About the Author&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://peterthaleikis.com&quot;&gt;Peter Thaleikis&lt;/a&gt; is a passionate indie hacker and entrepreneur. He has built the previously mentioned Startup Name Check, &lt;a href=&quot;https://naming-tools.com&quot;&gt;Naming-Tools.com&lt;/a&gt; and other side-projects. The business side of his projects is run by &lt;a href=&quot;https://bringyourownideas.com/&quot;&gt;Bring Your Own Ideas Ltd.&lt;/a&gt; If you are interested in more articles like this one you can subscribe to the &lt;a href=&quot;https://peterthaleikis.com/newsletter/&quot;&gt;occasional newsletter&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Best Practices for Working with the JAMstack and an API-based CMS]]></title><description><![CDATA[There may be stumbling blocks when connecting a JAMstack site to a API-based headless CMS and, in this post, we'll look at what these are and how to mitigate them.]]></description><link>https://www.stackbit.com/blog/jamstack-api-based-cms/</link><guid isPermaLink="false">https://www.stackbit.com/blog/jamstack-api-based-cms/</guid><pubDate>Wed, 25 Mar 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;The JAMstack coupled with a headless CMS is a powerful combination. It offers the speed, security and development experience benefits of JAMstack on the frontend, while still providing the content management experience on the backend that content authors and editors need.&lt;/p&gt;
&lt;p&gt;Still, there are a number of stumbling blocks or &quot;gotchas&quot; you may encounter when developing your site. Part of this is due to the decoupled nature of the architecture. For example, while you can do anything with your frontend as it&apos;s not tied directly to the backend, that can also lead to issues when someone managing the content modifies a content model or edits content in a way that the app isn&apos;t designed to handle. In this article, I want to share some &quot;best practices&quot; our team at Stackbit has learned through experience working on these sorts of sites.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I want to acknowledge that this article is based heavily on insights shared with me by our amazing engineering team at Stackbit and, in particular, with the assistance of &lt;a href=&quot;https://twitter.com/dberlin&quot;&gt;David Berlin&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Handle Invalid CMS Content&lt;/h2&gt;
&lt;p&gt;The ease of editing experience in a headless CMS offers a great deal of flexibility to your content editors. This is part of what makes these systems compelling. But this means that sometimes the content you receive on the frontend may not arrive as you&apos;d planned - perhaps an attribute is missing or doesn&apos;t have the type of value you typically expect. Let&apos;s look at some strategies and example code for handling unexpected or invalid content.&lt;/p&gt;
&lt;h3&gt;Ensure Validation on the CMS Side&lt;/h3&gt;
&lt;p&gt;Every CMS option offers tools for validating input. The best way to ensure you don&apos;t receive invalid content on the frontend is to prevent it being entered in the backend.&lt;/p&gt;
&lt;p&gt;Contentful has a list of &lt;a href=&quot;https://www.contentful.com/r/knowledgebase/validations/&quot;&gt;available validations&lt;/a&gt;. Any field can be marked as required, but which additional validations are available largely depends on the type of content. For example, a date field can be limited to a specific range of dates.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1585143205-contentfulvalidation-sm.png&quot; alt=&quot;contentful date validation&quot;&gt;&lt;/p&gt;
&lt;p&gt;In Sanity, the &lt;a href=&quot;https://www.sanity.io/docs/validation&quot;&gt;validations&lt;/a&gt; are added as code within the schema file. The benefit of this is that it allows for very customizable, fine-grained validations. However, regardless of which headless CMS option you choose (and &lt;a href=&quot;https://headlesscms.org/&quot;&gt;there are many&lt;/a&gt;), ensure that you do whatever it permits to prevent erroneous data making it to the front end.&lt;/p&gt;
&lt;h3&gt;Output Valid Content on the Client-side&lt;/h3&gt;
&lt;p&gt;We&apos;ll talk more about handling changes to the underlying data structure in the next section, but here we&apos;re talking about what happens if improper data makes it through to the frontend. There are three scenarios to think of:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Preventing the display of invalid data&lt;/strong&gt; - In many cases, invalid data won&apos;t cause a complete failure at build time, but it may end up getting displayed to the user, which is something you will want to avoid. This is something that can typically be handled in code (for instance for React-based tools like Gatsby or Next.js) or using the SSG&apos;s templating language like Liquid for Jekyll or Hugo templating for Hugo that provide conditionals, functions and filters.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Preventing build errors due to failed queries&lt;/strong&gt; - In some cases, as with some of the JavaScript-based solutions, you&apos;ll be loading content via an external API call, perhaps using GraphQL. Misaligned data can cause an &lt;a href=&quot;https://www.gatsbyjs.org/docs/troubleshooting-common-errors/#unknown-field-a-on-type-b&quot;&gt;&lt;code&gt;unknown field&lt;/code&gt; error&lt;/a&gt; or a type checking failure.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Preventing issues in previews&lt;/strong&gt; - In most cases, data validations on the CMS side are not performed on draft content. Therefore if you rely upon the APIs for retrieving draft content to display previews, you may encounter missing or erroneous data when attempting to use a template to preview draft content.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The best way to handle many, if not most, of these issues is to code defensively, so let&apos;s discuss that.&lt;/p&gt;
&lt;h2&gt;Code Defensively&lt;/h2&gt;
&lt;p&gt;As we noted in the prior section, content models may change or disappear or you may be attempting to preview a draft that has not been run through validation. These can cause your site build to fail if not properly accounted for and can lead to major headaches. The way to deal with that is to write a &quot;defensive app&quot; that can handle these changes without failing.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Don&apos;t assume fields exist or have a valid value&lt;/strong&gt; - Trying to output a null or empty field can result in errors or just unpredictability in how content displays. Pretty much every static site generator (SSG) offers tools for determining if a value exists, ensure that your templates code around this possibility. Aside from being empty, you may receive fields whose values may be unexpected. This is especially true if you are displaying draft previews as even required fields may not have a value or may have invalid values since they may not have been run through validation in the CMS.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Don&apos;t assume linked objects exist&lt;/strong&gt; - Most CMS provide a way of linking objects within the CMS. For example, in Contenful these are &lt;a href=&quot;https://www.contentful.com/developers/docs/concepts/links/&quot;&gt;links&lt;/a&gt; and in Sanity they are called &lt;a href=&quot;https://www.sanity.io/docs/reference-type&quot;&gt;references&lt;/a&gt;. However, it isn&apos;t always safe to assume that because an object is linked in the record, it actually still exists within the CMS.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;But how can you code defensively when dealing with these sorts of issues. Here are some tips.&lt;/p&gt;
&lt;p&gt;First, use conditional rendering to determine if the conditions are met before displaying content. For example, here&apos;s &lt;a href=&quot;https://reactpatterns.com/#conditional-rendering&quot;&gt;how to do conditional rendering in React&lt;/a&gt;, but templating for other SSGs offer similar capabilities.&lt;/p&gt;
&lt;p&gt;Second, leverage tools that can simplify data access in complex structures. For example, in JavaScript-based tools you can use &lt;a href=&quot;https://lodash.com/docs/4.17.15#get&quot;&gt;lodash&apos;s get function&lt;/a&gt;. Other tools provide similar functions like &lt;a href=&quot;https://gohugo.io/functions/default/&quot;&gt;default&lt;/a&gt; and &lt;a href=&quot;https://gohugo.io/functions/isset/&quot;&gt;isset&lt;/a&gt; is Hugo.&lt;/p&gt;
&lt;p&gt;Third, avoid tight coupling by normalizing data as much as possible in the data layer. If you are using React, you would likely create a data layer within React that would handle any data interactions (here&apos;s an &lt;a href=&quot;https://www.bignerdranch.com/blog/react-data-layer-series-part-1/&quot;&gt;8 part series on creating a data layer in React&lt;/a&gt;). If you are using something like Hugo or Jekyll, your data layer could exist within serverless functions that call the API and populate the content within your build process. This data layer will ensure that data is passed consistently and you are protected (as best you can be) from changes in the underlying content model, irregular or missing data in a response or changes to the API.&lt;/p&gt;
&lt;h2&gt;Leverage the Existing Ecosystem&lt;/h2&gt;
&lt;p&gt;Developers love to create - it&apos;s part of what drives us. Generally, this is great, but it can sometimes lead to a &quot;reinventing the wheel&quot; syndrome. The JAMstack ecosystem isn&apos;t always the easiest to navigate, which can amplify the desire to roll your own solution,. Still, this can lead to problems in multiple ways, from not using the best practice methods provided by your particular toolset to not keeping up with potentially breaking changes within updates in your stack. Let&apos;s look at some examples of how you can do better by leveraging the tools provided the ecosystem around your chosen stack.&lt;/p&gt;
&lt;p&gt;Where there is an existing ecosystem of tools to assist, it&apos;s almost always recommended to use them. They enforce best practices for both the SSG and the CMS, use the appropriate endpoints in the API, make data available in a consistent manner, and understand complex object relationships within the CMS (rather than you having to write the code to handle that).&lt;/p&gt;
&lt;p&gt;For example, Gatsby has a &lt;a href=&quot;https://www.gatsbyjs.org/packages/gatsby-source-contentful/&quot;&gt;source plugin for Contentful&lt;/a&gt;, &lt;a href=&quot;https://www.gatsbyjs.org/packages/gatsby-source-sanity/&quot;&gt;for Sanity&lt;/a&gt;, &lt;a href=&quot;https://www.gatsbyjs.org/packages/gatsby-source-datocms/&quot;&gt;for DatoCMS&lt;/a&gt; and more. In cases where there isn&apos;t an existing ecosystem of plugins, there may be community tools that you can leverage, but they&apos;ll require more effort to vet that they actually enforce best practices. At Stackbit, we released a tool that can help with this called &lt;a href=&quot;https://github.com/stackbithq/sourcebit&quot;&gt;Sourcebit&lt;/a&gt; which connects the CMS API with the SSG and has existing plugins for Contentful and Sanity on the CMS side and Hugo and Jekyll on the SSG side (for more on how to use Sourcebit, check the &lt;a href=&quot;https://www.stackbit.com/blog/data-driven-jamstack-sourcebit/&quot;&gt;introductory tutorial&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Decoupled architectures using a headless CMS offer a ton of benefits. The frontend or the backend can be upgraded without impacting the other. CMS APIs can be accessed from a variety of frontends, whether they are web, mobile apps, voice assistants, chat, etc. Plus, they allow us to leverage the &lt;a href=&quot;https://jamstack.org/&quot;&gt;JAMstack&lt;/a&gt; and all of it&apos;s &lt;a href=&quot;https://jamstack.org/#why&quot;&gt;benefits&lt;/a&gt;. But decoupled architectures also bring in new considerations that may not have existed previously. Following some best practices when working with a CMS and a SSG can take some additional up-front work. However, in the long run, it&apos;ll save you a ton of headaches.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Build Your First Sourcebit Plugin]]></title><description><![CDATA[Sourcebit is a fully-extensible open source project that can connect any data source with a JAMstack site. In this post, we'll learn how you can build a plugin to connect to a data source, target SSG or transform data.]]></description><link>https://www.stackbit.com/blog/sourcebit-plugin/</link><guid isPermaLink="false">https://www.stackbit.com/blog/sourcebit-plugin/</guid><pubDate>Mon, 23 Mar 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;https://github.com/stackbithq/sourcebit&quot;&gt;Sourcebit&lt;/a&gt; is a new, MIT-licensed open source project that aims to make it easy for developers to integrate third-party data sources into their JAMstack site. In my &lt;a href=&quot;https://www.stackbit.com/blog/data-driven-jamstack-sourcebit/&quot;&gt;last post&lt;/a&gt;, I discussed what Sourcebit is and how to get started using it.&lt;/p&gt;
&lt;p&gt;Sourcebit has three types of plugins: source plugins; target plugins; and transformation plugins. A source plugin would connect to an API or data source. Source plugins already exist for &lt;a href=&quot;https://github.com/stackbithq/sourcebit-source-sanity&quot;&gt;Sanity&lt;/a&gt; and &lt;a href=&quot;https://github.com/stackbithq/sourcebit-source-contentful&quot;&gt;Contentful&lt;/a&gt;. A target handles preparing the content/data output for the static site generator (SSG). Target plugins already exist for &lt;a href=&quot;https://github.com/stackbithq/sourcebit-target-hugo&quot;&gt;Hugo&lt;/a&gt;, &lt;a href=&quot;https://github.com/stackbithq/sourcebit-target-jekyll&quot;&gt;Jekyll&lt;/a&gt; and &lt;a href=&quot;https://github.com/stackbithq/sourcebit-target-next&quot;&gt;Next.js&lt;/a&gt;. Finally, transformation plugins will transform data pulled from a source before it is output for a target. An &lt;a href=&quot;https://github.com/stackbithq/sourcebit-transform-assets&quot;&gt;assets&lt;/a&gt; plugin already exists to download assets and update the links in the data to the local file URL.&lt;/p&gt;
&lt;p&gt;All of this works amazingly if you use one of the preexisting plugins, but what if you want to connect to a source that is not yet supported? Or what if you want to support an SSG that doesn&apos;t yet have a target plugin? Well, thankfully, Sourcebit is designed to allow you to build your own plugins. You could even get them added to the &lt;a href=&quot;https://github.com/stackbithq/sourcebit/wiki/Plugin-registry&quot;&gt;plugin registry&lt;/a&gt; and make them available to any Sourcebit user. In this tutorial, I&apos;ll walk you through the steps for building your own plugin.&lt;/p&gt;
&lt;h2&gt;The Sample Project&lt;/h2&gt;
&lt;p&gt;Sourcebit does already provide a &lt;a href=&quot;https://github.com/stackbithq/sourcebit-sample-plugin&quot;&gt;sample plugin&lt;/a&gt; that is well documented to help illustrate the various methods and requirements for building a plugin. However, I&apos;d been experimenting with using the &lt;a href=&quot;https://www.stackbit.com/blog/wordpress-to-jamstack/&quot;&gt;Wordpress API in JAMstack apps&lt;/a&gt;, so for this tutorial I thought I would try to build a basic Wordpress API source plugin.&lt;/p&gt;
&lt;p&gt;You can find the source for the Wordpress source plugin at &lt;a href=&quot;https://github.com/remotesynth/sourcebit-source-wordpress&quot;&gt;https://github.com/remotesynth/sourcebit-source-wordpress&lt;/a&gt;. While it has some important limitations that are explained in the &lt;a href=&quot;https://github.com/remotesynth/sourcebit-source-wordpress/blob/master/README.md&quot;&gt;README&lt;/a&gt;, it is a fully functional plugin that will pull pages, posts and assets from a Wordpress API URL specified by the user during the interactive setup and configuration process.&lt;/p&gt;
&lt;p&gt;The plugin utlizes two libraries:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/WP-API/node-wpapi&quot;&gt;Node WPAPI&lt;/a&gt; helps simplify working with Wordpress API methods within Node.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/domchristie/turndown&quot;&gt;Turndown&lt;/a&gt; turns HTML into Markdown. This is necessary because the Wordpress API delivers everything from titles to the body in rendered HTML. Note that, while configurable, Turndown can cause a loss in fidelity between the HTML and Markdown.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As you can see in the following video, here I am importing content from a local Wordpress installation to a Hugo site.&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/5GgDkZiVnyw&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;Let&apos;s see how this was built.&lt;/p&gt;
&lt;h2&gt;The Two Parts to a Plugin&lt;/h2&gt;
&lt;p&gt;It&apos;s worth thinking of your plugin as consisting of two separate parts: the first part handles collecting information from the user that is necessary to configure the plugin; and the second part is the code that actually performs the plugin action after the configuration is set.&lt;/p&gt;
&lt;h3&gt;The First Part - Collecting Necessary Information&lt;/h3&gt;
&lt;p&gt;As mentioned earlier, Sourcebit has an interactive setup and configuration process. Rather than force users to configure it via a YAML configuration file or JavaScript, Sourcebit asks for the necessary information it needs via the command line and then generates a completed configuration file.&lt;/p&gt;
&lt;p&gt;For example, in my Wordpress plugin the only configuration needed is to collect the Wordpress REST API URL to connect to. Your plugin may require much more complex configuration and, it&apos;s worth noting, the configuration process can be as simple or complex as you need it to be. For instance, the Contentful plugin needs things like API keys, environments and workspaces to know which data to connect to, so it asks multiple questions - some even based upon data from API responses.&lt;/p&gt;
&lt;p&gt;There are two methods and one object that define how the configuration information for your plugin is collected and managed: the &lt;code&gt;options&lt;/code&gt; object; the &lt;code&gt;getOptionsFromSetup&lt;/code&gt; method; and the &lt;code&gt;getSetup&lt;/code&gt; method.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can get more details about each of the below methods in the &lt;a href=&quot;https://github.com/stackbithq/sourcebit/wiki/Plugin-API&quot;&gt;Sourcebit plugin API documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;The &lt;code&gt;options&lt;/code&gt; object&lt;/h4&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/stackbithq/sourcebit/wiki/Plugin-API#options-object&quot;&gt;&lt;code&gt;options&lt;/code&gt; object&lt;/a&gt; defines data and configuration options that are available within your plugin. Each key in this object represents the name of a value (i.e. an option) you can use within your plugin code. Each option can include specific keys that define how that option is used and stored. Let&apos;s look at an example.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;module.exports.options = {
    wpapiURL: {
        env: &apos;WPAPI_URL&apos;,
        private: true
    },
    watch: {
        default: false,
        runtimeParameter: &apos;watch&apos;
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the Wordpress plugin, the &lt;code&gt;wpapiURL&lt;/code&gt; is the option that will contain the URL the Wordpress API that we wish to connect to. I have not provided a &lt;code&gt;default&lt;/code&gt;, but I did set the value to &lt;code&gt;private&lt;/code&gt;, which means that Sourcebit will save it to a &lt;code&gt;.env&lt;/code&gt; file rather than the configuration file. This can help prevent users from accidentally committing secret key information to their public repositories. The &lt;code&gt;env&lt;/code&gt; key represents the name of the value within the &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;watch&lt;/code&gt; option, however, defines a value representing a runtime parameter that can be specified by the user when running via the CLI. I have supplied a default of &lt;code&gt;false&lt;/code&gt;, but this can be overridden via a command line parameter. Most source plugins will include this &lt;code&gt;watch&lt;/code&gt; option as it is how Sourcebit enables live updates to be pulled from the data source (more on that later).&lt;/p&gt;
&lt;h4&gt;The &lt;code&gt;getOptionsFromSetup&lt;/code&gt; method&lt;/h4&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/stackbithq/sourcebit/wiki/Plugin-API#getoptionsfromsetup-function&quot;&gt;&lt;code&gt;getOptionsFromSetup&lt;/code&gt; method&lt;/a&gt; runs when the setup process has finished and is primarily concerned with providing the answers that the user supplied during that process.&lt;/p&gt;
&lt;p&gt;In the Wordpress plugin, there is only one answer, &lt;code&gt;wpapiURL&lt;/code&gt;, that needs to be provided.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;module.exports.getOptionsFromSetup = ({ answers, debug, getSetupContext, setSetupContext }) =&gt; {
    return {
        wpapiURL: answers.wpapiURL
    };
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;The &lt;code&gt;getSetup&lt;/code&gt; method&lt;/h4&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/stackbithq/sourcebit/wiki/Plugin-API#getsetup-function&quot;&gt;&lt;code&gt;getSetup&lt;/code&gt; method&lt;/a&gt; is where you&apos;ll define the interactive setup process for the user when configuring your plugin. This is where you will ask the questions required to get the configuration information you need from the user and where you can verify any connections your plugin requires before continuing.&lt;/p&gt;
&lt;p&gt;The type of questions you may need to ask and the verifications you may need to make will depend largely on what type of plugin you are creating - a source, target or transformation plugin. Sourcebit provides the method with all the tools that it uses to generate the interactive setup process, meaning that you are free to customize this experience as you need to.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;chalk&lt;/code&gt; variable contains an instance of the &lt;a href=&quot;https://github.com/chalk/chalk&quot;&gt;chalk library&lt;/a&gt;, which gives each plugin access to an array of text styling options for the CLI. You can reference the &lt;a href=&quot;https://github.com/chalk/chalk#usage&quot;&gt;chalk library documentation&lt;/a&gt; for details on how to use it.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;ora&lt;/code&gt; variable contains an instance of the &lt;a href=&quot;https://github.com/sindresorhus/ora&quot;&gt;ora library&lt;/a&gt;, which provides a spinner tool used to inform the user when an action is loading as well as confirmation and error responses. For more information on how to use it, check the &lt;a href=&quot;https://github.com/sindresorhus/ora#usage&quot;&gt;ora library documentation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;inquirer&lt;/code&gt; variable contains an instance of the &lt;a href=&quot;https://github.com/SBoudrias/Inquirer.js&quot;&gt;inquirer.js library&lt;/a&gt;, which provides the interface for the question and answer interaction via the CLI that is integral to the interactive setup process. Each inquirer prompt can contain questions that offer an &lt;a href=&quot;https://github.com/SBoudrias/Inquirer.js#question&quot;&gt;array of properties to customize the behavior&lt;/a&gt;. In addition, inquirer.js provides a number of different &lt;a href=&quot;https://github.com/SBoudrias/Inquirer.js#prompt-types&quot;&gt;built-in prompt types&lt;/a&gt;. Inquirer also allows for custom prompt types. For instance, some Sourcebit plugins rely on the &lt;a href=&quot;https://github.com/eduardoboucas/inquirer-table-prompt&quot;&gt;inquirer table prompt&lt;/a&gt; type to allow for selecting options in a table-like format.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&apos;s look at an example. For this initial version of the Wordpress plugin, there is only one question: &quot;What is the root URL for your Wordpress API?&quot; This question cannot be left empty and will default to any existing value if the setup was run previously (this is in the &lt;code&gt;currentOptions&lt;/code&gt; variable). Once a user submits the response, we need to verify that the API is available at the URL provided and either show a success or a fail response.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;module.exports.getSetup = ({ chalk, context, currentOptions, data, debug, getSetupContext, inquirer, ora, setSetupContext }) =&gt; {
    return async () =&gt; {
        const answers = {};
        const { wpapiURL } = await inquirer.prompt([
            {
                type: &apos;input&apos;,
                name: &apos;wpapiURL&apos;,
                message: &apos;What is the root URL for your Wordpress API?&apos;,
                validate: (value) =&gt; (value.length &gt; 0 ? true : &apos;The URL cannot be empty.&apos;),
                default: currentOptions.wpapiURL
            }
        ]);
        answers.wpapiURL = wpapiURL;
        const spinner = ora(&apos;Verifying space...&apos;).start();
        try {
            let site = await WPAPI.discover(answers.wpapiURL);
        } catch (error) {
            spacesSpinner.fail();
            throw error;
        }
        spinner.succeed();
        return answers;
    };
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming everything succeeds, the user&apos;s answers are returned and Sourcebit will continue the setup process for additional plugins.&lt;/p&gt;
&lt;h3&gt;The Second Part - Pulling and Normalizing Data&lt;/h3&gt;
&lt;p&gt;Once Sourcebit collects the information from the user during the interactive setup process, it generates a configuration file written in JavaScript. This configuration file supplies the information necessary to allow Sourcebit to collect content and data from the selected data sources. This happens when a &lt;code&gt;sourcebit fetch&lt;/code&gt; is called via the command line or Sourcebit&apos;s &lt;code&gt;fetch()&lt;/code&gt; method is called within the application code. In order for this to work, the plugin API provides two methods to pull the data and to normalize it to a format expected by Sourcebit.&lt;/p&gt;
&lt;p&gt;However, it is first important to realize two things about these methods and the pulling data:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sourcebit also calls both of these methods during the configuration process. This provides details that are used within other aspects of the configuration process. For instance, in order to properly configure a target plugin, Sourcebit needs to know the data models that the source plugin provides. Sourcebit also shows sample entries via the command-line to assist when mapping source content to a target. To do this, Sourcebit gets the data and holds it in memory.&lt;/li&gt;
&lt;li&gt;To help prevent API overuse and even potential charges associated with that, Sourcebit caches data in a &lt;code&gt;.sourcebit.cache.json&lt;/code&gt; file. This cache is written during the &lt;code&gt;fetch&lt;/code&gt; process and retrieved from cache prior to subsequent calls. This functionality is enabled by default when &lt;code&gt;fetch&lt;/code&gt; is executed with the &lt;code&gt;--watch&lt;/code&gt; flag, or when &lt;code&gt;watch: true&lt;/code&gt; is set in the &lt;code&gt;options&lt;/code&gt; object. Alternatively, you can manually enable it with the &lt;code&gt;--cache&lt;/code&gt; flag or by setting &lt;code&gt;cache: true&lt;/code&gt; in &lt;code&gt;options&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;The &lt;code&gt;bootstrap&lt;/code&gt; method&lt;/h4&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/stackbithq/sourcebit/wiki/Plugin-API#bootstrap-function&quot;&gt;&lt;code&gt;bootstrap&lt;/code&gt; method&lt;/a&gt; is executed during the configuration process, to get data models and sample data, and when the plugin starts during the fetch process, to pull content and data. As such, it is not required and may not exist for target or transformation plugins but would typically be necessary when creating a source plugin.&lt;/p&gt;
&lt;p&gt;This method is also responsible for defining the logic necessary to enable the &lt;code&gt;--watch&lt;/code&gt; flag to pull updated content from the API. This allows Sourcebit to provide the live updating functionality whereby changes made in a CMS are immediately reflected in the site.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;bootstrap&lt;/code&gt; method is provided the following parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;log&lt;/code&gt; is a function for writing log messages that may be visible by the user depending on their verbosity settings.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;debug&lt;/code&gt; is a method for writing debug output to the console that are only visible when Sourcebit is being run in debug mode via the &lt;code&gt;--debug&lt;/code&gt; flag.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getPluginContext&lt;/code&gt; is a function that gets the content and data available within Sourcebit for this plugin (i.e. entries pulled from the source plugin that may already exist in the cache).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setPluginContext&lt;/code&gt; is a function that allows you to overwrite the existing data stored by Sourcebit for this plugin (for example, if an entry was updated).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;options&lt;/code&gt; is an object that contains:
_ Configuration values set by the user during setup and stored in the main configuration file.
_ Configuration values set by the user but stored in the &lt;code&gt;.env&lt;/code&gt; file due to their private nature. * Options passed when to &lt;code&gt;fetch&lt;/code&gt; either via the command line or via code. This includes the &lt;code&gt;watch&lt;/code&gt; flag that indicates that the plugin should watch for continue watching for changes in the source data.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;refresh&lt;/code&gt; is a function called when changes are made to the data Sourcebit holds, such as when a change is detected during &lt;code&gt;watch&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&apos;s look at the &lt;code&gt;bootstrap&lt;/code&gt; method within the Wordpress plugin as an example (I&apos;ll explain the code following).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;module.exports.bootstrap = async ({ debug, getPluginContext, log, options, refresh, setPluginContext }) =&gt; {
    const context = getPluginContext();
    const site = await WPAPI.discover(options.wpapiURL);

    if (context &amp;#x26;&amp;#x26; context.entries) {
        log(`Loaded ${context.entries.length} entries from cache`);
    } else {
        const posts = await site.posts();
        const pages = await site.pages();
        const entries = posts.concat(pages);
        const assets = await site.media();
        const fieldnames = [&apos;title&apos;, &apos;content&apos;, &apos;excerpt&apos;, &apos;date&apos;, &apos;slug&apos;];
        const models = [
            {
                id: 1,
                source: pkg.name,
                modelName: &apos;post&apos;,
                modelLabel: &apos;Posts&apos;,
                fieldNames: fieldnames,
                projectId: &apos;&apos;,
                projectEnvironment: &apos;&apos;
            },
            {
                id: 2,
                source: pkg.name,
                modelName: &apos;page&apos;,
                modelLabel: &apos;Pages&apos;,
                fieldNames: fieldnames,
                projectId: &apos;&apos;,
                projectEnvironment: &apos;&apos;
            }
        ];

        log(`Loaded ${entries.length} entries`);
        debug(&apos;Initial entries: %O&apos;, entries);

        setPluginContext({
            assets,
            entries,
            models
        });
    }

    if (options.watch) {
        setInterval(async () =&gt; {
            const { assets, entries } = getPluginContext();
            const posts = await site.posts();
            const pages = await site.pages();
            const allEntries = posts.concat(pages);
            const media = await site.media();
            let entryUpdateCompleted = false;

            // Handling updated assets.
            media.forEach((asset) =&gt; {
                const index = assets.findIndex((item) =&gt; item.id === asset.id);

                if (index !== -1) {
                    let newUpdateDate = new Date(asset.modified);
                    let lastUpdateDate = new Date(assets[index].modified);
                    if (newUpdateDate &gt; lastUpdateDate) {
                        assets[index] = asset;
                        entryUpdateCompleted = true;
                    }
                }
            });
            // handling entry updates
            allEntries.forEach((entry) =&gt; {
                const index = entries.findIndex((item) =&gt; item.id === entry.id);

                if (index !== -1) {
                    let newUpdateDate = new Date(entry.modified);
                    let lastUpdateDate = new Date(entries[index].modified);
                    if (newUpdateDate &gt; lastUpdateDate) {
                        entries[index] = entry;
                        entryUpdateCompleted = true;
                    }
                }
            });

            if (entryUpdateCompleted) {
                setPluginContext({ assets, entries });
                refresh();
                log(`Updated entries`);
            }
        }, 3000);
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The function begins by getting any data Sourcebit already has in cache via the &lt;code&gt;getPluginContext&lt;/code&gt; function. Next, it gets the information for the Wordpress site from the API using the API URL provided during the configuration process. If entries exist in the cache, those entries are used and the code to get data from the API isn&apos;t run.&lt;/p&gt;
&lt;p&gt;If entries do not exist, the relevant Wordpress APIs are called to get posts, pages and assets (or media, as Wordpress calls them). Pages and posts both represent entries from a Sourcebit perspective, so they are combined into one array while assets remain separate. In this example plugin, the properties available in entry (i.e. &lt;code&gt;fieldnames&lt;/code&gt;) and the models are all manually created. In other sources this information may come from the API, however models should conform to a &lt;a href=&quot;https://github.com/stackbithq/sourcebit/wiki/Data-normalization#models&quot;&gt;specific data structure&lt;/a&gt;. The models, entries and assets are then stored by Sourcebit using the &lt;code&gt;setPluginContext&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;If the &lt;code&gt;watch&lt;/code&gt; flag is enabled, we use &lt;code&gt;setInterval&lt;/code&gt; to poll the API. The Wordpress API doesn&apos;t provide a means (that I am aware of, anyway) for checking if changes have been made as is provided by many headless CMS. Thus, the code loops through all the retrieved posts, pages and media and compares the last updated date with the record in the cache. If the API record is newer, it is overwritten in the cache using &lt;code&gt;setPluginContext&lt;/code&gt; and &lt;code&gt;refresh&lt;/code&gt; is called.&lt;/p&gt;
&lt;h4&gt;The &lt;code&gt;transform&lt;/code&gt; method&lt;/h4&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/stackbithq/sourcebit/wiki/Plugin-API#transform-function&quot;&gt;&lt;code&gt;transform&lt;/code&gt; method&lt;/a&gt; is called after the &lt;code&gt;bootstrap&lt;/code&gt; method and is all about normalizing data. Sourcebit expects entries and assets to have &lt;a href=&quot;https://github.com/stackbithq/sourcebit/wiki/Data-normalization#objects&quot;&gt;certain baseline properties&lt;/a&gt;, but they can also contain any relevant data needed from the API (for example, data that might be converted to frontmatter properties). The &lt;code&gt;transform&lt;/code&gt; method is where a transformation plugin might modify data in one of the &lt;a href=&quot;https://github.com/stackbithq/sourcebit/wiki/Anatomy-of-a-plugin#core-data-buckets&quot;&gt;core data buckets&lt;/a&gt; of files, models or objects. It is also where a target plugin might write files and save them to pass them to the files data bucket.&lt;/p&gt;
&lt;p&gt;Let&apos;s look at the example in the Wordpress plugin.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;module.exports.transform = ({ data, debug, getPluginContext, log, options }) =&gt; {
    const { assets, entries, models } = getPluginContext();

    const normalizedPosts = entries.map((entry) =&gt; {
        const normalizedEntry = {
            source: pkg.name,
            id: entry.id,
            modelName: entry.type,
            modelLabel: entry.type.charAt(0).toUpperCase() + entry.type.slice(1) + &apos;s&apos;,
            projectId: &apos;&apos;,
            projectEnvironment: &apos;&apos;,
            createdAt: entry.date,
            updatedAt: entry.modified
        };

        return {
            title: turndownService.turndown(entry.title.rendered),
            content: entry.content.rendered,
            excerpt: turndownService.turndown(entry.content.rendered),
            date: entry.date,
            slug: entry.slug,
            __metadata: normalizedEntry
        };
    });

    const normalizedAssets = assets.map((asset) =&gt; {
        const normalizedEntry = {
            source: pkg.name,
            id: asset.id,
            modelName: &apos;__asset&apos;,
            modelLabel: &apos;Assets&apos;,
            projectId: &apos;&apos;,
            projectEnvironment: &apos;&apos;,
            createdAt: asset.date,
            updatedAt: asset.modified
        };

        return {
            title: turndownService.turndown(asset.title.rendered),
            contentType: asset.mime_type,
            fileName: asset.media_details.sizes.full.file,
            url: asset.media_details.sizes.full.source_url,
            __metadata: normalizedEntry
        };
    });

    const normalizedEntries = normalizedPosts.concat(normalizedAssets);

    return {
        ...data,
        models: data.models.concat(models),
        objects: data.objects.concat(normalizedEntries)
    };
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While there are quite a few lines of code, as you can see it is primarily taking data received from the Wordpress API and putting it into data structures required for either assets or entries by Sourcebit. Both assets and entries are stored in the &lt;code&gt;objects&lt;/code&gt; data bucket, so they are combined after normalization and the data object is returned.&lt;/p&gt;
&lt;h2&gt;Testing a Plugin&lt;/h2&gt;
&lt;p&gt;Now that we&apos;ve finished writing our plugin, how can we test it locally? Sourcebit provides a way of adding a local plugin to be used when running the interactive setup process. First, we need to create a JSON file that contains an array of objects representing the local plugin modules that we&apos;d like to use. For example, the JSON to load my Wordpress on my local machine would be:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;[
    {
        module: &apos;/Users/brianrinaldi/Documents/projects/sourcebit-source-wordpress&apos;,
        description: &apos;A Sourcebit plugin for Wordpress&apos;,
        author: &apos;Brian Rinaldi&apos;,
        type: &apos;source&apos;
    }
];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;module&lt;/code&gt; is the local file path to the plugin. The &lt;code&gt;description&lt;/code&gt; and &lt;code&gt;author&lt;/code&gt; are both shown in the interactive setup process when choosing plugins to install. The &lt;code&gt;type&lt;/code&gt; is either a &lt;code&gt;source&lt;/code&gt;, &lt;code&gt;target&lt;/code&gt; or &lt;code&gt;transform&lt;/code&gt; depending on what kind of plugin you are creating.&lt;/p&gt;
&lt;p&gt;Once this file is created, the plugin can be tested by providing a &lt;code&gt;--plugins&lt;/code&gt; option to &lt;code&gt;npx create-sourcebit&lt;/code&gt; where the value of &lt;code&gt;plugins&lt;/code&gt; is the relative path to the JSON file created above.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npx create-sourcebit --plugins=./plugins.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is worth noting that the plugin runs off the local source and does not actually &quot;install&quot; in the current project. This means that any changes made will be immediately reflected.&lt;/p&gt;
&lt;p&gt;After running through the configuration process, you may want to run the &lt;code&gt;fetch&lt;/code&gt; process with debugging enabled. To do so, provide the plugin&apos;s namespace (defined in the plugin&apos;s &lt;code&gt;package.json&lt;/code&gt;) to the &lt;code&gt;DEBUG&lt;/code&gt; environment variable. For example, to run the Wordpress plugin with debugging enabled I would run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;DEBUG=plugin:sourcebit-source-wordpress sourcebit fetch
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more details on debugging &lt;a href=&quot;https://github.com/stackbithq/sourcebit/wiki/Debugging&quot;&gt;check the documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Registering a Plugin&lt;/h2&gt;
&lt;p&gt;So you&apos;ve created an awesome plugin and you want to share it with the community. While users can download the plugin and run it locally as shown above, it&apos;d be better if it was a default option within the interactive setup process. This is done by adding your plugin to &lt;a href=&quot;https://github.com/stackbithq/sourcebit/wiki/Plugin-registry&quot;&gt;Sourcebit&apos;s plugin registry&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The plugin registry requires the same information shown in the JSON file above. One important note is that the plugin namespace should follow the pattern used by other plugins such as &lt;code&gt;sourcebit-source-contentful&lt;/code&gt;, &lt;code&gt;sourcebit-transform-assets&lt;/code&gt; or &lt;code&gt;sourcebit-target-hugo&lt;/code&gt;. The namespace should start with &lt;code&gt;sourcebit&lt;/code&gt; then describe the type of plugin (source, transform or target) and finally what the plugin handles (for example, Contentful content, site assets or the Hugo static site generator).&lt;/p&gt;
&lt;p&gt;When you think the plugin is ready, you can &lt;a href=&quot;https://github.com/stackbithq/create-sourcebit/blob/master/plugins.json&quot;&gt;add it to the registry file&lt;/a&gt; and submit a pull request.&lt;/p&gt;
&lt;h2&gt;We Can&apos;t Wait to See What You Create!&lt;/h2&gt;
&lt;p&gt;The JAMstack ecosystem has so many amazing options for developers. There are countless headless CMS for content, data stores or APIs for data, and numerous SSGs. That&apos;s why Sourcebit was designed to be extensible - so that the community could expand the capabilities of the tool to support whatever SSG, CMS or data source they use or love. Hopefully this tutorial gives you the guidance you need to create your own plugin and share it with the JAMstack community.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Getting Started with Ecommerce and the JAMstack]]></title><description><![CDATA[A look at some of the options for building an ecommerce site using the JAMstack including a demo that shows how to easily build am ecommerce site using a headless CMS and Snipcart.]]></description><link>https://www.stackbit.com/blog/ecommerce-jamstack/</link><guid isPermaLink="false">https://www.stackbit.com/blog/ecommerce-jamstack/</guid><pubDate>Thu, 19 Mar 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Just a handful of years ago, when I was deeply enthralled with something called &quot;static sites&quot; and &quot;static site generators,&quot; the idea of building an ecommerce site using these tools seemed a little bit ridiculous. Everything required for an ecommerce site shouted &quot;&lt;em&gt;Dynamic!&lt;/em&gt;&quot; - including maintaining a product library to creating a shopping cart. However, the modern JAMstack, with its rich array of services and APIs makes building ecommerce site surprisingly easy.&lt;/p&gt;
&lt;p&gt;In this post, we&apos;ll look at some of the options for building an ecommerce site using the JAMstack. Then we&apos;ll dig into a demo to show how easily it can be built using modern tools for managing the content and enabling the shopping cart and checkout functionality.&lt;/p&gt;
&lt;h2&gt;Options for Ecommerce&lt;/h2&gt;
&lt;p&gt;The good news is that you have a ton of options when it comes to choosing how to enable ecommerce on your JAMstack site using headless ecommerce solutions. Headless ecommerce, much like a headless CMS, decouples the tooling and management needed for a storefront and checkout from the frontend.&lt;/p&gt;
&lt;p&gt;Traditional solutions, like Magento for instance, were used to develop both the frontend and the backend. Instead, headless ecommerce solutions provide APIs and SDKs for integrating any frontend with the managed backend. The benefit of this approach is that it gives complete flexibility to how the frontend is built (or what kind of frontend it is - be it a mobile site, mobile app or something else entirely). More importantly for us, it enables us to build a blazing fast frontend using the JAMstack.&lt;/p&gt;
&lt;p&gt;There are a ton of options out there and, to be honest, it can be tough to discern the exact differences. Two of the main differences I found were in how they charge (percentages and/or monthly fees) as well as the tool&apos;s management features, which are often tied to your expected volume of sales.&lt;/p&gt;
&lt;p&gt;Some headless ecommerce options include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://snipcart.com/&quot;&gt;Snipcart&lt;/a&gt; - Snipcart&apos;s offering focuses on ease of integration and a plan based solely on transaction fees without additional monthly subscription costs.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.foxy.io/&quot;&gt;Foxy.io&lt;/a&gt; - Like Snipcart, Foxy.io is designed to be easy to integrate, but their pricing model is focused around a fixed monthly subscription with a set amount of included transactions.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://commercejs.com/&quot;&gt;Commerce.js&lt;/a&gt; - Unlike the prior options, Commerce.js doesn&apos;t have a drop-in shopping cart and checkout solution but is designed for those that want to build a fully-customized cart and checkout experience from scratch using their APIs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are just a few options of many, so it pays to do your research. Let&apos;s look at how to integrate one of these services into a JAMstack site.&lt;/p&gt;
&lt;h2&gt;Enabling Ecommerce Using Snipcart&lt;/h2&gt;
&lt;p&gt;For my example, I decided to use Snipcart. One nice option that Snipcart has is that test development is always free.&lt;/p&gt;
&lt;h3&gt;Setting Up the Sample Site&lt;/h3&gt;
&lt;p&gt;Here&apos;s what my simple store looks like. I only have 5 products.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1584622819-sanitysm.png&quot; alt=&quot;The Sample App - RemoteStore&quot;&gt;&lt;/p&gt;
&lt;p&gt;If you want to try the site yourself, it&apos;s available at &lt;a href=&quot;https://snipcart-demo.netlify.com/&quot;&gt;https://snipcart-demo.netlify.com/&lt;/a&gt; (the checkout process is running in test mode). The sample code is also available on GitHub at &lt;a href=&quot;https://github.com/remotesynth/ecommerce-demo-snipcart&quot;&gt;https://github.com/remotesynth/ecommerce-demo-snipcart&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The site was built with Hugo and has only two templates - one for the home page and one for the product page. The products are managed using &lt;a href=&quot;https://www.sanity.io/&quot;&gt;Sanity&lt;/a&gt; as a headless CMS.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1584622819-sanitysm.png&quot; alt=&quot;Product content in Sanity&quot;&gt;&lt;/p&gt;
&lt;p&gt;The only data model is for a product which has very basic data structure as shown below.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;{
    title: &quot;Product&quot;,
    name: &quot;product&quot;,
    type: &quot;document&quot;,
    fields: [
      {
      title: &quot;Title&quot;,
      name: &quot;title&quot;,
      type: &quot;string&quot;,
      validation: Rule =&gt; Rule.required()
      },
      {
      title: &quot;Price&quot;,
      name: &quot;price&quot;,
      type: &quot;number&quot;,
      validation: Rule =&gt; Rule.required()
      },
      {
        title: &quot;Description&quot;,
        name: &quot;description&quot;,
        type: &quot;string&quot;,
        validation: Rule =&gt; Rule.required()
      },
      {
        title: &quot;Image&quot;,
        name: &quot;image&quot;,
        type: &quot;image&quot;,
        validation: Rule =&gt; Rule.required()
      },
      {
        title: &quot;Body&quot;,
        name: &quot;body&quot;,
        type: &apos;text&apos;,
        validation: Rule =&gt; Rule.required()
      }
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To enable integration of Sanity content with my Hugo site, I am using a new project called &lt;a href=&quot;https://github.com/stackbithq/sourcebit&quot;&gt;Sourcebit&lt;/a&gt; that pulls the content and images into my local site. For details on how that works, please check my &lt;a href=&quot;https://www.stackbit.com/blog/data-driven-jamstack-sourcebit/&quot;&gt;introduction to Sourcebit tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Integrating Snipcart&lt;/h3&gt;
&lt;p&gt;Adding Snipcart took very little time. Once I signed up for an account, here are the steps I followed to add a fully functioning cart and checkout process to my site. Keep in mind that this is a basic integration without taking advantage of any of the &lt;a href=&quot;https://docs.snipcart.com/v3/setup/customization&quot;&gt;customization options&lt;/a&gt; Snipcart allows.&lt;/p&gt;
&lt;h4&gt;Step 1: Add the Snipcart CSS and JavaScript files.&lt;/h4&gt;
&lt;p&gt;The CSS file can go in the head block in my &lt;code&gt;baseof.html&lt;/code&gt; template (which serves as the base for all templates).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;#x3C;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.snipcart.com/themes/v3.0.8/default/snipcart.css&quot; /&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I placed the &lt;code&gt;div&lt;/code&gt; that will hold the injected HTML that runs the cart and checkout right before my closing &lt;code&gt;body&lt;/code&gt; tag. The &lt;code&gt;div&lt;/code&gt; needs a data attribute that contains your public key from Snipcart.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;#x3C;div hidden id=&quot;snipcart&quot; data-api-key=&quot;MY_PUBLIC_KEY&quot;&gt;&amp;#x3C;/div&gt;
&amp;#x3C;script src=&quot;https://cdn.snipcart.com/themes/v3.0.8/default/snipcart.js&quot;&gt;&amp;#x3C;/script&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Step 2: Add the product data attributes to the &quot;add to cart&quot; link/button.&lt;/h4&gt;
&lt;p&gt;I added the ID (which I just based on the title of the product), the price, description, title and image to the data attributes. These all get passed to Snipcart.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;#x3C;a
    href=&quot;#&quot;
    class=&quot;image-holder__link snipcart-add-item&quot;
    data-item-id=&quot;{{ anchorize .Title }}&quot;
    data-item-price=&quot;{{ .Params.price }}&quot;
    data-item-url=&quot;{{ .RelPermalink }}&quot;
    data-item-description=&quot;{{ .Params.description }}&quot;
    data-item-image=&quot;/images/products/{{ .Params.image }}&quot;
    data-item-name=&quot;{{ .Title }}&quot;
&gt;&amp;#x3C;/a&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&apos;s it! 🎉 We can now add to cart and run through a checkout.&lt;/p&gt;
&lt;p&gt;Technically, our store is functional. However, there&apos;s some finishing touches that it requires.&lt;/p&gt;
&lt;h4&gt;Step 3: Add a checkout button.&lt;/h4&gt;
&lt;p&gt;Right now, the only way for a customer to view their cart or proceed to checkout is to add an item. Let&apos;s fix that by adding a button to open the cart and proceed to checkout. On my page header in &lt;code&gt;baseof.html&lt;/code&gt; I added the following link with the styles added to enable it to open our cart.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;#x3C;a class=&quot;btn btn-primary checkout snipcart-checkout&quot;&gt;Click here to checkout&amp;#x3C;/a&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Easy! But I wanted it to also display the number of items in the cart, which just required a little tweaking of the link HTML.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;#x3C;a class=&quot;btn btn-primary checkout snipcart-checkout&quot;&gt;Click here to checkout (&amp;#x3C;span class=&quot;snipcart-items-count&quot;&gt;&amp;#x3C;/span&gt;)&amp;#x3C;/a&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;span&lt;/code&gt; is automatically populated with the number of cart items.&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/ub5HV_-E-u0&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;Now, we&apos;re really done! 🙌🏻&lt;/p&gt;
&lt;p&gt;I should note here before we finish that in order for the checkout process to complete successfully, I also needed to add my domain in the &lt;a href=&quot;https://app.snipcart.com/dashboard/account/domains&quot;&gt;account settings on Snipcart&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1584622804-adddomainsm.png&quot; alt=&quot;Adding a domain on Snipcart&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Where To Go From Here&lt;/h2&gt;
&lt;p&gt;As I stated, this is the very basic implementation of Snipcart, without much customization and with a very simple product set. For example, products might have different size or personalization options, or you would likely need to set up shipping (unless the product is digital, which is also supported). Or you may need to take advantage of features like discounts, inventory management, abandoned cart recovery. Or perhaps you need to enable more complex functionality via the &lt;a href=&quot;https://docs.snipcart.com/v3/sdk/basics&quot;&gt;SDK&lt;/a&gt;. There&apos;s obviously a lot more we could explore. Still, it&apos;s pretty amazing that tools like Snipcart and other headless ecommerce tools can offer developers a means of implementing a shopping cart and checkout process in just a few lines of code.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Bringing Next.js to the JAMstack]]></title><description><![CDATA[Next.js recently added a bunch of new features geared specifically for JAMstack sites. In this post, Simon Hanukaev shows how a new project called Sourcebit can help make these even more powerful when working with a CMS-connected site.]]></description><link>https://www.stackbit.com/blog/jamstack-nextjs-sourcebit/</link><guid isPermaLink="false">https://www.stackbit.com/blog/jamstack-nextjs-sourcebit/</guid><pubDate>Mon, 16 Mar 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Next.js is a great React framework that can be used for server-rendered sites and statically pre-build sites, or both. Until recently, Next.js could be configured to generate static assets for a JAMstack site using &lt;a href=&quot;https://nextjs.org/docs/advanced-features/automatic-static-optimization&quot;&gt;automatic static optimization&lt;/a&gt; and &lt;a href=&quot;https://nextjs.org/docs/advanced-features/static-html-export&quot;&gt;static HTML export&lt;/a&gt;. The latter could be used to generate a JAMstack site with content provided by a &lt;a href=&quot;https://headlesscms.org/&quot;&gt;headless CMS&lt;/a&gt;, yet it lacked some basic features like data pre-fetching and client-side rendering. For example, prefetching the data of a page before clicking the link, and, once the link is clicked, instantly rendering the page on the client without waiting for the browser to load it.&lt;/p&gt;
&lt;p&gt;Fortunately, Next.js recently added &lt;a href=&quot;https://nextjs.org/blog/next-9-3#next-gen-static-site-generation-ssg-support&quot;&gt;next-gen static site generation (SSG) support&lt;/a&gt;. With these new APIs, it is now possible to configure Next.js to generate JAMstack sites supporting advanced features like data pre-fetching and client-side rendering. And as before, the content of these sites can be driven by a headless CMS. Still, it is not always trivial to configure and integrate Next.js with a headless CMS. Moreover, generating the static assets is only one side of the story — what about the development experience while developing or authoring a static site? In this post, I will discuss some of the areas that can still improve in the Next.js experience for developing JAMstack sites and how a new open source project called &lt;a href=&quot;https://github.com/stackbithq/sourcebit&quot;&gt;Sourcebit&lt;/a&gt; can help to fill those gaps.&lt;/p&gt;
&lt;h2&gt;What&apos;s the Optimal JAMstack Setup?&lt;/h2&gt;
&lt;p&gt;Let&apos;s ask ourselves what features would create the optimal development experience for both developers and users for JAMstack sites built with a headless CMS? Personally, I have a number of requirements that I find to be useful when developing or authoring, and later deploying, a JAMstack site. I have divided these requirements into two groups. The first group consists of requirements intended to improve developer experience while developing and authoring a static site. The second group is intended to improve the user experience for users browsing a static site after it has been built and deployed.&lt;/p&gt;
&lt;h3&gt;DX requirements&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Live update on code change&lt;/strong&gt; - when site code is changed, instantly update the currently opened page in the browser using hot module replacement (HMR) or live reload.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Live update on content change&lt;/strong&gt; - when the site content is changed, instantly update the currently opened page in the browser using HMR or live reload. The content can be stored in local files or served via API, for example by a headless CMS.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Content caching&lt;/strong&gt; - when starting a local development server or building a production site, the remote content should be fetched sparingly. Some headless CMS limit the number of monthly requests per pricing plan. If used wastefully, API access might be blocked or incur extra charges. Instead of executing an API call every time a page is requested and pre-rendered, a single API call should be made when the development server starts, fetch the whole content and cache it for future use.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Observe content changes&lt;/strong&gt; - because content is cached, we need to observe content changes and update the cache with a fresh content. The client should be notified about the changes and trigger a live update. To prevent API overuse, observing content should be done in an optimized manner. The changes should be pushed by the content provider rather than being frequently pulled by a server. For example, instead of frequently polling the content provider for content changes, a web-hook or other method of notification should be considered.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Server-side rendering on page request&lt;/strong&gt; - whenever a page is requested, the fully generated page should be returned to the client. For React-based SSGs, the page should be hydrated on the client. Cached content should be used to reduce API usage of external services.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Client-side rendering on client-side navigation&lt;/strong&gt; - whenever internal site navigation occurs, the loaded page should be rendered on the client without triggering a full browser page load.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;UX requirements&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pre-render pages into static files&lt;/strong&gt; - every page should be pre-rendered into a static HTML file, which can then be served from a CDN hosting service like &lt;a href=&quot;https://www.netlify.com/&quot;&gt;Netlify&lt;/a&gt; or &lt;a href=&quot;https://zeit.co/&quot;&gt;Zeit&lt;/a&gt;. For React-based SSGs, the page should be hydrated on the client.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data pre-fetching&lt;/strong&gt; - pre-fetch data for pages that link from the current page. There are different strategies to data pre-fetching such as &quot;pre-fetch when a link is scrolled into the view&quot; (Next.js) or &quot;pre-fetch when hovering over a link&quot; (Gatsby).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Client-side rendering on client side navigation&lt;/strong&gt; - whenever internal site navigation occurs, the loaded page should be rendered on client without triggering full browser page load, preemptively triggering a data pre-fetch.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now that we know what we want, let&apos;s see what is missing to achieve it in Next.js. Luckily not much, and the missing requirements are all related to DX.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Live updates on content change&lt;/strong&gt; - right now, Next.js does not have any special capability to update the page when its content changes. In the next section we&apos;ll see how it can be solved.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Content caching&lt;/strong&gt; - while content caching is not a Next.js responsibility, it has an &lt;a href=&quot;https://github.com/zeit/next.js/issues/10933&quot;&gt;issue&lt;/a&gt; that prevents using in-memory caching. We can solve this as well.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Observing content changes&lt;/strong&gt; - as with the content caching, observing content changes is not a Next.js responsibility, but specific to the content source itself. In the following section I&apos;ll give an example of how content changes can be observed using Sanity&apos;s &lt;a href=&quot;https://www.sanity.io/docs/listening&quot;&gt;listen API&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Bringing It All Together with Sourcebit&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/stackbithq/sourcebit&quot;&gt;Sourcebit&lt;/a&gt; is an open-source tool that closes the gap between headless CMS and static site generators such as Next.js. It is driven by different plugins that fetch data from any possible API source, transform and normalize the data into a format expected by an SSG, and eventually provide that data to the SSG.&lt;/p&gt;
&lt;p&gt;Sourcebit also takes responsibility for &lt;strong&gt;caching the fetched content&lt;/strong&gt; and &lt;strong&gt;observing content changes&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In the following example, I want to show how Sourcebit can be configured with the &lt;a href=&quot;https://github.com/stackbithq/sourcebit-source-sanity&quot;&gt;&lt;code&gt;sourcebit-source-sanity&lt;/code&gt;&lt;/a&gt; plugin to fetch content from &lt;a href=&quot;http://sanity.io&quot;&gt;Sanity.io&lt;/a&gt; and the &lt;a href=&quot;https://github.com/stackbithq/sourcebit-target-next&quot;&gt;&lt;code&gt;sourcebit-target-next&lt;/code&gt;&lt;/a&gt; plugin to feed the data to Next.js page components. Sourcebit will take care of fetching content from Sanity, caching it, observing its changes and notifying the client whenever these changes occur, resulting in live updates.&lt;/p&gt;
&lt;p&gt;The following diagram shows the flow of content between &lt;a href=&quot;http://sanity.io&quot;&gt;Sanity.io&lt;/a&gt; through Sourcebit and into Next.js and the browser.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1584364822-sourcebit-sanity-nextjs-sm.png&quot; alt=&quot;the content flow between Sanity and Next&quot;&gt;&lt;/p&gt;
&lt;p&gt;You can get the full code for the sample project along with detailed instructions on how to get it running at &lt;a href=&quot;https://github.com/stackbithq/azimuth-nextjs-sanity&quot;&gt;https://github.com/stackbithq/azimuth-nextjs-sanity&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here&apos;s a short video demonstration that shows the live editing in action.&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/CdtqTKh3hTg&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;h3&gt;Installing and Configuring Sourcebit&lt;/h3&gt;
&lt;p&gt;Now to add Sourcebit to your Next.js project run the following command from within your project folder:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npx create-sourcebit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sourcebit uses an interactive setup process that enables you to create the necessary configuration simply by walking through a set of questions via the command line. In the following example, we&apos;ll be setting it up to use Sanity as its data source.&lt;/p&gt;
&lt;p&gt;Begin by selecting Sanity as the source plugin by using the arrow keys to highlight it and then spacebar to select it and finally hit enter to move to the next step:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1584364800-nextjs-step1-sm.png&quot; alt=&quot;configuring Sourcebit with Sanity&quot;&gt;&lt;/p&gt;
&lt;p&gt;For now we&apos;ll skip the transformation plugin, so just press enter when the option comes up. The assets transformation plugin can download any assets included in your demo and update any links to them in your content. If you&apos;d like to see how that works, check out &lt;a href=&quot;https://www.stackbit.com/blog/data-driven-jamstack-sourcebit/&quot;&gt;this tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Next, select the target plugin by using the arrow key until it highlights the &lt;code&gt;sourcebit-target-next&lt;/code&gt; option and then hitting the spacebar and clicking the enter key.&lt;/p&gt;
&lt;p&gt;Sourcebit will begin by walking you through questions required to configure the Sanity source, such as your API token, site ID and dataset. You can read &lt;a href=&quot;https://www.sanity.io/docs/http-auth&quot;&gt;the Sanity documentation&lt;/a&gt; to learn more about accessing your API token on Sanity. Once you&apos;ve completed these steps, we&apos;ll begin configuring the Next.js target.&lt;/p&gt;
&lt;p&gt;First, we need to tell Sourcebit which models in our Sanity project represent pages in our site. You can select multiple options by using the arrow key and spacebar to select. In the case below, the &quot;blog&quot;, &quot;landing&quot;, &quot;page&quot; and &quot;post&quot; models all represent pages but, for the sake of example, I will just choose &quot;page&quot; and &quot;post&quot;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1584364806-nextjs-step2-sm.png&quot; alt=&quot;Choosing Sanity content models&quot;&gt;&lt;/p&gt;
&lt;p&gt;For each selected model, you will then be asked for the path to the page within your Next.js site. The path can use placeholders surrounded by curly braces that represent data associated with the page. For example, the default suggestion for the blog content model is &lt;code&gt;/blog/{slug}&lt;/code&gt; whereby &lt;code&gt;slug&lt;/code&gt; is a field on the each blog item within Sanity.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1584364809-nextjs-step3-sm.png&quot; alt=&quot;assigning the path&quot;&gt;&lt;/p&gt;
&lt;p&gt;The &quot;page&quot; model represents content that will sit at the root of the site, so rather I can enter a custom value for that of &lt;code&gt;/{slug}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The final step is to choose which content models represent data that we will want to include as props in all pages within our Next.js application. In my case, I want both the &quot;site_config&quot; model and &quot;posts&quot; available.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1584364817-nextjs-step5-sm.png&quot; alt=&quot;Assigning props&quot;&gt;&lt;/p&gt;
&lt;p&gt;Sourcebit will give you the option to include multiple entries in the same file. For instance, if this was connected to a data model in Sanity that had more than one entry like &quot;post&quot;, you&apos;d choose yes. For the &quot;site&lt;em&gt;config&quot;, however, there is only one entry. You will also be asked to choose a name for the prop, the default being the same as the content model. In my case, I want the default for &quot;site&lt;/em&gt;config&quot; and use &lt;code&gt;posts&lt;/code&gt; for &quot;post&quot;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1584364819-nextjs-step6-sm.png&quot; alt=&quot;configuring Sourcebit with Sanity&quot;&gt;&lt;/p&gt;
&lt;p&gt;Once the process is complete, Sourcebit will generate the &lt;code&gt;sourcebit.js&lt;/code&gt; configuration file. Sourcebit is configured in JavaScript, so you are free to modify and customize it as needed. Below is the configuration generated by the steps above:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;module.exports = {
    plugins: [
        {
            module: require(&apos;sourcebit-source-sanity&apos;),
            options: {
                accessToken: process.env[&apos;SANITY_ACCESS_TOKEN&apos;],
                dataset: &apos;production&apos;,
                projectId: &apos;9vzhtemc&apos;,
                useCdn: false
            }
        },
        {
            module: require(&apos;sourcebit-target-next&apos;),
            options: {
                pages: function (objects) {
                    return objects.reduce((pages, object) =&gt; {
                        if (object.__metadata.modelName === &apos;page&apos; &amp;#x26;&amp;#x26; object.__metadata.source === &apos;sourcebit-source-sanity&apos;) {
                            return pages.concat({ path: &apos;/{slug}&apos;, page: object });
                        }

                        if (object.__metadata.modelName === &apos;post&apos; &amp;#x26;&amp;#x26; object.__metadata.source === &apos;sourcebit-source-sanity&apos;) {
                            return pages.concat({ path: &apos;/blog/{slug}&apos;, page: object });
                        }

                        return pages;
                    }, []);
                },
                commonProps: function (objects) {
                    return {
                        posts: objects.reduce((acc, object) =&gt; (object.__metadata.modelName === &apos;post&apos; ? acc.concat(object) : acc), []),
                        site_config: objects.find((object) =&gt; object.__metadata.modelName === &apos;site_config&apos;)
                    };
                }
            }
        }
    ]
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Using Sourcebit in Your Next.js Project&lt;/h3&gt;
&lt;p&gt;In order to connect your Next.js application to the data that Sourcebit provides from the connected sources (Sanity in the case of the above example), you&apos;ll need to modify your project&apos;s code. First, add following lines to your &lt;code&gt;next.config.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const sourcebit = require(&apos;sourcebit&apos;);
const sourcebitConfig = require(&apos;./sourcebit.js&apos;);
sourcebit.fetch(sourcebitConfig);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alternatively, instead of including &lt;code&gt;sourcebit.fetch()&lt;/code&gt; in your code, you can run Sourcebit in parallel to &lt;code&gt;next dev&lt;/code&gt; using:
&lt;code&gt;NODE_ENV=development sourcebit fetch&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Next, you&apos;ll need to update your page components to get their static paths and static props from Sourcebit:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Call &lt;code&gt;sourcebitDataClient.getStaticPaths()&lt;/code&gt; from within &lt;code&gt;getStaticPaths&lt;/code&gt; in pages with &lt;a href=&quot;https://nextjs.org/docs/routing/dynamic-routes&quot;&gt;dynamic routes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Call &lt;code&gt;sourcebitDataClient.getStaticPropsForPageAtPath(pagePath)&lt;/code&gt; from within &lt;code&gt;getStaticProps&lt;/code&gt;, passing the URL path of the page to be rendered. You can compute this path by applying &lt;code&gt;params&lt;/code&gt; provided by &lt;code&gt;getStaticProps&lt;/code&gt; and the dynamic route pattern of the page component.&lt;/li&gt;
&lt;li&gt;Wrap your component with the provided &lt;code&gt;withRemoteDataUpdates&lt;/code&gt; higher order component (HOC ) to trigger live updates when content changes. This HOC does nothing when Next.js is not in development mode.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Below is an example template that you can use for pages coming from the Sourcebit source data.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// pages/[...slug].js

import React from &apos;react&apos;;
import { sourcebitDataClient } from &apos;sourcebit-target-next&apos;;
import { withRemoteDataUpdates } from &apos;sourcebit-target-next/with-remote-data-updates&apos;;
import pageLayouts from &apos;../layouts&apos;;

class Page extends React.Component {
    render() {
        // every page can have be rendered by a sifferent layout,
        // pick the layout based on the model of the page
        const PageLayout = pageLayouts[this.props.page.__metadata.modelName];
        return &amp;#x3C;PageLayout {...this.props} /&gt;;
    }
}

export async function getStaticPaths() {
    const paths = await sourcebitDataClient.getStaticPaths();
    return { paths: paths.filter((path) =&gt; path !== &apos;/&apos;), fallback: false };
}

export async function getStaticProps({ params }) {
    const pagePath = &apos;/&apos; + params.slug.join(&apos;/&apos;);
    const props = await sourcebitDataClient.getStaticPropsForPageAtPath(pagePath);
    return { props };
}

// wrapping Page component to allow live updates
export default withRemoteDataUpdates(Page);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The Next.js application is now pulling data directly from Sanity and any updates made in the Sanity Studio will be immediately reflected in the development application. Any changes published will be reflected both in development and in production.&lt;/p&gt;
&lt;p&gt;You can view the source code of a complete project built using Sourcebit, Next.js and Sanity at &lt;a href=&quot;https://github.com/stackbithq/azimuth-nextjs-sanity&quot;&gt;https://github.com/stackbithq/azimuth-nextjs-sanity&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Where To Go From Here&lt;/h2&gt;
&lt;p&gt;We believe the combination of Sourcebit and Next.js offers developers the power to quickly and easily create powerful, next-generation JAMstack applications. The new features in Next.js truly make it a fantastic choice for the JAMstack and Sourcebit simplifies the process of connecting the application to a variety of data sources.&lt;/p&gt;
&lt;p&gt;Also, keep in mind that Sourcebit is completely extensible, meaning that you can create your own source, transformation or target plugins. You can read more about how to do that in the &lt;a href=&quot;https://github.com/stackbithq/sourcebit/wiki/Anatomy-of-a-plugin&quot;&gt;Sourcebit wiki&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For more information about other ways Sourcebit can power your JAMstack applications, check out the &lt;a href=&quot;https://github.com/stackbithq/sourcebit&quot;&gt;project on GitHub&lt;/a&gt; or the &lt;a href=&quot;https://www.stackbit.com/blog/data-driven-jamstack-sourcebit/&quot;&gt;getting started tutorial on our blog&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[AMP for the JAMstack]]></title><description><![CDATA[Despite the controversy that has surrounded it, AMP has become a requirement for certain types of sites. Stephen Keep shows us when and why you may need AMP and how to implement it on a Hugo site.]]></description><link>https://www.stackbit.com/blog/amp-for-jamstack/</link><guid isPermaLink="false">https://www.stackbit.com/blog/amp-for-jamstack/</guid><pubDate>Thu, 12 Mar 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;https://amp.dev/&quot;&gt;AMP&lt;/a&gt;, which stands for accelerated mobile pages, was originally created by Google in 2015. It was designed to compete with other similar initiatives like Facebook Instant Pages and Apple News, which used specialized caching to speed up the browsing experience for content on the web. However, since its early days, AMP has been caught up in controversy. In this post, we are going to look at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What AMP is.&lt;/li&gt;
&lt;li&gt;The controversy around AMP and why AMP still matters for many sites.&lt;/li&gt;
&lt;li&gt;How to convert an Hugo theme to AMP.&lt;/li&gt;
&lt;li&gt;How to test if the page is AMP compatible.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&apos;s dive in.&lt;/p&gt;
&lt;h2&gt;What is AMP?&lt;/h2&gt;
&lt;p&gt;AMP is an initiative by Google to speed up the web. It is now a part of the &lt;a href=&quot;https://openjsf.org/&quot;&gt;Open JS Foundation&lt;/a&gt;. Google created AMP to set some standards that would help create fast pages and improve the mobile web browsing experience. These standards came at a cost. To turn an HTML page into an AMP page there are many hoops to jump through.&lt;/p&gt;
&lt;p&gt;For example, instead of using an &lt;code&gt;img&lt;/code&gt; tag, AMP uses an &lt;code&gt;amp-img&lt;/code&gt; tag. This is the same for other tags for things like forms, scripts, and videos. Once you have built the AMP page, Google will then cache it in their CDN. This means that the page will load fast for users. The downside is you do lose some control as a website owner.&lt;/p&gt;
&lt;p&gt;You may be wondering, why should I make all these changes?&lt;/p&gt;
&lt;h2&gt;Why does AMP matter?&lt;/h2&gt;
&lt;p&gt;There is one major reason why you would jump through these hoops and that is Google Search results. Google gives AMP pages special sections in the search results. Here is a list of AMP only sections on &lt;a href=&quot;https://developers.google.com/search/docs/guides/about-amp&quot;&gt;Google Search&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Top stories carousel&lt;/strong&gt; - If you want to appear in the top stories section on Google then you need an AMP page.
&lt;img src=&quot;/images/1584017959-image9.png&quot; alt=&quot;top stories carousel&quot;&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Host carousel&lt;/strong&gt; - This allows you to include a carousel of items within your search result.
&lt;img src=&quot;/images/1584018104-image1.png&quot; alt=&quot;host carousel&quot;&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rich result&lt;/strong&gt; - Get a large image in the search results.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Visual stories&lt;/strong&gt; - This is a new component that shows a full-screen slideshow in the search results.
&lt;img src=&quot;/images/1584018142-image7.png&quot; alt=&quot;visual stories&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Is this a good thing? Probably not. Google is pushing its technology and using Google search as a carrot. The trouble is once your competitors start making AMP pages what can you do? If you are building a news site, you will find it hard to compete in Google Search without an AMP page.&lt;/p&gt;
&lt;p&gt;So how easy is it to convert a site to AMP? Let&apos;s look at how to do this for a &lt;a href=&quot;https://gohugo.io/&quot;&gt;Hugo&lt;/a&gt; theme.&lt;/p&gt;
&lt;h2&gt;Getting Started with AMP in Hugo&lt;/h2&gt;
&lt;p&gt;For this tutorial, we are going to start with the same Hugo theme recommended on the &lt;a href=&quot;https://gohugo.io/getting-started/quick-start/&quot;&gt;Hugo Quick Start page&lt;/a&gt;. You can install Hugo on Mac Linux using &lt;a href=&quot;https://brew.sh&quot;&gt;Homebrew&lt;/a&gt; or all supported platforms using the &lt;a href=&quot;https://gohugo.io/getting-started/installing/#binary-cross-platform&quot;&gt;binary&lt;/a&gt;. Install Hugo by following the &lt;a href=&quot;https://gohugo.io/getting-started/installing/&quot;&gt;installation instructions provided on their site&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once Hugo is installed and ready to use, let&apos;s create a new Hugo site called &quot;amp&quot;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;hugo new site amp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will create a new directory with the Hugo site default files. Next, let&apos;s add a theme - we&apos;ll use the same one recommended in the quick start guide, Ananke. Go into the new directory, initialize git and add the theme:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cd amp
git init
git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We then need to set the theme in the config:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;echo  &apos;theme = &quot;ananke&quot;&apos; &gt;&gt; config.toml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That is all we need for a basic site. You can now start the site by running the Hugo server:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;hugo server -D
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you visit the &lt;a href=&quot;http://localhost:1313/&quot;&gt;http://localhost:1313/&lt;/a&gt; in your browser you will see a page like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1584018240-image4.png&quot; alt=&quot;sample hugo page&quot;&gt;&lt;/p&gt;
&lt;h3&gt;Testing the AMP changes&lt;/h3&gt;
&lt;p&gt;Before we start making changes to the theme, we need a way of validating the AMP page. This is very important because if Google finds a single AMP error, it will not add the page to the Google cache. This means your pages will not appear as AMP in the Google Search results.&lt;/p&gt;
&lt;p&gt;The best way to test the AMP page is to use the &lt;a href=&quot;https://chrome.google.com/webstore/detail/amp-validator/nmoffdblmcmgeicmolmhobpoocbbmknc/related&quot;&gt;AMP validator chrome extension&lt;/a&gt;. This will add a lightning bolt icon to Chrome. Showing any errors found, it looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1584018274-image2.png&quot; alt=&quot;AMP chrome extension&quot;&gt;&lt;/p&gt;
&lt;p&gt;If the page is AMP compatible you will see a Green Icon, like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1584018305-image10.png&quot; alt=&quot;AMP chrome extension success&quot;&gt;&lt;/p&gt;
&lt;p&gt;Now that we have a way to verify our AMP changes, let&apos;s convert the theme to AMP.&lt;/p&gt;
&lt;h3&gt;Converting the theme to AMP&lt;/h3&gt;
&lt;p&gt;There are a few steps we need to perform to convert the Ananke theme to AMP. These include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Set as an AMP page.&lt;/li&gt;
&lt;li&gt;Add the AMP script.&lt;/li&gt;
&lt;li&gt;Add the AMP boilerplate CSS.&lt;/li&gt;
&lt;li&gt;Add a canonical link.&lt;/li&gt;
&lt;li&gt;Make the CSS inline.&lt;/li&gt;
&lt;li&gt;Make the JS AMP compatible.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You may notice a couple of CSS tasks above. There are very strict rules around CSS on AMP pages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No external stylesheets.&lt;/li&gt;
&lt;li&gt;Only one style tag on the page.&lt;/li&gt;
&lt;li&gt;Up to 50kb of CSS in the style tag.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In my opinion, handling the CSS is the hardest part when converting the theme as it is at 82kb.&lt;/p&gt;
&lt;p&gt;Let&apos;s go through each step to convert it.&lt;/p&gt;
&lt;h4&gt;1. Set as an AMP page&lt;/h4&gt;
&lt;p&gt;To make the page AMP is straight forward all you need to do is add the keyword &lt;code&gt;amp&lt;/code&gt; to the &lt;code&gt;html&lt;/code&gt; tag at the top of the theme,nThe file you need to change is &lt;code&gt;baseof.html&lt;/code&gt; and you can find this file in &lt;code&gt;themes/ananke/layouts/_default/&lt;/code&gt;. Here is the top of the &lt;code&gt;_baseof&lt;/code&gt; page:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;#x3C;!DOCTYPE html&gt;
&amp;#x3C;html lang=&quot;{{ $.Site.LanguageCode | default &quot;en&quot; }}&quot;&gt;
&amp;#x3C;head&gt;
    ...
&amp;#x3C;/head&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To convert this to an AMP page you need to add the keyword &lt;code&gt;amp&lt;/code&gt; like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;#x3C;!DOCTYPE html&gt;
&amp;#x3C;html amp lang=&quot;{{ $.Site.LanguageCode | default &quot;en&quot; }}&quot;&gt;
&amp;#x3C;head&gt;
    ...
&amp;#x3C;/head&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Simple right! We have only just started if we load the page we can see that there are still 8 AMP errors we need to fix:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1584018336-image8.png&quot; alt=&quot;amp errors&quot;&gt;&lt;/p&gt;
&lt;p&gt;Let&apos;s start to fix them.&lt;/p&gt;
&lt;h4&gt;2. Add the AMP script&lt;/h4&gt;
&lt;p&gt;The first fix we need to make is to add the AMP script tag. It is best to place this near the end of the &lt;code&gt;head&lt;/code&gt; tag like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;#x3C;!DOCTYPE html&gt;
&amp;#x3C;html amp lang=&quot;{{ $.Site.LanguageCode | default &quot;en&quot; }}&quot;&gt;
&amp;#x3C;head&gt;
    ...
    &amp;#x3C;script async src=&quot;https://cdn.ampproject.org/v0.js&quot;&gt;&amp;#x3C;/script&gt;
&amp;#x3C;/head&gt;
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have the AMP script loaded we can click on the lightning bolt icon in chrome. This will show us a list of all the 7 errors found on the page:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1584018367-image6.png&quot; alt=&quot;AMP errors list&quot;&gt;&lt;/p&gt;
&lt;h4&gt;3. Add the AMP boilerplate CSS&lt;/h4&gt;
&lt;p&gt;The next fix is to add the boilerplate styles used by AMP. Insert these above the script we added like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;#x3C;!DOCTYPE html&gt;
&amp;#x3C;html amp lang=&quot;{{ $.Site.LanguageCode | default &quot;en&quot; }}&quot;&gt;
&amp;#x3C;head&gt;
    ...
    &amp;#x3C;style amp-boilerplate&gt;
        body {
            -webkit-animation: -amp-start 8s steps(1, end) 0s 1 normal both;
            -moz-animation: -amp-start 8s steps(1, end) 0s 1 normal both;
            -ms-animation: -amp-start 8s steps(1, end) 0s 1 normal both;
            animation: -amp-start 8s steps(1, end) 0s 1 normal both;
        }
        @-webkit-keyframes -amp-start {
            from {
                visibility: hidden;
            }
            to {
                visibility: visible;
            }
        }
        @-moz-keyframes -amp-start {
            from {
                visibility: hidden;
            }
            to {
                visibility: visible;
            }
        }
        @-ms-keyframes -amp-start {
            from {
                visibility: hidden;
            }
            to {
                visibility: visible;
            }
        }
        @-o-keyframes -amp-start {
            from {
                visibility: hidden;
            }
            to {
                visibility: visible;
            }
        }
        @keyframes -amp-start {
            from {
                visibility: hidden;
            }
            to {
                visibility: visible;
            }
        }
    &amp;#x3C;/style&gt;
    &amp;#x3C;noscript
        &gt;&amp;#x3C;style amp-boilerplate&gt;
            body {
                -webkit-animation: none;
                -moz-animation: none;
                -ms-animation: none;
                animation: none;
            }
        &amp;#x3C;/style&gt;&amp;#x3C;/noscript
    &gt;
    &amp;#x3C;script async src=&quot;https://cdn.ampproject.org/v0.js&quot;&gt;&amp;#x3C;/script&gt;
&amp;#x3C;/head&gt;
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;AMP uses these styles to show a fade loading animation.&lt;/p&gt;
&lt;h4&gt;4. Add a canonical link&lt;/h4&gt;
&lt;p&gt;This next fix is adding a &lt;a href=&quot;https://pagedart.com/blog/what-is-a-canonical-url/&quot;&gt;canonical link&lt;/a&gt; which should point to the URL of the page. If you are creating only an AMP page then this should be the same URL. If you have two versions of the website one HTML and one AMP, then use the HTML URL.&lt;/p&gt;
&lt;p&gt;My recommendation is to create only an AMP page, not both an HTML and AMP page.&lt;/p&gt;
&lt;p&gt;When mobile sites were first on the scene many websites created two pages. One that worked on desktop and one for mobile. These sites became difficult to maintain, with twice the work for new features. That is why I recommend to go all in and only have an AMP version of the page.&lt;/p&gt;
&lt;p&gt;Previously, it was common for people to create separate AMP-specific versions of their pages due to the restrictions imposed. For example, you could not run custom JavaScript. AMP has evolved and &lt;a href=&quot;https://searchengineland.com/you-can-now-add-custom-javascript-to-amp-pages-320997&quot;&gt;since August 2019&lt;/a&gt; you can now add custom scripts. This reduces the need to maintain two versions. Yet, if you still need to support both HTML and AMP, Hugo can do thisby using the &lt;a href=&quot;https://gohugo.io/templates/output-formats/&quot;&gt;custom output formats&lt;/a&gt; feature, which allows you to output both an AMP and HTML version. This feature goes beyond the scope of this article.&lt;/p&gt;
&lt;p&gt;We will create an AMP only site and set the canonical like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;#x3C;!DOCTYPE html&gt;\ &amp;#x3C;html amp lang=&quot;{{ $.Site.LanguageCode | default &quot;en&quot; }}&quot;&gt;\
&amp;#x3C;head&gt;
    \ ...\
    &amp;#x3C;link rel=&quot;canonical&quot; href=&quot;{{ .Permalink }}&quot; /&gt;
    \
    &amp;#x3C;style amp-boilerplate&gt;
        body {
            -webkit-animation: -amp-start 8s steps(1, end) 0s 1 normal both;
            -moz-animation: -amp-start 8s steps(1, end) 0s 1 normal both;
            -ms-animation: -amp-start 8s steps(1, end) 0s 1 normal both;
            animation: -amp-start 8s steps(1, end) 0s 1 normal both;
        }
        @-webkit-keyframes -amp-start {
            from {
                visibility: hidden;
            }
            to {
                visibility: visible;
            }
        }
        @-moz-keyframes -amp-start {
            from {
                visibility: hidden;
            }
            to {
                visibility: visible;
            }
        }
        @-ms-keyframes -amp-start {
            from {
                visibility: hidden;
            }
            to {
                visibility: visible;
            }
        }
        @-o-keyframes -amp-start {
            from {
                visibility: hidden;
            }
            to {
                visibility: visible;
            }
        }
        @keyframes -amp-start {
            from {
                visibility: hidden;
            }
            to {
                visibility: visible;
            }
        }
    &amp;#x3C;/style&gt;
    &amp;#x3C;noscript
        &gt;&amp;#x3C;style amp-boilerplate&gt;
            body {
                -webkit-animation: none;
                -moz-animation: none;
                -ms-animation: none;
                animation: none;
            }
        &amp;#x3C;/style&gt;&amp;#x3C;/noscript
    &gt;
    \
    &amp;#x3C;script async src=&quot;https://cdn.ampproject.org/v0.js&quot;&gt;&amp;#x3C;/script&gt;
    \&amp;#x3C;/head
&gt;\ ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are now down to two final errors, custom CSS and custom Javascript.&lt;/p&gt;
&lt;h4&gt;5. Make the CSS inline&lt;/h4&gt;
&lt;p&gt;There are very strict rules for CSS in AMP pages. You can only have 50kb of CSS and there can be only one style tag on the page.&lt;/p&gt;
&lt;p&gt;This theme has a CSS file of 82kb so we need to lose 32kb! This is one of the biggest challenges you will face when converting themes from HTML to AMP pages. Luckily, this project uses PostCSS so we can remove some of the unused CSS easily.&lt;/p&gt;
&lt;p&gt;Once removing the unused CSS we need to inline the style like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;#x3C;!DOCTYPE html&gt;
&amp;#x3C;head&gt;
    ...
    &amp;#x3C;style amp-custom&gt;
        ...;
    &amp;#x3C;/style&gt;
    ...
&amp;#x3C;/head&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After removing all of the unnecessary styles I could get the file down to 36.4kb. In the theme, we will need to remove the links to the external style files and inline the style instead.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;_baseof.html&lt;/code&gt; template will look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;#x3C;!DOCTYPE html&gt;
&amp;#x3C;html amp lang=&quot;{{ $.Site.LanguageCode | default &quot;en&quot; }}&quot;&gt;
&amp;#x3C;head&gt;
    ...
    &amp;#x3C;link rel=&quot;canonical&quot; href=&quot;{{ .Permalink }}&quot; /&gt;

    &amp;#x3C;style amp-custom&gt;
        ...;
    &amp;#x3C;/style&gt;
    &amp;#x3C;style amp-boilerplate&gt;
        body {
            -webkit-animation: -amp-start 8s steps(1, end) 0s 1 normal both;
            -moz-animation: -amp-start 8s steps(1, end) 0s 1 normal both;
            -ms-animation: -amp-start 8s steps(1, end) 0s 1 normal both;
            animation: -amp-start 8s steps(1, end) 0s 1 normal both;
        }
        @-webkit-keyframes -amp-start {
            from {
                visibility: hidden;
            }
            to {
                visibility: visible;
            }
        }
        @-moz-keyframes -amp-start {
            from {
                visibility: hidden;
            }
            to {
                visibility: visible;
            }
        }
        @-ms-keyframes -amp-start {
            from {
                visibility: hidden;
            }
            to {
                visibility: visible;
            }
        }
        @-o-keyframes -amp-start {
            from {
                visibility: hidden;
            }
            to {
                visibility: visible;
            }
        }
        @keyframes -amp-start {
            from {
                visibility: hidden;
            }
            to {
                visibility: visible;
            }
        }
    &amp;#x3C;/style&gt;
    &amp;#x3C;noscript
        &gt;&amp;#x3C;style amp-boilerplate&gt;
            body {
                -webkit-animation: none;
                -moz-animation: none;
                -ms-animation: none;
                animation: none;
            }
        &amp;#x3C;/style&gt;&amp;#x3C;/noscript
    &gt;
    &amp;#x3C;script async src=&quot;https://cdn.ampproject.org/v0.js&quot;&gt;&amp;#x3C;/script&gt;
&amp;#x3C;/head&gt;
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The last step is to make the custom JavaScript AMP compatible.&lt;/p&gt;
&lt;h4&gt;6. Make the JS AMP compatible&lt;/h4&gt;
&lt;p&gt;The first thing you need to do is add a custom amp component called &lt;code&gt;amp-script&lt;/code&gt;. Add this to the head:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;#x3C;html amp lang=&quot;{{ $.Site.LanguageCode | default &quot;en&quot; }}&quot;&gt;\
&amp;#x3C;head&gt;
    \ ...\
    &amp;#x3C;script async custom-element=&quot;amp-script&quot; src=&quot;https://cdn.ampproject.org/v0/amp-script-0.1.js&quot;&gt;&amp;#x3C;/script&gt;
    \&amp;#x3C;/head
&gt;\ ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will allow us to use the &lt;code&gt;amp-script&lt;/code&gt; tag on the page. In the Ananke theme, there is only a single JavaScript file. That loads from a partial file called &lt;code&gt;site-scripts.html&lt;/code&gt;. Here are the contents of that file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;{{ $script := .Site.Data.webpack_assets.app }}\
{{ with $script.js }}\
 &amp;#x3C;script  src=&quot;{{ relURL (printf &quot;%s%s&quot; &quot;dist/&quot; .) }}&quot;&gt;&amp;#x3C;/script&gt;\
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We need to change the code so that it loads amp-script like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;{{ $script := .Site.Data.webpack_assets.app }}\
{{ with $script.js }}\
 &amp;#x3C;amp-script  src=&quot;{{ absURL (printf &quot;%s%s&quot; &quot;dist/&quot; .) }}&quot;&gt;&amp;#x3C;/amp-script&gt;\
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After making the final change check the validator. You should see that the page has only one error which is this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1584018538-image5.png&quot; alt=&quot;invalid protocol error&quot;&gt;&lt;/p&gt;
&lt;p&gt;This is because we are not running the site over https. Running SSL on localhost is a complicated topic, but, assuming your host is configured for SSL, once you deploy the site, it will pass and the AMP page will be valid.&lt;/p&gt;
&lt;p&gt;If you would like to see all the changes I made then you can see them &lt;a href=&quot;https://github.com/stephenkeep/hugo-amp-example&quot;&gt;in this repo.&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;We have looked at why, despite the contriversies, you may still need to care about AMP and what it takes to make a Hugo theme AMP compatible. Although it&apos;s not always straightforward, it is possible to convert existing themes to support AMP. Depending on the industry your site is in you may have to include AMP pages and hopefully this tutorial has given you the guidance you need to get started.&lt;/p&gt;
&lt;h4&gt;About the Author&lt;/h4&gt;
&lt;p&gt;Steve Keep has worked in IT for over two decades, mostly as a software developer. He’s a web enthusiast who finds time to create sites using the latest technology. From IoT, mobile and AI he has been lucky enough to have worked with it all. He blogs about the web at &lt;a href=&quot;https://pagedart.com&quot;&gt;pagedart.com&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Data-driven JAMstack with Sourcebit]]></title><description><![CDATA[Sourcebit is a new open source project that aims to make it easy for developers to connect their JAMstack site to data coming from a broad range of sources. In this tutorial, we explore how to use it.]]></description><link>https://www.stackbit.com/blog/data-driven-jamstack-sourcebit/</link><guid isPermaLink="false">https://www.stackbit.com/blog/data-driven-jamstack-sourcebit/</guid><pubDate>Wed, 26 Feb 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;If I wanted to make a cake, I need the right ingredients - eggs, sugar and flour. However, eggs, sugar and flour are not a cake. It requires putting those ingredients together in a particular way to create a cake, using the right recipe and tools.&lt;/p&gt;
&lt;p&gt;Similarly, a headless CMS, a static site generator and a continuous deployment service are typical ingredients in a JAMstack site. JAMstack also requires putting those ingredients together in a particular way to create a site, but, in many cases, developers were left to accomplish this without a recipe or tools. For example, how do I connect my content and assets in Contentful to my Hugo site? Or how about pulling my Sanity content into my Jekyll site?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/stackbithq/sourcebit&quot;&gt;Sourcebit&lt;/a&gt; is a new, MIT-licensed open source project that solves this problem by giving you both the tools and the &quot;recipe&quot; for building a JAMstack site that is driven by your data. In this article, I&apos;ll go into detail about what Sourcebit is, why it is necessary and how to get started using it. It&apos;s worth noting that Sourcebit is completely customizable and extensible via plugins, and a future post will cover those topics in more detail.&lt;/p&gt;
&lt;h2&gt;Introducing Sourcebit&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/stackbit/sourcebit&quot;&gt;&lt;img src=&quot;/images/Sourcebit.svg&quot; alt=&quot;Sourcebit&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sourcebit is a new open source project that aims to make it easy for developers to connect their JAMstack site to data coming from a broad range of sources. It does this by abstracting the steps for consuming data from any source:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pulling the data and assets from the source;&lt;/li&gt;
&lt;li&gt;Transforming that data, if needed;&lt;/li&gt;
&lt;li&gt;Making the data accessible where it is needed by the static site generator. This can be as files or by calling the Sourcebit module from within the site&apos;s code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Within Sourcebit, each of these three steps is represented by plugin point: a source; a transformation; and a target.&lt;/p&gt;
&lt;p&gt;So, let&apos;s take our example from above where we want to pull content and assets from Contentful and use them locally in a Hugo site. The source plugin would be for Contentful, the transformation plugin would handle pulling assets and modifying content with the appropriate local URLs and, finally, the target plugin would be Hugo. Sourcebit will pull your content from Contentful, place it into the appropriate location in your Hugo project and then you can continue through the build and deployment process.&lt;/p&gt;
&lt;p&gt;The best part is, Sourcebit is designed to walk you through the process of setting all that up - there&apos;s no need to hand-code a complicated JSON or YAML configuration.&lt;/p&gt;
&lt;p&gt;As part of the initial release, Sourcebit has pre-built plugins for Contentful and Sanity as headless CMS sources, Hugo and Jekyll as static site generators and an asset plugin to pull assets locally and transform the references in your content.&lt;/p&gt;
&lt;h3&gt;Example Site&lt;/h3&gt;
&lt;p&gt;In order to walk us through how Sourcebit works, I&apos;ve created an &lt;a href=&quot;https://github.com/remotesynth/control-fan-page&quot;&gt;example project&lt;/a&gt; that uses Sourcebit to populate content and assets that are pulled from Contentful. The site is intended to emulate a &quot;fan page&quot; for the &lt;a href=&quot;https://controlgame.com/&quot;&gt;video game Control&lt;/a&gt; (great game - highly recommended!). Here are some details:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The site is populated with some example content and assets from the &lt;a href=&quot;https://control.fandom.com/wiki/Control_Wiki&quot;&gt;Control Wiki&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&quot;http://contentful.com/&quot;&gt;Contentful&lt;/a&gt; content model has two types:
_ An &quot;About&quot; type that represents a standard &quot;About Us&quot; type page.
&lt;img src=&quot;/images/1582723760-about-model-sm.png&quot; alt=&quot;The About model&quot;&gt;
_ A &quot;Blog Post&quot; model that represents a group of posts.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/1582723782-post-model-sm.png&quot; alt=&quot;The About model&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is a standard &lt;a href=&quot;https://gohugo.io/&quot;&gt;Hugo&lt;/a&gt; site created without any pre-built in CMS integration.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can find the source code for the project at &lt;a href=&quot;https://github.com/remotesynth/control-fan-page&quot;&gt;github.com/remotesynth/control-fan-page&lt;/a&gt;. You can see what the finished project with the populated content looks like at &lt;a href=&quot;https://control-fan-page-demo.netlify.com/&quot;&gt;control-fan-page-demo.netlify.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1582723780-finished-project-sm.png&quot; alt=&quot;The finished project using Sourcebit&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Getting Started with Sourcebit&lt;/h2&gt;
&lt;p&gt;Let&apos;s walk through an example of how you can use Sourcebit in your project.&lt;/p&gt;
&lt;h3&gt;Interactive Command Line Configuration&lt;/h3&gt;
&lt;p&gt;Sourcebit has an interactive set up process that will generate the configuration needed to connect a data source to a local project. This makes it really easy to get started - just enter the following command into your terminal:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npx create-sourcebit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sourcebit will start by asking you which of the available source plugins (currently Contentful, Sanity or a mock data plugin) you would like to connect. Select using the arrow key and press the spacebar on the ones you&apos;d like to choose.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1582723765-create-step1-sm.png&quot; alt=&quot;choosing a source&quot;&gt;&lt;/p&gt;
&lt;p&gt;Next, optionally select from one of the available transformation plugins. Currently, only the assets plugin is available, which will pull assets from the source locally and replace the URLs in the content with the appropriate local URL.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1582723769-create-step2-sm.png&quot; alt=&quot;choosing a transformation&quot;&gt;&lt;/p&gt;
&lt;p&gt;Finally, select the target plugin from the available options (Jekyll or Hugo as of this writing).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1582723771-create-step3-sm.png&quot; alt=&quot;choosing a target&quot;&gt;&lt;/p&gt;
&lt;p&gt;Once the choices are made, Sourcebit will retrieve and install the necessary plugins for you and begin walking you through the steps to configure each.&lt;/p&gt;
&lt;h4&gt;Configuring the Contentful Source Plugin&lt;/h4&gt;
&lt;p&gt;First up, I need to configure the Contentful plugin. Sourcebit begins by asking for a personal access token so that it can be configured to have access to the content. You can get a &lt;a href=&quot;https://app.contentful.com/account/profile/cma_tokens&quot;&gt;Contentful personal access token here&lt;/a&gt;. Then it will ask which space you are working with, listing the available options. It does the same for environments, however, in my case, I only have one environment so it smartly skips that step.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1582723773-create-step4-sm.png&quot; alt=&quot;Contentful options&quot;&gt;&lt;/p&gt;
&lt;h4&gt;Configuring the Asset Transformation Plugin&lt;/h4&gt;
&lt;p&gt;Next, I need to set up the assets transformation plugin. The first thing is to specify the folder within the site where assets will be saved. Sourcebit lists some common answers, or I can specify my own, which is what I choose because Hugo prefers static assets to be under the &lt;code&gt;/static&lt;/code&gt; directory. I&apos;ll enter &lt;code&gt;static/images&lt;/code&gt; as the directory.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1582723775-create-step5-sm.png&quot; alt=&quot;Asset options&quot;&gt;&lt;/p&gt;
&lt;p&gt;The next question is what the relative URL to the assets will be. Sourcebit assumes the same value as the downloaded assets, but in this scenario I want to enter just &lt;code&gt;/images&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Configuring the Hugo Target Plugin&lt;/h4&gt;
&lt;p&gt;It is time for me to configure how Sourcebit handles the Contentful data and saves it for Hugo. Sourcebit sees the content models from Contentful and asks me if they should be saved as pages (i.e. Markdown files), Data (i.e. JSON or YAML files) or if they should be skipped. Both of my data models represent pages.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1582723778-create-step6-sm.png&quot; alt=&quot;Hugo destination options&quot;&gt;&lt;/p&gt;
&lt;p&gt;The next step will ask a series of questions about each content model. Each step shows actual source data examples to help guide you in making the proper selections. The steps for Hugo are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Whether it represents a single page or a series of pages. In my case, &quot;About&quot; is a single page but &quot;Blog Post&quot; is a series of pages.&lt;/li&gt;
&lt;li&gt;Which directory the content files will be placed in. For the &quot;About&quot; page, it simply goes in &lt;code&gt;content&lt;/code&gt; but blog posts will go in &lt;code&gt;content/posts&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;How I want to generate the file name. In both cases, I chose to use the content&apos;s title field to generate the file name.&lt;/li&gt;
&lt;li&gt;In the case of a collection of posts, it asks if I want to append the date to the file name. I choose no.&lt;/li&gt;
&lt;li&gt;How to generate the value for the layout frontmatter field. I specify a static value for both, which is &lt;code&gt;page&lt;/code&gt; for &quot;About&quot; and &lt;code&gt;post&lt;/code&gt; for blog posts.&lt;/li&gt;
&lt;li&gt;Lastly, I select which field represents the page&apos;s content. In both of my cases, that is &quot;body&quot;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can see the entire process of configuring Hugo that I described in the short video below.&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/Dm4So1UPd9c&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;When everything is done, Sourcebit generates a &lt;code&gt;Sourcebit.js&lt;/code&gt; file. This is the configuration I need to use to run the content pull using Sourcebit. Any sensitive information, such as the Contentful personal access token, are placed in a &lt;code&gt;.env&lt;/code&gt; file - as such, this file should not be checked into a public repository. The final step is to run &lt;code&gt;npm install&lt;/code&gt; to install the necessary dependencies.&lt;/p&gt;
&lt;h4&gt;Advanced Configuration&lt;/h4&gt;
&lt;p&gt;Since Sourcebit stores all of its configuration in a JavaScript file (&lt;code&gt;Sourcebit.js&lt;/code&gt;), it allows for all kinds of additional advanced customization of its functionality using your existing code skills. For example, I could modify the &lt;code&gt;writeFile&lt;/code&gt; function that outputs the final file content to disk and run additional code to tweak the body content before passing it on.&lt;/p&gt;
&lt;h3&gt;Basic Usage&lt;/h3&gt;
&lt;p&gt;Now that everything is configured I can use Sourcebit to populate my site. Below is a screenshot of my site before running Sourcebit. It has no content.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1582729061-empty-site-sm.png&quot; alt=&quot;Unpopulated site&quot;&gt;&lt;/p&gt;
&lt;p&gt;However, I simply need to run &lt;code&gt;sourcebit fetch&lt;/code&gt; and all of my Contentful content gets pulled and placed into the proper location as shown below.&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/9-7U2m3OIlM&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;Note: Using &lt;code&gt;sourcebit fetch&lt;/code&gt; in this manner requires that you have your local npm&lt;em&gt;modules on your PATH. If you do not, you will need to run `./node&lt;/em&gt;modules/.bin/sourcebit fetch` or &lt;a href=&quot;https://coderwall.com/p/i5z1cg/automatically-update-path-with-proper-node_modules-bin&quot;&gt;follow the instructions here&lt;/a&gt; to update your PATH.&lt;/p&gt;
&lt;p&gt;Sourcebit can also watch for any changes in the source (in this case, Contentful) by appending the &lt;code&gt;--watch&lt;/code&gt; flag and immediately pull them. In the video below, I make a change and publish it to Contentful and seconds later my local site auto-refreshes with the update.&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/mozvlfrBqb4&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;h3&gt;Adding Sourcebit Into Your Netlify Workflow&lt;/h3&gt;
&lt;p&gt;If you use &lt;a href=&quot;https://www.netlify.com/products/dev/&quot;&gt;Netlify Dev&lt;/a&gt; for your local development workflow, it&apos;s easy to incorporate Sourcebit into your local development workflow.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Update your &lt;code&gt;package.json&lt;/code&gt; scripts to include a script to run Sourcebit prior to running the command to serve your project using the local webserver:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&quot;scripts&quot;: {
&quot;serve&quot;: &quot;(sourcebit fetch --watch) &amp;#x26; hugo serve&quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;2. Modify the `netlify.toml` file in your project to add a custom build command:

```toml
[dev]
command = &quot;npm run serve&quot;
```

Now whenever you run `netlify dev` it will pull all the content prior to serving it and set Sourcebit up to watch for content changes during development. When you are ready, the files can be pushed to your git repository and then live on Netlify.

## Next Steps

Obviously, there is a lot more you can do with Sourcebit. You could use it in a similar manner with the Sanity source plugin or Jekyll target plugin. You can also use Sourcebit to configure sources and then call it [as a CommonJS module](https://github.com/stackbithq/sourcebit#as-a-commonjs-module) from within your site code - this can be useful for incorporating it into frameworks like [Next.js](https://nextjs.org/), for instance. You can also write your own source, transformation or destination plugins - there&apos;s even a [sample plugin](https://github.com/stackbithq/sourcebit-sample-plugin#readme) to guide you. If you create one, be sure to share it with us!

Please check out the [Sourcebit repository](https://github.com/stackbithq/sourcebit) for more documentation. And when you give Sourcebit a try, please let us know what you think.
&lt;/code&gt;&lt;/pre&gt;</content:encoded></item><item><title><![CDATA[3 Strategies for Migrating from Wordpress to JAMstack]]></title><description><![CDATA[Migrating from Wordpress to JAMstack offers a number of benefits, but it can be difficult to know what the best strategy for transitioning content is. In this post, Brian Rinaldi shares some potential strategies for making the move.]]></description><link>https://www.stackbit.com/blog/wordpress-to-jamstack/</link><guid isPermaLink="false">https://www.stackbit.com/blog/wordpress-to-jamstack/</guid><pubDate>Wed, 19 Feb 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;So much of the discussion around the JAMstack focuses on &quot;greenfield&quot; projects. This is useful in many ways because it can highlight the many options and benefits of the JAMstack architecture without getting bogged down in discussions around complex migrations. However, there&apos;s a good chance that your project isn&apos;t starting from scratch and you&apos;ll have to deal with a migration from an existing CMS architecture. Given that Wordpress is the content management in use on upwards of &lt;a href=&quot;https://w3techs.com/technologies/details/cm-wordpress&quot;&gt;65% of sites with a known CMS&lt;/a&gt;, there&apos;s also a good chance you are moving from Wordpress.&lt;/p&gt;
&lt;p&gt;First the bad news: migrations are painful. Not &quot;can be&quot;, they are. That doesn&apos;t mean they aren&apos;t worth it. They definitely can be, and the JAMstack offers some major benefits on things like cost, speed and security (to name a few) that can make it worth the effort. The good news is that there are multiple strategies to mitigate this pain when moving from Wordpress. In this post, I want to look at three different strategies you can take when moving from Wordpress to JAMstack.&lt;/p&gt;
&lt;h3&gt;Some Things to Consider&lt;/h3&gt;
&lt;p&gt;Before we start, it is worth considering that there are a ton of factors that can impact the complexity of the move from Wordpress. Things like plugins and shortcodes can all make a transition very complex - especially for a large site with an expansive amount of legacy content. Some strategies can minimize those complexities, but given the myriad of options Wordpress offers, your mileage may vary.&lt;/p&gt;
&lt;p&gt;I should also note that the strategies shown here are broad concepts. While I will show code n some cases, I&apos;m only covering the very basics to demonstrate the broader strategy. You can find the repository containing the example code shown below at &lt;a href=&quot;https://github.com/remotesynth/Wordpress-to-JAMstack-Options&quot;&gt;https://github.com/remotesynth/Wordpress-to-JAMstack-Options&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: For a detailed look at what it takes to move a large site with a lot of content, I highly recommend two posts by Sarah Drasner of Netlify that discuss the migration of Smashing Magazine. The first, &lt;a href=&quot;https://www.smashingmagazine.com/2020/01/migration-from-wordpress-to-JAMstack/&quot;&gt;How Smashing Magazine Manages Content: Migration From WordPress To JAMstack&lt;/a&gt;, is a retrospective on the project, how it was accomplished and lessons learned. The second, &lt;a href=&quot;https://www.smashingmagazine.com/2020/02/headless-wordpress-site-JAMstack/&quot;&gt;How To Create A Headless WordPress Site On The JAMstack&lt;/a&gt; (co-authored by Geoff Graham), goes into great detail about the way they would recommend doing it today given the lessons learned.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Option 1: Use the Wordpress REST API&lt;/h2&gt;
&lt;p&gt;Wordpress comes with a &lt;a href=&quot;https://developer.wordpress.org/rest-api/&quot;&gt;REST API&lt;/a&gt; that gives you access to all the content on the site. This gives Wordpress the ability to be used as a headless CMS. One of the benefits of this strategy is that the Wordpress API delivers the rendered content, meaning that you don&apos;t have to worry about transitioning things that might be automatically handled within the content by shortcodes or even most plugins.&lt;/p&gt;
&lt;p&gt;Let&apos;s look at an example. In this example, I have a very basic Wordpress site with a couple posts that is set up using &lt;a href=&quot;https://localbyflywheel.com/&quot;&gt;Local by Flywheel&lt;/a&gt;. Using a tool like &lt;a href=&quot;https://nextjs.org/&quot;&gt;Next.js&lt;/a&gt; I can easily pull posts from the Wordpress API and display them. My simple example site has two pages, one to display a list of posts and one to display the contents of the post (note that in this example I am only addressing posts and only a small portion of the content that Wordpress sends over with a post).&lt;/p&gt;
&lt;p&gt;Here&apos;s a simple &lt;code&gt;pages/index.js&lt;/code&gt; template that calls the API on my local Wordpress site to get all posts and list them. Keep in mind that there are &lt;a href=&quot;https://developer.wordpress.org/rest-api/reference/posts/#arguments&quot;&gt;a lot of arguments&lt;/a&gt; available to this API that I am not using here but would be useful in a more &quot;real world&quot; context. Also, depending on how your Wordpress URLs are set up, you would want to adjust the URL structure of your site to match. For now, I am just using the numerical ID of the post for the URL.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import React from &apos;react&apos;;
import Link from &apos;next/link&apos;;
import fetch from &apos;isomorphic-unfetch&apos;;

const Home = (props) =&gt; (
    &amp;#x3C;div&gt;
        &amp;#x3C;h1&gt;Wordpress Posts&amp;#x3C;/h1&gt;
        {props.posts.map((post) =&gt; (
            &amp;#x3C;li key={post.id}&gt;
                &amp;#x3C;Link href=&quot;/posts/[id]&quot; as={`/posts/${post.id}`}&gt;
                    &amp;#x3C;a
                        dangerouslySetInnerHTML={{
                            __html: post.title.rendered
                        }}
                    &gt;&amp;#x3C;/a&gt;
                &amp;#x3C;/Link&gt;
            &amp;#x3C;/li&gt;
        ))}
    &amp;#x3C;/div&gt;
);

export default Home;

Home.getInitialProps = async function () {
    const res = await fetch(&apos;http://testsite.local/wp-json/wp/v2/posts&apos;);
    const data = await res.json();

    return {
        posts: data.map((entry) =&gt; entry)
    };
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let&apos;s look at the post page, which is handled by &lt;code&gt;pages/[slug].js&lt;/code&gt; in the Next.js site.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import * as React from &apos;react&apos;;
import Link from &apos;next/link&apos;;
import fetch from &apos;isomorphic-unfetch&apos;;

export default function PostTemplate(props) {
    return (
        &amp;#x3C;div&gt;
            &amp;#x3C;Link href=&quot;/&quot;&gt;
                &amp;#x3C;a&gt;&amp;#x26;lt; Home&amp;#x3C;/a&gt;
            &amp;#x3C;/Link&gt;
            &amp;#x3C;h1
                dangerouslySetInnerHTML={{
                    __html: props.post.title.rendered
                }}
            &gt;&amp;#x3C;/h1&gt;
            &amp;#x3C;div
                dangerouslySetInnerHTML={{
                    __html: props.post.content.rendered
                }}
            &gt;&amp;#x3C;/div&gt;
        &amp;#x3C;/div&gt;
    );
}

PostTemplate.getInitialProps = async function (ctx) {
    const { slug } = ctx.query;
    const res = await fetch(`http://testsite.local/wp-json/wp/v2/posts/${slug}`);
    const post = await res.json();
    return {
        post
    };
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here I am calling my Wordpress API with the ID of the post that is passed in the URL of the page. In setting both the title and body on the output, I am using the rendered HTML that the Wordpress API provides.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: An alternative to writing the direct calls to the API is to use something like &lt;a href=&quot;https://github.com/WP-API/node-wpapi&quot;&gt;node-wpapi&lt;/a&gt;. This could be useful for use cases that are more complex than my admittedly simple example.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;While Next.js does a great job of handling server-side rendering and local caching, this is arguably not a JAMstack site yet since the frontend at this dynamic with server-side rendering (SSR) that would require a server. However, Next.js provides the ability to &lt;a href=&quot;https://nextjs.org/learn/excel/static-html-export&quot;&gt;export a site into static files&lt;/a&gt; that can be hosted without SSR. To do this, we need to add a &lt;code&gt;next.config.js&lt;/code&gt; file into the root of our site where we can add code and configuration for handling the export.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const fetch = require(&apos;isomorphic-unfetch&apos;);

module.exports = {
    exportTrailingSlash: true,
    exportPathMap: async function () {
        const paths = {
            &apos;/&apos;: { page: &apos;/&apos; }
        };
        const res = await fetch(&apos;http://testsite.local/wp-json/wp/v2/posts&apos;);
        const data = await res.json();
        const posts = data.map((entry) =&gt; entry);

        posts.forEach((post) =&gt; {
            paths[`/posts/${post.id}`] = { page: &apos;/posts/[slug]&apos;, query: { slug: post.id } };
        });

        return paths;
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This configuration also needs to call the Wordpress API so that it can set up all the paths to be exported. Once this is set up, we need to run a build and then an export (note that these commands will need to have been added to your &lt;code&gt;package.json&lt;/code&gt; scripts as &lt;a href=&quot;https://nextjs.org/learn/excel/static-html-export/export-the-index-page&quot;&gt;shown here&lt;/a&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm run build
npm run export
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The site will be exported into the &lt;code&gt;/out&lt;/code&gt; directory in your project. If you start up a local web server in the &lt;code&gt;/out&lt;/code&gt; directory, you will see that we can now browse our Wordpress content on a fully JAMstackified (that&apos;s a thing now - make it so!) site.&lt;/p&gt;
&lt;p&gt;One last thing here - if you want to continue to use the Wordpress backend to manage your site, you wouldn&apos;t want to run this and then deploy every time someone makes a change, but there are many ways to trigger a build when a change is made in Wordpress. For example, if your site is hosted at Netlify, you could use this &lt;a href=&quot;https://github.com/iamtimsmith/wp-trigger-netlify-build&quot;&gt;WP Trigger Netlify Build&lt;/a&gt; plugin. Alternatively, you could use something like Zapier or IFTTT to trigger a build. There are a number of other solutions to this depending on where your site is deployed, but the point is, it should require no direct developer intervention to have changes deployed.&lt;/p&gt;
&lt;h2&gt;Option 2: Export Content to Flat Files&lt;/h2&gt;
&lt;p&gt;In some cases, you may want to have actual physical files of your content for your site. This is useful, for instance, with static site generators like Hugo or Jekyll or if you are doing a one-time export of your content rather than continuing to use the Wordpress backend for managing content. There are multiple ways to handle that.&lt;/p&gt;
&lt;p&gt;Wordpress does provide a default export functionality, however the file it delivers is mostly useful for importing to another Wordpress site as it doesn&apos;t give you the rendered HTML in the manner the API does. For example, you can embed a YouTube video in Wordpress using just the URL of the video. The rendered content includes the iframe, but the export includes this in post metadata in the exported XML rather than in the text of the post. Luckily there are better ways to handle this.&lt;/p&gt;
&lt;p&gt;If you wish to do a one-time export, many static site generators include tools to migrate off Wordpress. For example, Hugo has a &lt;a href=&quot;https://github.com/SchumacherFM/wordpress-to-hugo-exporter&quot;&gt;Wordpress to Hugo Exporter&lt;/a&gt;. Likewise, if you&apos;re using Gatsby, there is a &lt;a href=&quot;https://github.com/tinacms/wp-gatsby-markdown-exporter&quot;&gt;WP Gatsby Markdown Exporter&lt;/a&gt; that you can run via the command line. Other SSGs have similar options.&lt;/p&gt;
&lt;p&gt;There&apos;s another option if you either want to have fine-grained control over the export or you wish to continue to use the Wordpress backend but still want a file-based content source on the front end - write a conversion script that uses the API. Let&apos;s look at a simple example written in Node that utilizes the same simple Wordpress site from the prior section.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const fetch = require(&apos;isomorphic-unfetch&apos;);
const TurndownService = require(&apos;turndown&apos;);
const yaml = require(&apos;js-yaml&apos;);
const fs = require(&apos;fs&apos;);
const turndownService = new TurndownService();

fetch(&apos;http://testsite.local/wp-json/wp/v2/posts&apos;)
    .then((r) =&gt; r.json())
    .then((posts) =&gt; {
        posts.forEach((post) =&gt; {
            let frontmatter = {
                title: turndownService.turndown(post.title.rendered),
                date: post.date,
                slug: post.slug
            };
            let postContents = &apos;---\n&apos; + yaml.safeDump(frontmatter);
            postContents += &apos;---\n&apos; + turndownService.turndown(post.content.rendered);
            fs.writeFileSync(`posts/${post.slug}.md`, postContents, &apos;utf8&apos;);
        });
    });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This example utilizes two libraries for managing the conversion. &lt;a href=&quot;https://github.com/domchristie/turndown&quot;&gt;Turndown&lt;/a&gt; takes the rendered HTML provided by the Wordpress API and turns it into Markdown. In my example, I only tested it with very simple content, so you may want to work closely with its configuration options as, by default, it removes content that it cannot convert to Markdown. It also uses &lt;a href=&quot;https://www.npmjs.com/package/js-yaml&quot;&gt;js-yaml&lt;/a&gt; to create the frontmatter for each post. In this example, it simply writes the file locally which would then be committed to the JAMstack site&apos;s repository. You could (relatively) easily incorporate similar code that uses the &lt;a href=&quot;https://developer.github.com/v3/&quot;&gt;GitHub API&lt;/a&gt;, for instance, and writes the files into the repository to trigger a rebuild. Alternatively, this could be incorporated into a build process using something like &lt;a href=&quot;https://www.netlify.com/build/plugins-beta/&quot;&gt;Netlify build plugins&lt;/a&gt; to ensure new content is pulled whenever a build is triggered.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: At &lt;a href=&quot;https://www.stackbit.com/&quot;&gt;Stackbit&lt;/a&gt;, we&apos;re working on a project that could help with this process as well called &lt;a href=&quot;https://github.com/stackbithq/sourcebit&quot;&gt;Sourcebit&lt;/a&gt;. While it is still a very early release and still in development at the time of this writing, we are exploring adding support for Wordpress as a source plugin.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Option 3: Import Content to a Headless CMS&lt;/h2&gt;
&lt;p&gt;The prior two options have focused on leaving either the Wordpress backend in place for future content editing or doing a one time export to files. This option provides many of the comforts of the Wordpress backend that you may lose when editing a file-based option, while eliminating the need to continue to host and manage a Wordpress instance to maintain the backend.&lt;/p&gt;
&lt;p&gt;The means of importing will differ depending on which headless CMS you choose. In the past I know that some CMS options have maintained tools specifically to import Wordpress while others had community projects that helped with the import process. At a minimum, a headless CMS provides some form of API that can be integrated with the Wordpress API, most likely for a one time import. For example, &lt;a href=&quot;https://hoverbaum.net/2018/03/22/Wordpress-to-Contentful-migration/&quot;&gt;this post&lt;/a&gt; walks through doing this for Contentful.&lt;/p&gt;
&lt;h2&gt;What&apos;s Next?&lt;/h2&gt;
&lt;p&gt;Welcome to the JAMstack! The great thing about it is that, now that you are not tied to a monolithic application architecture, you are free to explore - and the ecosystem is vast! You&apos;ll likely want to explore how you can leverage serverless functions to handle some of the dynamic functionality that was once likely handled by some form of plugin. The good news is that developers tend to love the developer experience that a decoupled architecture like JAMstack and a headless CMS provides.&lt;/p&gt;
&lt;p&gt;The one place where the experience can still need a little help is in the editing of content. Thankfully, tools like &lt;a href=&quot;https://stackbit.com/&quot;&gt;Stackbit&lt;/a&gt; are helping to bring the content editing experience to a level on par or above what Wordpress provides. If you&apos;re curious to see what I mean, try out the &lt;a href=&quot;https://www.stackbit.com/#demo&quot;&gt;live demo&lt;/a&gt; and then sign up to get &lt;a href=&quot;https://www.stackbit.com/#early-access&quot;&gt;early access&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[What’s a Headless CMS and Why Should You Care?]]></title><description><![CDATA[Gift Egwuenu discusses what you need to know about headless content management systems, such as what a headless CMS is and what the benefits and use cases of using the headless CMS are.]]></description><link>https://www.stackbit.com/blog/what-is-a-headless-cms/</link><guid isPermaLink="false">https://www.stackbit.com/blog/what-is-a-headless-cms/</guid><pubDate>Thu, 13 Feb 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;The history of managing content on the web dates back to the beginning of the web’s existence. A &lt;a href=&quot;https://en.wikipedia.org/wiki/Content_management_system&quot;&gt;Content Management System&lt;/a&gt; (CMS) is a tool that can manage the creation and modification of digital content. In the 2000s we moved to an era where managing content was facilitated by open-source CMS, also known as a coupled or traditional CMS, like &lt;a href=&quot;http://www.wordpress.com&quot;&gt;Wordpress&lt;/a&gt;, &lt;a href=&quot;https://www.joomla.org/&quot;&gt;Joomla&lt;/a&gt;, and &lt;a href=&quot;https://www.drupal.org/&quot;&gt;Drupal&lt;/a&gt;. These systems allow users to manage both the frontend and backend of the application in one location.&lt;/p&gt;
&lt;p&gt;Fast forward to today, we have shifted to a different approach with even better ways of managing content called the headless CMS. This approach lets you decouple the backend from the frontend, allowing you to pull and manage content via an API. In this article, I’ll cover what you need to know about headless content management systems and where to go from here to explore and use a headless CMS in your project.&lt;/p&gt;
&lt;h2&gt;Headless CMS the what?&lt;/h2&gt;
&lt;p&gt;Unlike the traditional CMS, where both the frontend and backend layer are coupled (meaning they cannot be separated from one another), a headless CMS is a content management system where the content “body” is decoupled from the frontend display, and the developer is provided content as data over an API.&lt;/p&gt;
&lt;p&gt;A headless CMS is frontend agnostic. This means that content is delivered raw, and the developer chooses how the data is presented to the end-user using any framework or tool of choice.&lt;/p&gt;
&lt;h2&gt;Traditional vs Headless vs Decoupled CMS&lt;/h2&gt;
&lt;h3&gt;Traditional CMS&lt;/h3&gt;
&lt;p&gt;A traditional CMS also called a coupled CMS serves and maintains the backend and frontend layer of the system. The system consists of a database for storing the content, the frontend for displaying the content and the backend that houses the functionality of the content management system. Working with a traditional CMS, every single part of the system - frontend, backend, database - exist as an inseparable part of the CMS. This kind of platform also typically provides a &lt;a href=&quot;https://en.wikipedia.org/wiki/WYSIWYG&quot;&gt;(WYSIWYG) “What You See Is What You Get”&lt;/a&gt; interface for creating content.&lt;/p&gt;
&lt;h3&gt;Headless CMS&lt;/h3&gt;
&lt;p&gt;The headless CMS differs from the traditional approach where the backend is only used for managing content and the frontend (“head”) is disconnected, leading to the name headless. The content is published to an API where the data can be consumed across different platforms such as web, mobile, AR/VR, chat, voice, etc. One benefit of using this approach is the same content can be managed within one system but distributed across several platforms, like a website, a mobile app or even an IoT or voice-enabled device.&lt;/p&gt;
&lt;h3&gt;Decoupled CMS&lt;/h3&gt;
&lt;p&gt;The headless CMS is considered a sub-set of a decoupled CMS, which does include an actual frontend layer. However, the decoupled content system is managed by two different systems. The API layer and an added frontend layer where the final content is published. The difference between the decoupled and coupled (traditional) system is that the former have the frontend and backend system independent of one another, communicating with each other through calls made to the API.&lt;/p&gt;
&lt;h2&gt;Benefits of Headless CMS&lt;/h2&gt;
&lt;p&gt;When you leverage a headless CMS in managing your content, you get the following benefits out-of-the-box.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Omnichannel Approach:&lt;/strong&gt; The content created in a headless CMS is capable of being displayed on any device ranging from mobile, web, AR/VR, IoT, etc. while being managed from one backend.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Improved Security:&lt;/strong&gt; Headless CMS typically provide content via a read-only API and there is no database to secure. In addition, many allow integration with a via high-performance CDN rather than directly from the database which lowers the risks of &lt;a href=&quot;https://www.keycdn.com/support/ddos-attack&quot;&gt;DDoS attacks&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scalability:&lt;/strong&gt; The approach of keeping the frontend and backend decoupled means there limits or eliminates downtime and you can scale, upgrade or customize your website without performance rundown.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flexibility:&lt;/strong&gt; The headless approach is more flexible for developers because they have the freedom to build with a frontend framework of choice that fits the project they are working on while, with the traditional approach, the level to which a developer may customize is often limited, which can get frustrating.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Git-based vs API-Driven CMS&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;https://paper.dropbox.com/doc/A-Deep-Dive-into-Headless-CMS--Ato1Ez13fyNCxOtAgrEfQnswAg-g7CTqko9ISC0QmUgEtBIi#:uid=044557498871472978206522&amp;#x26;h2=Headless-CMS-the-what?&quot;&gt;headless CMS&lt;/a&gt; is further divided into two different categories, the Git-based and the API-driven CMS. I’ll go over each of them briefly to give you an idea of what they are made of and share examples of each of them.&lt;/p&gt;
&lt;h3&gt;Git-based CMS&lt;/h3&gt;
&lt;p&gt;A Git-based CMS does not store your content in its system. Instead, it applies a layer of CMS functionality to manage content in a git repository. When changes are pushed to git, it triggers a new build of your site. What this means is your content resides in a git repository and, every time new content is added or edited, it triggers a commit on git. Git serves as the database for storing all the content. Platforms that provide this service include &lt;a href=&quot;https://www.netlifycms.org/&quot;&gt;Netlify CMS&lt;/a&gt;, &lt;a href=&quot;http://jaredforsyth.com/hexo-admin/&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://jekyll.github.io/jekyll-admin/&quot;&gt;Jekyll&lt;/a&gt; &lt;a href=&quot;https://jekyll.github.io/jekyll-admin/&quot;&gt;Admin&lt;/a&gt;, &lt;a href=&quot;https://forestry.io/&quot;&gt;Forestry&lt;/a&gt;, etc.&lt;/p&gt;
&lt;h3&gt;API-Driven CMS&lt;/h3&gt;
&lt;p&gt;With API driven (or API-first) CMS, the content is stored within the CMS and provided to you via an API. The API can either be a &lt;a href=&quot;https://en.wikipedia.org/wiki/Representational_state_transfer&quot;&gt;REST&lt;/a&gt; or GraphQL depending on the platform you use. The API provides the raw content and metadata and you consume the data provided via the framework or language you choose. Platforms that provide this service include &lt;a href=&quot;https://www.sanity.io/&quot;&gt;Sanity&lt;/a&gt;, &lt;a href=&quot;https://ghost.org/&quot;&gt;Ghost&lt;/a&gt;, &lt;a href=&quot;https://www.datocms.com/&quot;&gt;DatoCMS&lt;/a&gt;, &lt;a href=&quot;https://strapi.io/&quot;&gt;Strapi&lt;/a&gt;, and &lt;a href=&quot;https://www.contentful.com/&quot;&gt;Contentful&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Use Cases for Headless CMS&lt;/h2&gt;
&lt;p&gt;Headless content management can be ideal for the following use cases:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Web Applications (that use popular JavaScript Frameworks like React, Vue, Angular)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This method involves serving content through an API which is then consumed by a web application, but offers a centralized place for managing content. An example is an eCommerce application built using HTML, CSS and JavaScript with content and product data that are maintained in the CMS and served via an external API.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jamstack&lt;/strong&gt; &lt;strong&gt;sites created with Static Site Generators (&lt;/strong&gt; &lt;strong&gt;ex.&lt;/strong&gt; &lt;strong&gt;Gatsby, Hugo, Gridsome)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Many sites built with tools like Hugo or Gatsby make use of the headless content management system to manage content since in this case they have no ability to access a database. Content can be stored in a headless CMS and fetched through an API during build time and deployed as static files.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Mobile Applications (IOS, Android)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The benefits of a headless CMS for mobile developers is that the API allows them to deliver content to an iOS or Android app from the same back-end that manages content for their web site. This can keep things in sync and allow for content reuse (i.e. changing the headline on the web home page also changes it in the mobile app).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Can a traditional CMS be used as a headless CMS?&lt;/h2&gt;
&lt;p&gt;A question that comes to mind is why can’t we figure out a way to use the traditional CMS as headless CMS? For instance, Wordpress comes with HTML, CSS, and JavaScript to handle the frontend, along with an SQL database to store the data in the backend, all tightly integrated. But is it possible to only use the backend of Wordpress? The good news is yes, it is possible to achieve this. Most traditional CMS now provide suitable APIs that can be used without relying on the frontend layer. We can see this implementation with APIs like the &lt;a href=&quot;https://developer.wordpress.org/rest-api/&quot;&gt;Wordpres&lt;/a&gt;&lt;a href=&quot;https://developer.wordpress.org/rest-api/&quot;&gt;s Rest API&lt;/a&gt; and &lt;a href=&quot;https://groups.drupal.org/headless-drupal&quot;&gt;Headless Drupal&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Examples of Headless CMS Providers&lt;/h2&gt;
&lt;h3&gt;&lt;a href=&quot;https://www.contentful.com/&quot;&gt;Contentful&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/1581601482-contentful.png&quot; alt=&quot;Contentful.com&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.contentful.com&quot;&gt;&lt;strong&gt;Contentful&lt;/strong&gt;&lt;/a&gt; is an API-driven headless CMS designed to create, manage and distribute content to any platform. Unlike a traditional CMS, they offer the ability to create your own content model so that you can decide what type of content you want to manage.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://www.netlifycms.org/&quot;&gt;Netlify CMS&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/1581601489-netlifycms.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.netlifycms.org/&quot;&gt;Netlify CMS&lt;/a&gt; is a free and open source, git-based CMS created by Netlify. It allows you to define your own content model, integrate third-party authentication and extend the capabilities of its backend, single page app built on React.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://www.sanity.io/&quot;&gt;Sanity&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/1581601493-sanity.png&quot; alt=&quot;Sanity.io&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.sanity.io/&quot;&gt;&lt;strong&gt;Sanity&lt;/strong&gt;&lt;/a&gt; is another API driven platform for managing structured content. With Sanity, you can manage your text, images, and other media with APIs. You can also use the open-source single page application &lt;a href=&quot;https://www.sanity.io/studio&quot;&gt;Sanity Studio&lt;/a&gt; to quickly set up an editing environment that you can customize.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Managing content on the web is quickly moving away from the traditional or coupled approach towards the headless and decoupled CMS approach mainly because of the benefits one provides over the other. As technology keeps advancing, users are making use of different devices to connect to the web, companies have to change to meet the users needs by leveraging the omnichannel approach. While this is a great approach, it may not be not suitable for every web project but it is beneficial to understand these concepts as this is where the future of content is moving towards and having knowledge of it is an advantage.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Voice Assistants and the JAMstack]]></title><description><![CDATA[Raymond Camden explores how to create an Alexa or Google Home integration with your JAMstack site by leveraging serverless functions that access the existing data.]]></description><link>https://www.stackbit.com/blog/jamstack-voice-assistants/</link><guid isPermaLink="false">https://www.stackbit.com/blog/jamstack-voice-assistants/</guid><pubDate>Wed, 29 Jan 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I&apos;ve got over ten thousand Twitter followers, so that officially means I&apos;m an &quot;industry pundit&quot;, and therefore I can say with one hundred percent authority that voice assistants are the user interface of the future. Ok, in all seriousness I&apos;ve got a pretty horrible track record of predicting industry trends, but I feel pretty safe saying that voice assistants are only increasing in usage (and functionality) and that I think we&apos;re rapidly approaching a time where we won&apos;t just ask if a company has a website or mobile app, but also what their voice support solution is like as well.&lt;/p&gt;
&lt;p&gt;In this article I&apos;ll talk about what a voice assistant is and how it relates to your JAMStack projects.&lt;/p&gt;
&lt;h2&gt;Basic Voice Assistant Concepts&lt;/h2&gt;
&lt;p&gt;Voice assistants involve a lot more than just speech recognition. A good voice assistant can understand the context and &lt;em&gt;intent&lt;/em&gt; of what you ask, and then use that understanding to drive a conversation between the user and your services. As a simple example of this, users do not need to speak a precise phrase in order to work with a good voice assistant. Instead they can speak as they would to any other human and the voice assistant will understand their intent and communicate it to your code.&lt;/p&gt;
&lt;p&gt;When we speak about voice assistants, we generally speak about two main ones: Google Assistant and Amazon Alexa. Apple&apos;s Siri, while used quite heavily, must be tied to an app on the device, unlike Google Assistant and Alexa.&lt;/p&gt;
&lt;p&gt;While a detailed look at how to build for Google and Amazon is outside the scope of this article, in general a voice assistant app (or skill as Amazon calls them) comes down to a few parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Intents&lt;/strong&gt; are where you describe the kind of things you would say to the service. When I go to Starbucks, I&apos;m generally going to ask about a product and order a product. I&apos;m not going to ask about the weather. The topics of things a user may ask would be considered intents.&lt;/li&gt;
&lt;li&gt;Intents are fleshed out with &lt;strong&gt;utterances&lt;/strong&gt;. That&apos;s a fancy way of saying example phrases. &quot;I&apos;d like a coffee.&quot; &quot;I want a coffee!&quot; &quot;Please give me a coffee!&quot; &quot;I&apos;d like an espresso.&quot; These are all sample utterances. The nice thing is you don&apos;t have to provide every single possible combination. By using powerful AI and other Ph.D.-level computer science stuff, your voice assistant can figure out that &quot;I&apos;d like a damn coffee&quot; is close enough to match the intent of asking for a product.&lt;/li&gt;
&lt;li&gt;Intents can also support &lt;strong&gt;variables&lt;/strong&gt; or dynamic aspects. Alexa calls these &lt;strong&gt;slots&lt;/strong&gt;. For example, I might say &quot;I want a coffee&quot; versus &quot;I want an espresso&quot;. While both are the same intent, which is me wanting to order something, the actual product (coffee or espresso) is the dynamic part.&lt;/li&gt;
&lt;li&gt;The final aspect is your code that responds to the information sent by the assistant. What&apos;s cool is that the voice assistance platform will do the heavy lifting for you and just simply &lt;em&gt;tell&lt;/em&gt; your code, &quot;the user wants to order something and the thing she wants is a coffee.&quot; Your code can then return a response and the voice assistant will handle speaking it out loud to the user.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There&apos;s a lot more to this of course and I&apos;d encourage you to read this great Smashing Magazine article on the topic for a deeper look, &lt;a href=&quot;https://www.smashingmagazine.com/2019/12/voice-skills-google-assistant-amazon-alexa/&quot;&gt;&quot;Creating Voice Skills For Google Assistant And Amazon Alexa&quot;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Typically the process to create a voice assistant comes down to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Configuration on the platform side. So for example, with Alexa I use a web site to define my skill, write out my intents and utterances, and so forth.&lt;/li&gt;
&lt;li&gt;I then write the code to process and respond to requests. Again, the voice assistant is doing the hard work. My code literally listens for a request that specifies the intent and any variables. I can do whatever my business logic needs and then return a JSON packet. The voice assistant takes that simple JSON result and speaks it to the user.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;JAMstack Voice Assistants&lt;/h2&gt;
&lt;p&gt;So how does this apply to the JAMstack?&lt;/p&gt;
&lt;p&gt;We already know that moving to static assets does not mean giving up on dynamic aspects of your site. That certainly applies to voice assistants as well. When we build with the JAMStack, we can take our data and create HTML from it - that&apos;s a given. We can also generate JSON data that can be consumed by third parties. That&apos;s one way in which a &apos;static&apos; site could have a simple, read-only API available. (If your JAMStack engine outputs an RSS feed for your blog, then you&apos;re already doing that!)&lt;/p&gt;
&lt;p&gt;Given that we know we can work with data in our JAMStack site, how does this apply to building a voice assistant?&lt;/p&gt;
&lt;p&gt;First off, the most direct answer would be to use serverless. You can (for the most part) do anything with a serverless platform so that would certainly suffice to handle adding a voice assistant to your static site. But where I think things can get more interesting is a closer, one-to-one correlation between your site data and your voice assistant.&lt;/p&gt;
&lt;p&gt;Consider a simple Eleventy site that uses product data to build web pages. You could have the following as a &lt;a href=&quot;https://www.11ty.dev/docs/data-global/&quot;&gt;global data file&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;[
    {
        name: &apos;A cat&apos;,
        price: 10,
        description: &apos;block of text&apos;
    },
    {
        name: &apos;Another cat&apos;,
        price: 9,
        description: &apos;block of text&apos;
    },
    {
        name: &apos;More cats&apos;,
        price: 21,
        description: &apos;block of text&apos;
    },
    {
        name: &apos;Even More cats&apos;,
        price: 6,
        description: &apos;block of text&apos;
    }
];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using Eleventy&apos;s &lt;a href=&quot;https://www.11ty.dev/docs/pages-from-data/&quot;&gt;&quot;pages from data&quot;&lt;/a&gt; feature, you can generate a set of HTML files for each of the products above. The end result could then be a set of URLs like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mysite.com/products/a-cat
mysite.com/products/another-cat
mysite.com/products/more-cats
mysite.com/products/even-more-cats
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It would be nice if our site&apos;s related voice assistant could use the &lt;strong&gt;exact&lt;/strong&gt; same data source files. In that scenario, I could address Alexa like so:&lt;/p&gt;
&lt;p&gt;&quot;Alexa, ask my site what products are available&quot;&lt;/p&gt;
&lt;p&gt;&quot;Our site has &apos;A cat&apos;, &apos;Another cat&apos;, &apos;More cats&apos;, and &apos;Even more cats&apos;&quot;&lt;/p&gt;
&lt;p&gt;Given that the JSON data includes prices, you could even support this example:&lt;/p&gt;
&lt;p&gt;&quot;Alexa, ask my site what products cost less then ten dollars&quot;&lt;/p&gt;
&lt;p&gt;&quot;Our site has the following products at that price: &apos;Another cat&apos; and &apos;Even more cats&apos;&quot;&lt;/p&gt;
&lt;p&gt;In this imagined scenario, editing that core JSON file means you can control both the HTML view of your site as well as the voice-driven view of your site. (And some platforms like &lt;a href=&quot;https://www.stackbit.com/&quot;&gt;Stackbit&lt;/a&gt; and &lt;a href=&quot;https://www.netlifycms.org/&quot;&gt;Netlify CMS&lt;/a&gt; help you edit the data in your browser, making it available to non-technical editors.)&lt;/p&gt;
&lt;p&gt;Perhaps the only truly difficult (or convoluted) aspect to this scenario is letting your serverless code have access to the same JSON data driving the site. Here&apos;s where things can get a bit complex. As always, I like to remind folks that adopting the JAMStack doesn&apos;t always mean everything is simpler.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The first issue you run into is that the JSON used is not necessarily available in the final static site. In Eleventy&apos;s example, it&apos;s used to build the site, but not used in the final site.&lt;/li&gt;
&lt;li&gt;That&apos;s no problem though - you could build a page meant for the final site that has the JSON. You could literally output the global data as is, or you could massage that data a bit. It&apos;s possible you may have values there you don&apos;t want public.&lt;/li&gt;
&lt;li&gt;Ok, so now you have JSON at mysite.com/products.json, but then your serverless function needs to hit it. You could make a HTTP request. In other words, Alexa fires a HTTP request to your serverless endpoint for your voice assistant, your code makes a HTTP request to your site, and then return the right data. This immediately raises a red flag for me, but it&apos;s not necessarily a bad idea either. You could also store it in RAM and if your skill is active, it wouldn&apos;t need to be re-fetched. The reason for the network request is that even if your serverless function lies at &lt;code&gt;mysite.com/functions/foo&lt;/code&gt;, it isn&apos;t on the same filesystem as &lt;code&gt;mysite.com/products.json&lt;/code&gt;. Netlify has a possible solution for this (and thank you &lt;a href=&quot;https://twitter.com/_munter_&quot;&gt;@_munter&lt;/a&gt; for the tip!) - &lt;a href=&quot;https://github.com/netlify/build#lifecycleonbuild&quot;&gt;build functions&lt;/a&gt;. You could use the build plugin process to provide the JSON data to the serverless functions &lt;em&gt;before&lt;/em&gt; the functions get deployed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you&apos;ve done this and have your JSON data available, what does the code look like for a simple voice assistant? Keeping in mind we&apos;re simplifying things quite a bit, here&apos;s what that code could look like as a Netlify serverless function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function getProducts() {
    /*
     I would get access to the products from the static site data,
     going to fake it for now:
    */
    return &apos;cats, dogs, and lizards&apos;;
}

exports.handler = function (event, context, callback) {
    /*
    Alexa info is in event.body. It&apos;s a JSON packet contaning a lot of
    information with the primary thing we want being intent
    */
    let intent = &apos;&apos;;
    if (event.body.request &amp;#x26;&amp;#x26; event.body.intent) intent = event.body.intent.name;

    let text = &apos;&apos;;

    if (!intent) {
        text = &apos;Hello World&apos;;
    } else if ((intent = &apos;GetProducts&apos;)) {
        text = &apos;Our products are &apos; + getProducts();
    }

    let response = {
        version: &apos;1.0&apos;,
        response: {
            shouldEndSession: true,
            outputSpeech: {
                type: &apos;PlainText&apos;,
                text: text
            }
        }
    };

    callback(null, {
        statusCode: 200,
        response
    });
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alexa sends information about the request in a JSON packet to your endpoint. Part of that request will typically include the intent, Alexa&apos;s interpretation of what the user asked. In the sample code above, I look for an intent named &lt;code&gt;GetProducts&lt;/code&gt; and if it was used, I return a list of products.&lt;/p&gt;
&lt;p&gt;As I said above, how the serverless code gets access to your static site data will depend on the platform. You absolutely could use a HTTP request to load the data, but it would be more performant to use your build process to provide the data to the function instead.&lt;/p&gt;
&lt;h2&gt;Where To Go From Here&lt;/h2&gt;
&lt;p&gt;While I think we&apos;re all already thinking a lot about the ways we can add features to the JAMStack, I hope this article inspires you to consider integrating a voice assistant as well. I&apos;d love to hear from folks who may be doing this already (and again, I mean something with &quot;tight&quot; integration between HTML and voice) so please be sure to drop me a comment below!&lt;/p&gt;
&lt;p&gt;As a reminder, check out that &lt;a href=&quot;https://www.smashingmagazine.com/2019/12/voice-skills-google-assistant-amazon-alexa/&quot;&gt;excellent Smashing Magazine&lt;/a&gt; article for a deeper look at the setup. You can also check out &lt;a href=&quot;https://www.raymondcamden.com/tags/alexa/&quot;&gt;my examples&lt;/a&gt; of Alexa skills for inspiration!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Build Your Own JAMstack API with Netlify Functions and Zapier Webhooks, Part 2]]></title><description><![CDATA[A step-by-step tutorial showing how to automatically update your JAMstack site with data connected to over 1500 services via Zapier webhooks and Netlify Functions.]]></description><link>https://www.stackbit.com/blog/jamstack-api-zapier-webhooks-2/</link><guid isPermaLink="false">https://www.stackbit.com/blog/jamstack-api-zapier-webhooks-2/</guid><pubDate>Mon, 20 Jan 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Sending data from a JAMstack application may take some work, but is usually fairly straightforward. Calling an API or serverless function just takes a little bit of standard JavaScript. But what about receiving data? When the application source is static, how does an API talk to our app?&lt;/p&gt;
&lt;p&gt;There are a number of ways to achieve this, but, in this tutorial, we&apos;ll look at a solution that uses a combination of tools including &lt;a href=&quot;https://zapier.com/engineering/using-webhooks/&quot;&gt;Webhooks by Zapier&lt;/a&gt;, &lt;a href=&quot;https://www.netlify.com/products/functions/&quot;&gt;Netlify Functions&lt;/a&gt; and the &lt;a href=&quot;https://developer.github.com/v3/&quot;&gt;GitHub API&lt;/a&gt;. These tools will allow us to receive data from an external source, add the necessary details to our site&apos;s source and automatically rebuild the site with the new details.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://www.stackbit.com/blog/jamstack-api-zapier-webhooks-1/&quot;&gt;Part 1&lt;/a&gt; of this series that covered sending data from your application using a Zapier Webhook and Netlify Functions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Note webhooks by Zapier are currently a premium feature.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The sample code from this post is available at &lt;a href=&quot;https://github.com/remotesynth/webhooks&quot;&gt;https://github.com/remotesynth/webhooks&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Setting Up the Netlify Function&lt;/h2&gt;
&lt;p&gt;The sample we&apos;ll build will use Zapier to watch a list of RSS feeds for changes and then notify a Netlify function that will add the new post title and URL to a data file containing an array of posts. This will then cause the site to update and rebuild.&lt;/p&gt;
&lt;p&gt;Let&apos;s start by creating the Netlify function. This will allow us to test and establish the API that our Zapier webhook will need to talk to before setting up Zapier. The reason for doing this first is that having an endpoint URL to test the webhook in Zapier against will simplify the process of configuring everything.&lt;/p&gt;
&lt;p&gt;To start, create a folder to place our Netlify functions (I named mine &lt;code&gt;lambda&lt;/code&gt; but you can name it anything). Next, create a &lt;code&gt;netlify.toml&lt;/code&gt; configuration file at the root of the site and add the following configuration to tell Netlify where to find our functions (i.e. the &lt;code&gt;lambda&lt;/code&gt; folder we created earlier).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-toml&quot;&gt;[build]
  functions = &quot;./lambda&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next create a file named &lt;code&gt;zapierReceive.js&lt;/code&gt; inside the &lt;code&gt;lambda&lt;/code&gt; folder. This will be contain the code for our function.&lt;/p&gt;
&lt;h3&gt;A Quick Aside&lt;/h3&gt;
&lt;p&gt;Before I continue, I will share a quick story because it helps to illustrate the mental shift you often need to make when working with the JAMstack and serverless. Initially, I figured this example would be quite simple - I&apos;d just load a local JSON file, use the file system API to update it and - whamo! - success!&lt;/p&gt;
&lt;p&gt;Some of you may be like, &quot;Wait, that&apos;d never work!&quot; And you&apos;d be right. The first problem is that the function, which exists in AWS, would not have access to the file system on Netlify. Second, in a &quot;real world&quot; situation, your data would likely be loaded and used within various templates that are pre-rendered as part of the static site generator&apos;s build process. This means that, even if I had access to the filesystem on Netlify, any change would get overwritten from a rebuild triggered by my git repository.&lt;/p&gt;
&lt;p&gt;So, what we really would want would be to write the changes into the git repository (mine is on GitHub) and this change would then automatically trigger Netlify to rebuild the site which would use my updated data file.&lt;/p&gt;
&lt;h3&gt;Creating the Function&lt;/h3&gt;
&lt;p&gt;Now that I better understood what I wanted to build, I had to find a way to get my Netlify function to talk to GitHub. Thankfully, GitHub has a toolkit called &lt;a href=&quot;https://developer.github.com/v3/libraries/&quot;&gt;Octokit&lt;/a&gt; with a &lt;a href=&quot;https://github.com/octokit/rest.js&quot;&gt;REST implementation using JavaScript&lt;/a&gt; that I could plug into my Node-based function. The &lt;a href=&quot;https://octokit.github.io/rest.js/&quot;&gt;documentation&lt;/a&gt; may seem overwhelming as the API can do so many things, but using the search I was fairly quickly able to find the methods I needed. To install it, use &lt;code&gt;npm install @octokit/rest --savedev&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The first step is to go into the &lt;a href=&quot;https://github.com/settings/tokens&quot;&gt;developer settings in your GitHub profile&lt;/a&gt; and create an access token that we can use to authenticate with the API since we&apos;ll be wanting write access to the repo. You&apos;ll want to give the token access to write and read packages.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1579533388-receiveconfigurestep1sm.png&quot; alt=&quot;Setting up a token in GitHub&quot;&gt;&lt;/p&gt;
&lt;p&gt;Copy the token and head to the Netlify admin for this site (you&apos;ll need to set the site up if you don&apos;t have an existing one). Go to Settings &gt; Build &amp;#x26; Deploy &gt; Environment. Create a new environment variable containing the token so that we can access it from our function code without exposing it publicly.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1579533393-receiveconfigurestep2sm.png&quot; alt=&quot;Setting up a token in GitHub&quot;&gt;&lt;/p&gt;
&lt;p&gt;Now let&apos;s look at the contents of &lt;code&gt;zapierReceive.js&lt;/code&gt;. There&apos;s a lot going on, but I&apos;ll explain it as best I can.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const Octokit = require(&apos;@octokit/rest&apos;),
    owner = &apos;remotesynth&apos;,
    repo = &apos;webhooks&apos;;

exports.handler = async (event, context, callback) =&gt; {
    try {
        const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
        if (!event.body) {
            return {
                statusCode: 500,
                body: &apos;Title and link are required.&apos;
            };
        }
        const body = JSON.parse(event.body);
        const newItem = {};
        newItem.title = body.title;
        newItem.link = body.link;
        if (!newItem.title) {
            return {
                statusCode: 500,
                body: &apos;title parameter required&apos;
            };
        }
        if (!newItem.link) {
            return {
                statusCode: 500,
                body: &apos;link parameter required&apos;
            };
        }
        let path = &apos;links.json&apos;;
        return octokit.repos
            .getContents({
                owner,
                repo,
                path
            })
            .then((res) =&gt; {
                console.log(res);
                let buff = Buffer.from(res.data.content, &apos;base64&apos;);
                let linksRaw = buff.toString(&apos;utf-8&apos;);
                let linksJSON = JSON.parse(linksRaw);
                let message = &apos;Updated links&apos;;
                let content = &apos;&apos;;
                let sha = res.data.sha;
                linksJSON.links.push(newItem);
                linksRaw = JSON.stringify(linksJSON);
                buff = Buffer.from(linksRaw);
                content = buff.toString(&apos;base64&apos;);
                return octokit.repos
                    .createOrUpdateFile({
                        owner,
                        repo,
                        path,
                        message,
                        content,
                        sha
                    })
                    .then((res) =&gt; {
                        return {
                            statusCode: 200,
                            body: &apos;{&quot;success&quot;:&quot;true&quot;}&apos;
                        };
                    });
            });
    } catch (err) {
        [];
        return { statusCode: 500, body: err.toString() };
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first few lines import Octokit and set variables for the username and repository that I&apos;ll be connecting to. We begin the function by instantiating Octokit using the Netlify environment variable we set up earlier for auth. Next we do some very basic validation to ensure that a title and URL have been sent. After that, we use Octokit to call the GitHub API and get the existing contents of the file we intend to change, which is returned as Base64 (perhaps there&apos;s another method for this that doesn&apos;t return Base64, but this worked fine for my purposes). When that succeeds, we add the new item to the array, convert it back to JSON and then use Octokit to write the contents back to GitHub with a commit message.&lt;/p&gt;
&lt;p&gt;Phew! 😫 Honestly, it was far easier to write than it is to explain.&lt;/p&gt;
&lt;h3&gt;Testing the Function&lt;/h3&gt;
&lt;p&gt;Now that the function is written, we can use &lt;a href=&quot;https://www.netlify.com/products/dev/&quot;&gt;Netlify Dev&lt;/a&gt; to run the function locally and a tool like &lt;a href=&quot;https://www.getpostman.com/&quot;&gt;Postman&lt;/a&gt; to test it. In my experience, testing of functions locally with Netlify Dev generally requires that the function exist on Netlify first, so if you haven&apos;t deployed the function yet, do so. After that, any changes can be tested locally without needing to redeploy. Once that&apos;s done, start the site locally using &lt;code&gt;netlify dev&lt;/code&gt;, which will run the site as well as the functions for local testing.&lt;/p&gt;
&lt;p&gt;Assuming you are running Netlify Dev using the default settings, the URL to test the function should be &lt;code&gt;localhost:8888/.netlify/functions/zapierReceive&lt;/code&gt;. Go ahead and plug that into Postman, along with the JSON payload to ensure everything is running properly.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1579533396-receiveconfigurestep3sm.png&quot; alt=&quot;Testing the function in Postman&quot;&gt;&lt;/p&gt;
&lt;p&gt;If you get back success, then we&apos;re good to move on to the next step. It&apos;s worth noting that even though we called this locally, it is making a change to your GitHub which repository would be reflected on your site.&lt;/p&gt;
&lt;h3&gt;Deploying to Netlify&lt;/h3&gt;
&lt;p&gt;You probably already deployed the function to test it, but there is one problem you may encounter. We&apos;re using Octokit but it isn&apos;t installed on our instance running the function. So if you called your public URL via Postman right now, you should get an error. There are multiple solutions to this.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run the npm install as a prebuild or build step. You can find more details about how to do this in the &lt;a href=&quot;https://community.netlify.com/t/functions-and-node-modules/2323/4&quot;&gt;support post here&lt;/a&gt;. Keep in mind that this may factor into your build minutes, which can incur charges if this process will run frequently.&lt;/li&gt;
&lt;li&gt;Create a pre-bundled function that includes the dependencies as part of a build step using &lt;a href=&quot;https://github.com/netlify/netlify-lambda&quot;&gt;Netlify Lambda&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Deploy an &lt;a href=&quot;https://docs.netlify.com/cli/get-started/#unbundled-javascript-function-deploys&quot;&gt;unbundled function&lt;/a&gt; using the Netlify CLI and &lt;code&gt;netlify deploy&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once we&apos;ve deployed our function with the necessary dependencies, we should be able to call our function on Netlify from within Postman using a URL structure like &lt;code&gt;[My Netlify URL]/.netlify/functions/zapierReceive&lt;/code&gt;. This should update your list of URLs and cause the site to rebuild with the new URL added.&lt;/p&gt;
&lt;h2&gt;Setting Up the Webhook in Zapier&lt;/h2&gt;
&lt;p&gt;Now that we have an endpoint to post to (i.e. our Netlify Function), we can set the rest of the process up in Zapier. Start by making a new zap and search for &quot;RSS by Zapier&quot; and then choose &quot;New Items in Multiple Feeds&quot;. This task will watch a list of RSS feeds and run when it sees new posts.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1579533399-receiveconfigurestep4sm.png&quot; alt=&quot;Setting up the Zap in Zapier&quot;&gt;&lt;/p&gt;
&lt;p&gt;Next, we&apos;ll choose our feeds. I chose a couple of my favorite developer-focused sites.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1579533401-receiveconfigurestep5sm.png&quot; alt=&quot;Choosing feeds to watch&quot;&gt;&lt;/p&gt;
&lt;p&gt;Once you&apos;ve set the feeds you want, the next step is to map the RSS data to the fields you want to send to the webhook. In our case, we just need &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;link&lt;/code&gt; parameters.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1579533405-receiveconfigurestep6sm.png&quot; alt=&quot;Mapping RSS data in Zapier&quot;&gt;&lt;/p&gt;
&lt;p&gt;Once this step is complete, you can click &quot;Test &amp;#x26; Continue&quot; to move on to configuring the webhook.&lt;/p&gt;
&lt;p&gt;For the &quot;Do this...&quot; portion of the setup, we need to search for and choose the &quot;Webhooks by Zapier&quot; task. Once that is chosen, select &quot;POST&quot; as the &quot;action event&quot; option. This specifies the method by which data will be sent to our endpoint.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1579533408-receiveconfigurestep7sm.png&quot; alt=&quot;Setting up the webhook Zapier&quot;&gt;&lt;/p&gt;
&lt;p&gt;After clicking &quot;Continue&quot; you will specify the URL of the endpoint at Netlify and map the data coming from the webhook to parameters that will be sent to the endpoint. Enter the URL of your function at Netlify here and choose a payload type of JSON. Then map the existing &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;link&lt;/code&gt; parameters to &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;link&lt;/code&gt; parameters in the data. The remaining configuration options can be left at their default settings.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1579533412-receiveconfigurestep8sm.png&quot; alt=&quot;Setting up the webhook Zapier&quot;&gt;&lt;/p&gt;
&lt;p&gt;Clicking continue will allow you to test and ultimately save your configuration. Assuming the function returns success, you can enable our zap. Once the zap is running, you should eventually see links added to the JSON on your site and reflected on the site itself if you have that data mapped to a layout. For example, here&apos;s mine (beautifully designed) after leaving the zap running for a while.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1579533418-receiveconfigurestep9sm.png&quot; alt=&quot;links displaying on the page&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;Obviously, this is a very basic example of what you might do using these tools. There are 1,500+ apps that Zapier integrates with, so that&apos;s an enormous amount of sources you can integrate with to pull data into your site. For example, you could automatically pull in new images posted to Instagram and push those images to a gallery on your site. Or you could pull in data from a Google Sheet making it easy for an editor to update a list of data that appears on the site. These are just a couple of ideas and, while using Zapier isn&apos;t necessarily required to accomplish any of these, it does simplify the process and help you avoid digging into the ins and outs of each specific API.&lt;/p&gt;
&lt;p&gt;If you&apos;d like to check the sample code for this and the &lt;a href=&quot;https://www.stackbit.com/blog/jamstack-api-zapier-webhooks-1/&quot;&gt;prior tutorial&lt;/a&gt;, it can be found at &lt;a href=&quot;https://github.com/remotesynth/webhooks&quot;&gt;https://github.com/remotesynth/webhooks&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Build Your Own JAMstack API with Netlify Functions and Zapier Webhooks, Part 1]]></title><description><![CDATA[A step-by-step tutorial showing how to connect a JAMstack site to over 1500 services via Zapier webhooks and Netlify Functions.]]></description><link>https://www.stackbit.com/blog/jamstack-api-zapier-webhooks-1/</link><guid isPermaLink="false">https://www.stackbit.com/blog/jamstack-api-zapier-webhooks-1/</guid><pubDate>Thu, 16 Jan 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;We&apos;ve gotten so used to everything having an API that it can be a little bit disorienting when you encounter a situation where you cannot accomplish a task via an API. This can be especially difficult in the JAMstack world where any dynamic functionality is accomplished via an API of some sort - the A in JAM stands for APIs after all. In this post, I want to talk about a solution that can work in many cases where either an API doesn&apos;t exist or it doesn&apos;t necessarily do exactly what you want to achieve.&lt;/p&gt;
&lt;p&gt;I have been using &lt;a href=&quot;https://zapier.com/&quot;&gt;Zapier&lt;/a&gt; for some time. Like similar services such as &lt;a href=&quot;https://ifttt.com/&quot;&gt;IFTTT&lt;/a&gt;, it allows you to mash up tasks in a &quot;when X event happens do Y&quot; type of fashion. For example, I have used it to do things like automatically sign someone up for a mailing list when they register for an event I&apos;m running or run a new Netlify build at a particular time each day. However, Zapier also has a feature called &lt;a href=&quot;https://zapier.com/engineering/using-webhooks/&quot;&gt;Webhooks&lt;/a&gt; that allow you to kind of &quot;create your own API&quot; by connecting the webhook to any service Zapier integrates with. (Note: IFTTT also offers &lt;a href=&quot;https://ifttt.com/maker_webhooks&quot;&gt;webhooks&lt;/a&gt; that seem to work similarly.)&lt;/p&gt;
&lt;p&gt;In this tutorial, I&apos;ll show you how to set up webhooks by Zapier to send information to a third-party service and how to integrate them into your JAMstack site using &lt;a href=&quot;https://www.netlify.com/products/functions/&quot;&gt;Netlify Functions&lt;/a&gt;. This combination allows you to quickly and easily create dynamic functionality on your JAMstack site and create services that do things existing APIs may not even support.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note webhooks by Zapier are currently a premium feature.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The sample code from this post is available at &lt;a href=&quot;https://github.com/remotesynth/webhooks&quot;&gt;https://github.com/remotesynth/webhooks&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Sending Data via a Webhook&lt;/h2&gt;
&lt;p&gt;The first scenario we&apos;ll look at is creating a webhook with an endpoint that receives data from your site and passes that data to an existing service Zapier supports.&lt;/p&gt;
&lt;h3&gt;Configuring a Webhook in Zapier&lt;/h3&gt;
&lt;p&gt;Let&apos;s start by creating a new webhook as an endpoint within Zapier. To start, make a new Zap and search for Webhooks by Zapier. Then for the type of trigger event choose &quot;Catch Hook&quot;, which will give us a Zapier endpoint URL to post to.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1579184329-sendconfigurestep1sm.png&quot; alt=&quot;choosing a trigger event&quot;&gt;&lt;/p&gt;
&lt;p&gt;When you continue to the next step, Zapier will give you your endpoint URL. This is where we will send our GET or POST requests to.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1579184334-sendconfigurestep2sm.png&quot; alt=&quot;webhook endpoint URL&quot;&gt;&lt;/p&gt;
&lt;p&gt;If you had complex data the child key could help you select only the data under a specific key but, for our purposes, it won&apos;t be necessary. The best thing to do here is to plug the URL into something like &lt;a href=&quot;https://www.getpostman.com/&quot;&gt;Postman&lt;/a&gt; and send a sample request. You&apos;ll see why in a moment. In my case, this will be a simple API that takes only a name and email.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1579184337-sendconfigurestep3sm.png&quot; alt=&quot;sending sample data via postman&quot;&gt;&lt;/p&gt;
&lt;p&gt;The webhook should return a success status. It doesn&apos;t really matter what data you send, the webhook is designed to take whatever data and pass it along. Back in Zapier, click continue and you should see a request with sample data - this is why we sent the sample request. You can send additional requests and they will be listed here. Choosing one will allow you to map the data sent to the remainder of the zap. Click &quot;Test &amp;#x26; Continue&quot; to move on to the next step.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1579184340-sendconfigurestep4sm.png&quot; alt=&quot;sample data in Zapier&quot;&gt;&lt;/p&gt;
&lt;p&gt;In this example, we&apos;ll be doing something fairly simple, which is to pass the data into a Google Sheet. So, obviously you&apos;ll need the sheet set up. It&apos;s best to include headers as it makes mapping the data much easier. You can see my columns map to the data I sent to the webhook.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1579184342-sendconfigurestep5sm.png&quot; alt=&quot;empty Google Sheet with headers&quot;&gt;&lt;/p&gt;
&lt;p&gt;Next, for the &quot;Do this...&quot; step in Zapier search for Google Sheets. Choose &quot;Create Spreadsheet Row&quot; for the Action Event.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1579184345-sendconfigurestep6sm.png&quot; alt=&quot;configuring Google Sheets in Zapier&quot;&gt;&lt;/p&gt;
&lt;p&gt;You&apos;ll need to choose your account - you may need to authenticate and grant Zapier permissions here as well.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1579184347-sendconfigurestep7sm.png&quot; alt=&quot;choosing Google account in Zapier&quot;&gt;&lt;/p&gt;
&lt;p&gt;Once the Google account is selected, you can choose the spreadsheet you want to use (I chose the simple sheet I created earlier), then worksheet within that spreadsheet and finally map the columns (based on the column headers) to the sample data from our previous POST to the Zapier webhook endpoint.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1579184351-sendconfigurestep8sm.png&quot; alt=&quot;configuring Google Sheets in Zapier&quot;&gt;&lt;/p&gt;
&lt;p&gt;Ok. We&apos;re done in Zapier - just click &quot;Test &amp;#x26; Continue&quot; to finish and then enable your Zap. Next we need to set up the Netlify function that will be used by our JAMstack site to call the Zapier webhook endpoint.&lt;/p&gt;
&lt;h3&gt;Creating the Netlify Function&lt;/h3&gt;
&lt;p&gt;Netlify Functions are serverless functions that run on AWS that can help turn your site from a static site to a JAMstack site by connecting with APIs or performing dynamic tasks. While this can obviously be accomplished by using a straight serverless cloud function on any provider, the benefit of Netlify Functions is that it simplifies the testing and deployment within the context of a JAMstack application.&lt;/p&gt;
&lt;p&gt;To start, create a folder to place our Netlify functions (I named mine &lt;code&gt;lambda&lt;/code&gt; but you can name it anything). Next, create a &lt;code&gt;netlify.toml&lt;/code&gt; configuration file at the root of the site and add the following configuration to tell Netlify where to find our functions.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-toml&quot;&gt;[build]
  functions = &quot;./lambda&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let&apos;s create our function. We&apos;ll be using &lt;a href=&quot;https://github.com/axios/axios&quot;&gt;Axios&lt;/a&gt; to handle our HTTP requests, so you&apos;ll need to install that first using &lt;code&gt;npm install axios --savedev&lt;/code&gt;. Then create a &lt;code&gt;.js&lt;/code&gt; file in our &lt;code&gt;lambda&lt;/code&gt; folder. It doesn&apos;t matter what it is called but I named mine &lt;code&gt;zapierSend.js&lt;/code&gt;. Let&apos;s look at the source for that file and I&apos;ll explain it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const axios = require(&apos;axios&apos;);

exports.handler = async (event, context, callback) =&gt; {
    try {
        if (!event.body) {
            return {
                statusCode: 500,
                body: &apos;Name and email are required.&apos;
            };
        }

        const body = JSON.parse(event.body);
        const email = body.email;
        const fullName = body.fullName;
        if (!email) {
            return {
                statusCode: 500,
                body: &apos;email parameter required&apos;
            };
        }
        if (!fullName) {
            return {
                statusCode: 500,
                body: &apos;name parameter required&apos;
            };
        }

        return axios({
            method: &apos;post&apos;,
            url: &apos;https://hooks.zapier.com/hooks/catch/2422393/otw0s6l/&apos;,
            data: {
                email: email,
                fullName: fullName
            }
        })
            .then((res) =&gt; {
                console.log(res);
                return {
                    statusCode: 200,
                    body: JSON.stringify(res.data)
                };
            })
            .catch((err) =&gt; {
                return { statusCode: 200, body: JSON.stringify(err.response.data.errors[0]) };
            });
    } catch (err) {
        [];
        return { statusCode: 500, body: err.toString() };
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a fairly standard Netlify function whose primary function is to wrap the HTTP request performed by Axios. The first part looks for required values within the &lt;code&gt;event&lt;/code&gt; object that is passed in, which in our case are &lt;code&gt;fullName&lt;/code&gt; and &lt;code&gt;email&lt;/code&gt;. We&apos;ll be passing these when we call the function from JavaScript within our application just as we did earlier with Postman. If the request is successful, we pass back any data sent with a status code of 200 or if it fails we return the error with a status code of 500.&lt;/p&gt;
&lt;h4&gt;Testing the Function&lt;/h4&gt;
&lt;p&gt;Now let&apos;s test the function using &lt;a href=&quot;https://www.netlify.com/products/dev/&quot;&gt;Netlify Dev&lt;/a&gt;. Netlify Dev is functionality within the &lt;a href=&quot;https://github.com/netlify/cli&quot;&gt;Netlify CLI&lt;/a&gt; that makes it easy to do local testing of your JAMStack site that is deployed to Netlify, including local testing of functions.&lt;/p&gt;
&lt;p&gt;I&apos;ve noticed that testing of functions locally generally requires that the function exist on Netlify first, so if you haven&apos;t deployed the function yet, do so. After that, any changes can be tested locally without needing to redeploy. Once that&apos;s done, start your site locally using &lt;code&gt;netlify dev&lt;/code&gt; and then open a tool like Postman and create a new POST request. Assuming the site is running on port 8888 (which is the default for Netlify Dev), the URL for the function should be &lt;code&gt;localhost:8888/.netlify/functions/zapierSend&lt;/code&gt;. You&apos;ll need to pass the JSON payload as well as shown below.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1579184354-sendconfigurestep9sm.png&quot; alt=&quot;Sending a sample request to our Netlify Function&quot;&gt;&lt;/p&gt;
&lt;p&gt;If everything is set up correctly, you should receive a success status back. Now it&apos;s time to call the function from within our application.&lt;/p&gt;
&lt;h4&gt;Calling the Function&lt;/h4&gt;
&lt;p&gt;Let&apos;s create a simple form to submit name and email.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;#x3C;h1&gt;Sending a Webhook&amp;#x3C;/h1&gt;
&amp;#x3C;form id=&quot;sendWebhookForm&quot; onsubmit=&quot;return sendWebhook(this);&quot;&gt;
    &amp;#x3C;label for=&quot;fullName&quot;&gt;Name:&amp;#x3C;/label&gt; &amp;#x3C;input type=&quot;text&quot; name=&quot;fullName&quot; /&gt; &amp;#x3C;label for=&quot;email&quot;&gt;Email:&amp;#x3C;/label&gt;
    &amp;#x3C;input type=&quot;email&quot; name=&quot;email&quot; /&gt;
    &amp;#x3C;input name=&quot;sendInfo&quot; type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;
&amp;#x3C;/form&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We&apos;ll be sending the request from the browser using Axios, so we&apos;ll also need to load the Axios library as well as a script that will contain the &lt;code&gt;sendWebhook()&lt;/code&gt; function that is called by our form.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;#x3C;script src=&quot;https://unpkg.com/axios/dist/axios.min.js&quot;&gt;&amp;#x3C;/script&gt;
&amp;#x3C;script src=&quot;main.js&quot;&gt;&amp;#x3C;/script&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;sendWebhook()&lt;/code&gt; function called when the form is submitted is a very simplistic HTTP request to our Netlify Function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function sendWebhook(form) {
    axios
        .post(&apos;/.netlify/functions/zapierSend&apos;, {
            email: form.email.value,
            fullName: form.fullName.value
        })
        .then(function (response) {
            if (response.data.status === &apos;success&apos;) {
                form.sendInfo.disabled = true;
                form.email.value = &apos;&apos;;
                form.sendInfo.value = &apos;Saved!&apos;;
            } else {
                alert(&apos;We apologize, there was a problem registering you.&apos;);
            }
        })
        .catch(function (error) {
            alert(&apos;We apologize, there was a problem registering you.&apos;);
        });

    return false;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I should note that for the purposes of example, this code doesn&apos;t include much in the way of validation and error checking. It sends a POST request with the form details to our Netlify Function which then passes that to the Zapier Webhook and, if everything is successful, posting the information to our Google spreadsheet.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1579184357-sendconfigurestep10sm.png&quot; alt=&quot;Our data in a Google Sheet&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;The awesome thing is that this same process could allow you to easily connect your JAMstack application to any of the services that 1,500+ apps that Zapier has integrations with. This makes a lot of things possible that may have been either difficult or even impossible using existing APIs. You can explore the full code at &lt;a href=&quot;https://github.com/remotesynth/webhooks&quot;&gt;https://github.com/remotesynth/webhooks&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the next part, we&apos;ll flip things around. What if, rather than receiving data from your application, you want to use a webhook to send data to your application?&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Extending JAMstack: 10 APIs and Tools to check out in 2020]]></title><description><![CDATA[The ongoing conversation about JAMstack has moved from being just a stack for creating static sites to a stack for developing dynamic web applications. Let’s take a look at an extensive list of APIs and tools you can leverage.]]></description><link>https://www.stackbit.com/blog/extending-jamstack-2020/</link><guid isPermaLink="false">https://www.stackbit.com/blog/extending-jamstack-2020/</guid><pubDate>Mon, 13 Jan 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;The JAMstack ecosystem has evolved over the past few years. It’s been getting more popular as people have moved on from the mistaken notion that only static sites can be rendered using this architecture. We see developers and companies adopting it and creating fast and dynamic web applications with helpful services and APIs while maintaining the benefits of the JAMstack, which prioritizes performance, scalability and developer experience.&lt;/p&gt;
&lt;h2&gt;The &quot;A&quot; in the JAMstack&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;A&lt;/strong&gt; in &lt;strong&gt;JAMstack&lt;/strong&gt; stands for APIs. We no longer need to worry about dealing with traditional back-end - server-side operations can now be abstracted into reusable APIs and accessed over HTTPS with JavaScript. These can be third-party services or your custom function written as &lt;a href=&quot;https://en.wikipedia.org/wiki/Function_as_a_service&quot;&gt;Functions as a Service&lt;/a&gt; (serverless functions). Let’s explore a list of useful APIs and related tools that can make your JAMstack projects dynamic.&lt;/p&gt;
&lt;h2&gt;10 APIs to check out in 2020&lt;/h2&gt;
&lt;h3&gt;1. &lt;a href=&quot;https://www.algolia.com/&quot;&gt;Algolia&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Have you ever thought of adding search functionality to your website before you start wondering what the best way to implement this feature is. Great news! &lt;a href=&quot;https://www.algolia.com/&quot;&gt;Algolia&lt;/a&gt; is a platform for all things related to the search and discovery experience. It is a hosted search engine capable of delivering real-time results from the first keystroke. Algolia’s API lets you quickly develop tailored, fast search and discovery experiences within your website.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1578919674-algoliasm.png&quot; alt=&quot;Algolia&quot;&gt;&lt;/p&gt;
&lt;h3&gt;2. &lt;a href=&quot;https://aws.amazon.com/amplify/&quot;&gt;AWS Amplify&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/amplify/&quot;&gt;AWS Amplify&lt;/a&gt; is a development platform that includes features like a data store that syncs data between your site and the cloud, authentication, machine learning, analytics and more. It provides a declarative and easy-to-use interface across different categories of cloud operations. AWS Amplify goes well with any JavaScript based front-end workflow and React Native for mobile developers. The default implementation works with Amazon Web Services (AWS), but AWS Amplify is designed to be open and pluggable for any custom back-end or service.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1578919707-amplifysm.png&quot; alt=&quot;Amplify&quot;&gt;&lt;/p&gt;
&lt;h3&gt;3. &lt;a href=&quot;https://cloudinary.com/&quot;&gt;&lt;strong&gt;Cloudinary&lt;/strong&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Cloudinary is an end-to-end image management solution for your website and mobile apps. Cloudinary covers everything from image uploads, storage, manipulations, optimizations to delivery. You can easily upload images to the cloud and automatically perform smart image manipulations without installing any complex software. All your images are then delivered through a CDN and optimized and using industry best practices.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1578919715-cloudinarysm.png&quot; alt=&quot;Cloudinary&quot;&gt;&lt;/p&gt;
&lt;h3&gt;4. &lt;a href=&quot;https://disqus.com/&quot;&gt;Disqus&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Interactions on the web are very important and creating a platform to engage with users and to communicate is a no-brainer. &lt;a href=&quot;https://disqus.com/&quot;&gt;Disqus&lt;/a&gt; is one of the platforms you should take a look at if you are looking to add comments functionality to your website or blog. &lt;a href=&quot;https://disqus.com/&quot;&gt;Disqus&lt;/a&gt; is a comment hosting service for web sites and online communities that uses a networked platform complete with social network integration, advanced administration, and moderation options. While Disqus is often embedded, it also has an &lt;a href=&quot;https://disqus.com/api/docs/&quot;&gt;extensive API&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1578919718-disqussm.png&quot; alt=&quot;Disqus&quot;&gt;&lt;/p&gt;
&lt;h3&gt;5. &lt;a href=&quot;https://fauna.com/&quot;&gt;FaunaDB&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;FaunaDB is a globally-distributed, serverless, cloud database management system for modern applications and highly recommended for use with JAMstack sites. It enables you to instantly create a full-featured data back-end for applications, taking away the need to worry about managing a traditional database. It offers a great development experience in part by supporting both the Fauna Query Language but also native GraphQL.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1578919722-faunasm.png&quot; alt=&quot;FaunaDB&quot;&gt;&lt;/p&gt;
&lt;h3&gt;6. &lt;a href=&quot;https://www.netlify.com/products/forms/&quot;&gt;Netlify Forms&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Netlify Forms is a great service for integrating forms into your JAMstack site. There is no JavaScript required, Netlify’s build bots make it work by parsing your HTML files directly at deploy time. This means that there&apos;s no need for you to make an API call or include extra JavaScript on your site. You only need to pass a &lt;code&gt;netlify&lt;/code&gt; attribute or &lt;code&gt;data-netlify=&quot;true&quot;&lt;/code&gt; for JavaScript rendered forms to your &lt;code&gt;&amp;#x3C;form&gt;&lt;/code&gt; tag. Note that your site needs to be deployed to Netlify for this to work as you will be receiving all form submissions via your Netlify dashboard.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1578919725-netlifyformssm.png&quot; alt=&quot;Netlify Forms&quot;&gt;&lt;/p&gt;
&lt;h3&gt;7. &lt;a href=&quot;https://auth0.com&quot;&gt;Auth0&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Auth0 is an authentication and authorization as a service platform. They give developers and companies the building blocks they need to secure their applications without having to become security experts. You can connect your JAMstack application to Auth0 and set the identity providers you want to use (i.e. how you want your users to log in) and based on your app&apos;s technology, choose one of the SDKs or call the API, and hook it up to your app.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1578919712-auth0sm.png&quot; alt=&quot;Auth0&quot;&gt;&lt;/p&gt;
&lt;h3&gt;8. &lt;a href=&quot;https://snipcart.com/&quot;&gt;Snipcart&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Snipcart is a simple shopping cart solution that allows you to turn any website into a fully customizable e-commerce platform. A basic Snipcart integration will take developers minutes. You only need to use HTML markup to add a full shopping cart platform to an existing site. Snipcart allows payment processing, shipping estimates, and order management without making your customers leave your website.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1578919729-snipcartsm.png&quot; alt=&quot;Snipcart&quot;&gt;&lt;/p&gt;
&lt;h3&gt;9. &lt;a href=&quot;https://stripe.com/&quot;&gt;Stripe&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Thinking of implementing online payments to your JAMstack application? With &lt;a href=&quot;https://stripe.com&quot;&gt;Stripe&lt;/a&gt; you can integrate a service for accepting payments and managing your business online, all on the client-side. The integration with Stripe checkout API lets you collect payments with just a few lines of code in your JAMstack app.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1578919732-stripesm.png&quot; alt=&quot;Stripe&quot;&gt;&lt;/p&gt;
&lt;h3&gt;10. &lt;a href=&quot;https://www.netlify.com/products/functions/&quot;&gt;&lt;strong&gt;Netlify Functions&lt;/strong&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Netlify Functions let you deploy Lambda functions without an AWS account and with the function management handled directly within Netlify. The functions are version-controlled, built, and deployed along with the rest of your Netlify site, and it will automatically handle service discovery through the built-in API gateway.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1578919727-netlifyfunctionssm.png&quot; alt=&quot;Netlify Functions&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Where to Go From Here&lt;/h2&gt;
&lt;p&gt;The JAMstack provides a great advantage to both the end-users and developers coupled with a fast and scalable approach. The services here are a part of a myriad list of services available to use in the JAMstack ecosystem. Check out the &lt;a href=&quot;https://www.thenewdynamic.org/&quot;&gt;New Dynamic directory of tools and services&lt;/a&gt; and the &lt;a href=&quot;https://github.com/agarrharr/awesome-static-website-services&quot;&gt;awesome static website services repository&lt;/a&gt; for a comprehensive list of other services to explore.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Searching the JAMStack]]></title><description><![CDATA[Raymond Camden explores some options for adding site search functionality to a JAMStack site.]]></description><link>https://www.stackbit.com/blog/jamstack-search/</link><guid isPermaLink="false">https://www.stackbit.com/blog/jamstack-search/</guid><pubDate>Thu, 09 Jan 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Congratulations. You&apos;ve successfully gotten someone to visit your web site. Unfortunately, they aren&apos;t able to find what they need and promptly leave your site to go look at cat videos.&lt;/p&gt;
&lt;p&gt;I feel your pain. Making a large site more usable for visitors is a hard task, and providing the ability to search goes a long way to helping them get what they need. Using search in the JAMStack is absolutely possible and in this article I&apos;ll show you a couple of ways of accomplishing that.&lt;/p&gt;
&lt;h2&gt;All roads lead to Google...&lt;/h2&gt;
&lt;p&gt;It should come as no surprise that the first thing we&apos;ll discuss when talking about search is Google. Google is a &lt;em&gt;lot&lt;/em&gt; of things, but primarily they&apos;re a search engine and can help expose your content in multiple ways. Let&apos;s take a look at the options Google provides.&lt;/p&gt;
&lt;p&gt;Let me begin by saying that I&apos;m not going to talk about SEO. That&apos;s an important topic and worthy of its own article. While it directly relates to how well Google can find what your site covers, the assumption here is that we will be searching only against our particular site and don&apos;t have to worry about competitors, other sites, and so forth.&lt;/p&gt;
&lt;p&gt;The first solution is to simply take a form and point it at Google. So for example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;#x3C;form action=&quot;https://www.google.com/search&quot; method=&quot;get&quot;&gt;
    &amp;#x3C;input type=&quot;search&quot; name=&quot;q&quot; autofocus size=&quot;50&quot; /&gt;
    &amp;#x3C;input type=&quot;submit&quot; value=&quot;Search&quot; /&gt;
&amp;#x3C;/form&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Google looks for a value named &lt;code&gt;q&lt;/code&gt; that represents your query term. Of course, you probably want to limit it to your site. Google&apos;s search tool supports numerous operators, one of them being &lt;code&gt;site:&lt;/code&gt; which limits results to one particular site. Here&apos;s how that could look:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;#x3C;form action=&quot;https://www.google.com/search&quot; method=&quot;get&quot;&gt;
    &amp;#x3C;input type=&quot;search&quot; name=&quot;q&quot; value=&quot;site:https://www.raymondcamden.com &quot; autofocus size=&quot;50&quot; /&gt;
    &amp;#x3C;input type=&quot;submit&quot; value=&quot;Search&quot; /&gt;
&amp;#x3C;/form&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&apos;ve added the site operator and pointed it at my blog. I also added a space after it so that when a person starts typing, it won&apos;t mess with the operator.&lt;/p&gt;
&lt;p&gt;There&apos;s a lot to &lt;em&gt;not&lt;/em&gt; like about this approach. First, the user has to know not to mess with the operator. Second, this takes the user off your site and takes them to Google. You get no control over the display, no control over results, and so forth.&lt;/p&gt;
&lt;p&gt;This is probably the &lt;em&gt;worst&lt;/em&gt; solution you can use, but it also takes roughly ten seconds to add to your site and can work in a pinch.&lt;/p&gt;
&lt;h3&gt;Google Custom Search Engine&lt;/h3&gt;
&lt;p&gt;Luckily Google provides a nicer option, &lt;a href=&quot;https://cse.google.com&quot;&gt;Google Custom Search Engine&lt;/a&gt;. Google Custom Search Engine (CSE for short) allows you to define customized search engines with options to automatically filter to a site (or sites), hide directories, and more. You have multiple options for the UI of the search engine and the end result is a set of HTML and JavaScript you just paste onto your page.&lt;/p&gt;
&lt;p&gt;Pricing information can be found at their &lt;a href=&quot;https://support.google.com/customsearch/answer/9069107?hl=en&amp;#x26;ref_topic=4513742&quot;&gt;faq&lt;/a&gt; page and basically boils down to this: you can use CSE for free but you&apos;ll get ads in your result, much like the &quot;regular&quot; Google. They also support a JSON API for REST based access but this is paid only option and won&apos;t be the covered in this article.&lt;/p&gt;
&lt;p&gt;Working with CSE simply requires logging in (and assuming you have a Google account) to their portal (&lt;a href=&quot;https://cse.google.com/cse/all&quot;&gt;https://cse.google.com/cse/all&lt;/a&gt;) and then adding your new search engine:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1578578451-cse1.png&quot; alt=&quot;CSE Dashboard&quot;&gt;&lt;/p&gt;
&lt;p&gt;Click the Add button and begin by configuring the site, or sites, to search. Note that you can customize the directories, specify individual pages, and so forth:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1578578598-cse2.png&quot; alt=&quot;Adding a new CSE&quot;&gt;&lt;/p&gt;
&lt;p&gt;You can enter &lt;em&gt;any&lt;/em&gt; site you want here, even sites you don&apos;t own. For my testing, I entered &lt;a href=&quot;https://www.stackbit.com/blog&quot;&gt;https://www.stackbit.com/blog&lt;/a&gt;. After you&apos;ve done that, you can then get your code:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1578578650-cse3.png&quot; alt=&quot;CSE creation is complete&quot;&gt;&lt;/p&gt;
&lt;p&gt;Here&apos;s what the code look looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;#x3C;script async src=&quot;https://cse.google.com/cse.js?cx=013262903309526573707:g4gj5dkucit&quot;&gt;&amp;#x3C;/script&gt;
&amp;#x3C;div class=&quot;gcse-search&quot;&gt;&amp;#x3C;/div&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There&apos;s quite a few customization options but if you tweak nothing at all, here&apos;s how it looks:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1578578681-cse4.png&quot; alt=&quot;Search field&quot;&gt;&lt;/p&gt;
&lt;p&gt;What&apos;s not obvious from the screen shot above is that the form takes 100% of the available width, so be prepared to apply a bit of CSS, or put it in a container with a set width. Once you search, it opens a modal window:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1578578725-cse5.png&quot; alt=&quot;Search results&quot;&gt;&lt;/p&gt;
&lt;p&gt;You may notice that the first result shown here is an ad. Also note that results are sorted by relevancy. And finally, results will open in a new tab. You can test a live version of this here: &lt;a href=&quot;https://netlifydemos.netlify.com/jamstacksearchcse.html&quot;&gt;https://netlifydemos.netlify.com/jamstacksearchcse.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Personally, I dislike &lt;em&gt;all&lt;/em&gt; of that. I don&apos;t like the modal popup window. I don&apos;t like searches showing in another tab. Luckily this is all easily fixable. In your new CSE, you can go to the &quot;Look and feel&quot; section and tweak quite a bit.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1578578797-cse6.png&quot; alt=&quot;Customizing layout of results&quot;&gt;&lt;/p&gt;
&lt;p&gt;Getting results to not open a new tab is more difficult - difficult in terms of finding out how. The actual implementation isn&apos;t so bad. Google documents what is calls the &lt;a href=&quot;https://developers.google.com/custom-search/docs/element&quot;&gt;Custom Search Element API 2.0&lt;/a&gt; and provides you with a simple HTML based way to configure how things work. There&apos;s numerous options here (although nthe color and font style options must be done in the web-based admin) but here&apos;s a simple modification to keep results in the same tab:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;#x3C;script async src=&quot;https://cse.google.com/cse.js?cx=013262903309526573707:g4gj5dkucit&quot;&gt;&amp;#x3C;/script&gt;
&amp;#x3C;div class=&quot;gcse-search&quot; data-linkTarget=&quot;_parent&quot;&gt;&amp;#x3C;/div&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By using &lt;code&gt;data-linkTarget&lt;/code&gt;, I&apos;m specifying where my results end up - in this case the current tab. If you want to give this a try, hit the demo here: &lt;a href=&quot;https://netlifydemos.netlify.com/jamstacksearchcse2.html&quot;&gt;https://netlifydemos.netlify.com/jamstacksearchcse2.html&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As I said, there&apos;s quite a bit of customization you can do, just be prepared to dig into the docs a bit. You can see a final demo at my own blog&apos;s search page, &lt;a href=&quot;https://www.raymondcamden.com/search/&quot;&gt;https://www.raymondcamden.com/search/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All in all, CSE is a relatively simple way to add search to a site and, given that Google knows a thing or two about search, it&apos;s a powerful solution. However, even with a large number of customizations, you don&apos;t have absolute control over the results unless you&apos;re willing to go (and pay for) the JSON API solution and connect it with a serverless function of some sort.&lt;/p&gt;
&lt;h3&gt;Build your own with Lunr&lt;/h3&gt;
&lt;p&gt;An option with much more control, and of course, more work involved, is &lt;a href=&quot;https://lunrjs.com/&quot;&gt;Lunr&lt;/a&gt;. Lunr is a 100% client-side solution giving you control over every aspect of search.&lt;/p&gt;
&lt;p&gt;You control what&apos;s searched by creating an index of data. And here&apos;s the crucial bit: in order for Lunr to work, all of that data has to be sent to the client. That means using Lunr to search your ten thousand page site may not be an option. How much and what you index is up to you, but just remember that you&apos;ll be sending that data down the wire.&lt;/p&gt;
&lt;p&gt;Once Lunr has your index, it will perform some intelligent optimizations to help you search. This can be anything from ignoring words like &quot;the&quot; to recognizing that if you search for cat and it shows up ten times in one page and twice in another, then the first one is probably a more relevant match.&lt;/p&gt;
&lt;p&gt;For the index, you&apos;ll provide JSON data consisting of a few things. First, you&apos;ll need some way to identify the result so that you can link to it later. Typically this would be the URL. Second you will want a label for the result, and that is usually the title of the page. Finally you want the searchable content. That can be anything. It can be the content of the page, but that may be a lot. You could use an excerpt where you only read in the first paragraph, or two. What you select here depends on what you want to search and how much content you have.&lt;/p&gt;
&lt;p&gt;How you generate that JSON data will depend on your static site generator, but at the end, you&apos;ll have some endpoint (like &lt;code&gt;/data.json&lt;/code&gt;) that you can point to with the client-side code.&lt;/p&gt;
&lt;p&gt;The client-side code consists of two parts. First you need to create the Lunr instance. To do this, I fetch the JSON:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let result = await fetch(&apos;/index.json&apos;);
docs = await result.json();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then I create and populate the Lunr instance:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let idx = lunr(function () {
    this.ref(&apos;id&apos;);
    this.field(&apos;title&apos;);
    this.field(&apos;content&apos;);

    docs.forEach(function (doc, idx) {
        doc.id = idx;
        this.add(doc);
    }, this);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this particular example, I&apos;ve defined a primary key (&lt;code&gt;id&lt;/code&gt;) and two fields, &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;content&lt;/code&gt;. I then loop over my docs and add them. This section in particular will change depending on what you&apos;re searching, how you want to search, and so forth.&lt;/p&gt;
&lt;p&gt;Luckily searching is much simpler:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;results = idx.search(term);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that&apos;s basically it. Displaying those results is up to you. For a deeper look at this, you can see the article I wrote on using Lunr with Eleventy and Vue.js: &lt;a href=&quot;https://www.raymondcamden.com/2019/10/20/adding-search-to-your-eleventy-static-site-with-lunr&quot;&gt;Adding Search to your Eleventy Static Site with Lunr&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Other Options and Ideas&lt;/h3&gt;
&lt;p&gt;There are other options you may wish to consider as well. &lt;a href=&quot;https://www.customsearch.ai/&quot;&gt;Bing Custom Search&lt;/a&gt; provides an experience like Google&apos;s Custom Search Engine, but powered by Bing (obviously).&lt;/p&gt;
&lt;p&gt;If you are open to using serverless with your JAMStack, then you can use any API-based solution. &lt;a href=&quot;&quot;&gt;Elastic Search&lt;/a&gt;, for example, provides incredibly powerful search experiences and a powerful API. Or even simpler, if your content is based on a database, you can write custom code to perform searches against your data.&lt;/p&gt;
&lt;p&gt;Once you&apos;ve gotten search on your site, you may also want to look into logging and monitoring what people are actually searching for. It may be obvious, but if people are consistently searching for something you don&apos;t have, it&apos;s a clue to get crackin&apos; on new content!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[What to Expect from the JAMstack in 2020 - Ahmad Awais]]></title><description><![CDATA[Ahmad Awais of Cloudinary shares what changes we saw in the JAMstack ecosystem in 2019 and what he expects for 2020.]]></description><link>https://www.stackbit.com/blog/jamstack-2020-ahmad-awais/</link><guid isPermaLink="false">https://www.stackbit.com/blog/jamstack-2020-ahmad-awais/</guid><pubDate>Mon, 30 Dec 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;What to Expect from the JAMstack in 2020 - Ahmad Awais&lt;/h2&gt;
&lt;p&gt;2019 definitely seemed to be a pivotal year for the JAMstack. New companies cropped up (yep, &lt;a href=&quot;https://www.stackbit.com/&quot;&gt;us included&lt;/a&gt;), &lt;a href=&quot;https://jamstackconf.com/&quot;&gt;JAMstack&lt;em&gt;conf&lt;/em&gt;sf&lt;/a&gt; was the biggest event yet and lots of new tools seemed to gain momentum daily. In this series of posts, we&apos;re asking some well-known members of the JAMstack community what they thought about this past year and what they think you can expect for the year to come. This edition features &lt;a href=&quot;https://twitter.com/MrAhmadAwais&quot;&gt;Ahmad Awais&lt;/a&gt;, developer advocate for &lt;a href=&quot;https://cloudinary.com/&quot;&gt;Cloudinary&lt;/a&gt; and Google Developer Expert.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1577735437-ahmadawais.jpg&quot; alt=&quot;Ahmad Awais&quot;&gt;&lt;/p&gt;
&lt;h3&gt;Tell us about yourself and what you do? Does JAMstack play a role in your day-to-day work?&lt;/h3&gt;
&lt;p&gt;Hi there, I’m Awais — a Principal Developer Advocate at Cloudinary. I help some of the world’s largest and most respected open-source organizations deliver the best developer &amp;#x26; community experience. I edutain at &lt;a href=&quot;https://vscode.pro/&quot;&gt;VSCode.pro&lt;/a&gt; and am an author of various open-source dev-tools and software libraries used by millions of developers worldwide. I am an invited Google Developers Expert, a Node.js Community Committee member, an award-winning developer, and an international speaker. We can connect via Twitter &lt;a href=&quot;https://twitter.com/MrAhmadAwais&quot;&gt;@MrAhmadAwais&lt;/a&gt; where I share #OneDevMinute series of dev tips &amp;#x26; tricks.&lt;/p&gt;
&lt;p&gt;I love the JAMstack community and software tooling built around the idea of building modern frontend with all the power that comes with it. I have built sites with different JAMstacks, helped companies migrate their frontend and endeavored to speak at every opportunity I get about using the cutting edge tech to build modern frontends for sites.&lt;/p&gt;
&lt;h3&gt;What is your current JAMstack stack? What tool(s) are you most excited about?&lt;/h3&gt;
&lt;p&gt;I use many different kinds of JAMstack. Most notably &lt;a href=&quot;https://www.gatsbyjs.org/&quot;&gt;Gatsby&lt;/a&gt;, &lt;a href=&quot;https://nextjs.org/&quot;&gt;Next.js&lt;/a&gt;, and &lt;a href=&quot;https://gohugo.io/&quot;&gt;Hugo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Case in point:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VSCode.pro — My custom-built LMS for the VSCode course that I built using Gatsby.js and hosted with Netlify. This new frontend has outperformed previous sites that had a rather dynamic frontend.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloudycam.dev/&quot;&gt;CloudyCAM.dev&lt;/a&gt; — JAMstack site built with Next.js, ZEIT Now (using React.js, Vue.js, and Node.js). CloudyCAM is sort of an IoT setup where we take your picture and a demo page gets generated for you in less than 15 secs, by the time you come to ask about your photos. It showcases how Cloudinary can become your serverless media component that integrates well with JAMstack frameworks. I actually gave a talk about it in more detail at the &lt;a href=&quot;https://www.youtube.com/watch?v=dwpn1pd9kT8&quot;&gt;BackendlessConf_&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Talks/Presentations: I love markdown and write everything from my emails to &lt;a href=&quot;https://backendlessconf.ahmadawais.com/&quot;&gt;my talks&lt;/a&gt; and presentations with markdown. Hugo comes in handy here which helps me build my presentations in a super quick manner — like helping me live code in talk while recompiling the slides in a jiffy.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When I contributed a codelab to Google&apos;s Web.dev site, I found out about &lt;a href=&quot;https://www.11ty.dev/&quot;&gt;11ty&lt;/a&gt; which I&apos;m also excited about. I think it can be a very good contender for a conference site we are building.&lt;/p&gt;
&lt;h3&gt;What changes did you see, for better or worse, in 2019 related to the JAMstack ecosystem?&lt;/h3&gt;
&lt;p&gt;In 2019, JAMstack saw a lot of traction. I saw companies, VC&apos;s, developers get more and more excited about the idea behind JAMstack. I think the best part of it all is the promise of making things simpler yet powerful. A CMS like WordPress would not give you as much control over the frontend as much as you can get with a JAMstack site. A CMS plugin would add 3rd party scripts with no regard to your resource loading order and will mess up the performance — ultimately leading to a bad user and developer experience.&lt;/p&gt;
&lt;p&gt;So, that&apos;s the good part. Easy to say that I&apos;m a fan of this whole new industry.&lt;/p&gt;
&lt;p&gt;The worse parts are not that apparent yet since the JAMstack ecosystem is relatively new but I definitely see a divide happening — developers trying to reinvent the wheel with what we have in the CMS&apos;s today and unintentionally causing things to become complicated and alienating to the newcomers in the community. I believe we should only take the good parts of our good old CMS&apos;s stacks and not trying to build everything the way they did it. Like for example, the &quot;decisions not options&quot; mantra of WordPress would fit right in here.&lt;/p&gt;
&lt;h3&gt;What changes in 2020 do you see forthcoming that will have an impact on the adoption of or day-to-day development using the JAMstack?&lt;/h3&gt;
&lt;p&gt;I know for a fact that a number of services are being built by some excellent developers in the JAMstack community that are going to be launched in 2020. Services that mostly solve a complex dynamic part of having a simple website that for example needs to accept data from forms, a no-code API, a zero-config integration, and companies positioning their products to be well integrated with JAMstack.&lt;/p&gt;
&lt;p&gt;To create the most impact on the day-to-day adoption of JAMstack we need to cater to the experiences around all the three pillars of JAMstack. We need to improve the tooling around JavaScript, for building custom source or production APIs, and for writing Markup. I believe that can happen if we empower developers with a simple yet powerful set of API first services and frameworks.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[What to Expect from the JAMstack in 2020 - Bud Parr]]></title><description><![CDATA[What exciting new things happened in 2019 in JAMstack? What can you expect to see in 2020? Bud Parr, creator of The New Dynamic community and newsletter, shares his thoughts.]]></description><link>https://www.stackbit.com/blog/jamstack-2020-bud-parr/</link><guid isPermaLink="false">https://www.stackbit.com/blog/jamstack-2020-bud-parr/</guid><pubDate>Mon, 23 Dec 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;2019 definitely seemed to be a pivotal year for the JAMstack. New companies cropped up (yep, &lt;a href=&quot;https://www.stackbit.com/&quot;&gt;us included&lt;/a&gt;), &lt;a href=&quot;https://jamstackconf.com/sf/&quot;&gt;JAMstack&lt;em&gt;conf&lt;/em&gt;sf&lt;/a&gt; was the biggest event yet and lots of new tools seemed to gain momentum daily. In this series of posts, we&apos;re asking some well-known members of the JAMstack community what they thought about this past year and what they think you can expect for the year to come. This edition features &lt;a href=&quot;https://twitter.com/budparr&quot;&gt;Bud Parr&lt;/a&gt;, creator of &lt;a href=&quot;https://www.thenewdynamic.org/&quot;&gt;The New Dynamic&lt;/a&gt; website and community.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1577113617-budparr.jpg&quot; alt=&quot;Bud Parr&quot;&gt;&lt;/p&gt;
&lt;h3&gt;Tell us about yourself and what you do? Does JAMstack play a role in your day-to-day work?&lt;/h3&gt;
&lt;p&gt;I run a web design and development agency called &lt;a href=&quot;https://www.thenewdynamic.org/&quot;&gt;The New Dynamic&lt;/a&gt;, as well as a community site and Slack community of the same name, as well as a &lt;a href=&quot;https://www.meetup.com/JAMstack-nyc/&quot;&gt;Meetup event series&lt;/a&gt;, and a &lt;a href=&quot;https://www.getrevue.co/profile/thenewdynamic&quot;&gt;newsletter&lt;/a&gt;, all devoted to the JAMstack. You could say I eat, sleep, and breath JAMstack. In fact, 100% of my agency work has been JAMstack since 2013, and I wouldn&apos;t consider building any other way. I spend a lot of time trying to understand the tools in the ecosystem, and I take every opportunity I can to speak about them and help others develop this methodology in their work.&lt;/p&gt;
&lt;h3&gt;What is your current JAMstack stack? What tool(s) have you most excited?&lt;/h3&gt;
&lt;p&gt;We use &lt;a href=&quot;https://gohugo.io/&quot;&gt;Hugo&lt;/a&gt; quite a bit, along with &lt;a href=&quot;https://forestry.io/&quot;&gt;Forestry&lt;/a&gt; as an editor and &lt;a href=&quot;https://www.netlify.com/&quot;&gt;Netlify&lt;/a&gt; for hosting. We manage a lot of sites and that set of tools gives us a really solid foundation. Hugo is a very stable tool as it ships with a single binary, and it enables us to build pretty much anything we want, including sprinkling in React or Vue when we need it. Forestry empowers our clients with a beautiful and user friendly interface. Netlify adds the magic of instantaneously rolling back to previous versions of a site, or shipping functions right alongside our site&apos;s codebase, or automating our deploy previews. Those three tools together are a real powerhouse.&lt;/p&gt;
&lt;p&gt;I&apos;m really excited about what&apos;s happening in the headless CMS space. I think tools like &lt;a href=&quot;https://www.sanity.io/&quot;&gt;Sanity.io&lt;/a&gt; fulfill the promise of a true headless CMS with its &lt;a href=&quot;https://www.sanity.io/structured-content&quot;&gt;structured content&lt;/a&gt;, and other tools, like &lt;a href=&quot;https://prismic.io/&quot;&gt;Prismic&lt;/a&gt; and &lt;a href=&quot;https://ghost.org/&quot;&gt;Ghost&lt;/a&gt; are great editing experiences. I&apos;m also excited about the potential of &lt;a href=&quot;https://sapper.svelte.dev/&quot;&gt;Svelte/Sapper&lt;/a&gt;, which is a &lt;a href=&quot;https://nextjs.org/&quot;&gt;NextJS&lt;/a&gt;-style web application framework along the same line as React or Vue, but with a much smaller footprint as it compiles to vanilla Javascript. I can see a tool like that providing a lot of flexibility for developers who may need JAMstack at times, and server-rendered sites or applications at others.&lt;/p&gt;
&lt;h2&gt;What changes did you see, for better or worse, in 2019 related to the JAMstack ecosystem?&lt;/h2&gt;
&lt;p&gt;The JAMstack has become more mainstream this year, and with that a set of expectations that will be hard to meet as the basis of comparison changes. When we began building static sites it was for the security, stability and efficiency gains, and, importantly, eschewing unnecessary complexity. It took a fairly radical re-think to get things done, but we were free to pick and choose the best tools for a job. Maybe I just got used to it being a little bit painful 😉, but as the ecosystem grows to ease that pain, abstractions arrive to meet expectations of developer experience and new, ever more complicated use-cases; until we&apos;re right back lamenting the monoliths we&apos;ve created that we sought to escape in the first place.&lt;/p&gt;
&lt;h2&gt;What changes in 2020 do you see forthcoming that will have an impact on adoption of or day-to-day development using the JAMstack?&lt;/h2&gt;
&lt;p&gt;I&apos;m always surprised by new tools people create and look forward to watching more innovation in 2020. The most impactful recent innovation we&apos;ve benefited from is the growth of serverless functions, which allow us to sprinkle in backend functionality where we need it to enhance the front-end of our sites. We use these quite a bit at our firm today and I only see that growing. I think there&apos;s a lot of room for developers to do interesting things there. I imagine serverless going fairly &quot;codeless&quot; in the near future, which will open up all sorts of functionality while making them more stable and create a sharing ecosystem of functions.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[What to Expect from the JAMstack in 2020 - Chris Coyier]]></title><description><![CDATA[Chris Coyier, creator of CSS-Tricks, shares his thoughts on what tools in the JAMstack ecosystem have him excited and what he thinks we'll see in 2020.]]></description><link>https://www.stackbit.com/blog/jamstack-2020-chris-coyier/</link><guid isPermaLink="false">https://www.stackbit.com/blog/jamstack-2020-chris-coyier/</guid><pubDate>Fri, 20 Dec 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;2019 definitely seemed to be a pivotal year for the JAMstack. New companies cropped up (yep, &lt;a href=&quot;https://www.stackbit.com/&quot;&gt;us included&lt;/a&gt;), &lt;a href=&quot;https://jamstackconf.com/sf/&quot;&gt;JAMstack&lt;em&gt;conf&lt;/em&gt;sf&lt;/a&gt; was the biggest event yet and lots of new tools seemed to gain momentum daily. In this series of posts, we&apos;re asking some well-known members of the JAMstack community what they thought about this past year and what they think you can expect for the year to come. This edition features &lt;a href=&quot;https://twitter.com/chriscoyier&quot;&gt;Chris Coyier&lt;/a&gt;, creator of &lt;a href=&quot;https://css-tricks.com/&quot;&gt;CSS-Tricks&lt;/a&gt; and cofounder of &lt;a href=&quot;https://codepen.io/&quot;&gt;Codepen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1576846331-chriscoyier.jpg&quot; alt=&quot;Chris Coyier&quot;&gt;&lt;/p&gt;
&lt;h3&gt;Tell us about yourself and what you do? Does JAMstack play a role in your day-to-day work?&lt;/h3&gt;
&lt;p&gt;Hi! I write about the web at CSS-Tricks, talk about the web at conferences around the world and on my podcast &lt;a href=&quot;https://shoptalkshow.com/&quot;&gt;ShopTalk&lt;/a&gt;, and am a co-founder of the social development environment CodePen.&lt;/p&gt;
&lt;p&gt;I have a couple of projects using the JAMstack approach, like my site about &lt;a href=&quot;https://conferences.css-tricks.com/&quot;&gt;upcoming front-end focused conferences&lt;/a&gt; and site about &lt;a href=&quot;https://serverless.css-tricks.com/&quot;&gt;serverless technology&lt;/a&gt;, but nothing super major just yet. I&apos;d say it factors into my day-to-day work in the sense that I&apos;m always looking for ways to use it more and move things to it, because I think it&apos;s the best approach to web development these days. The good news is that there are lots of ways to baby step into it. Statically render a page here and there. Use cloud functions when you can. These are beneficial steps whether or not you made a final leap to being entirely JAMstack or not.&lt;/p&gt;
&lt;h3&gt;What is your current JAMstack stack? What tool(s) have you most excited?&lt;/h3&gt;
&lt;p&gt;I don&apos;t think it&apos;s any surprise that &lt;a href=&quot;https://www.netlify.com/&quot;&gt;Netlify&lt;/a&gt; is doing the most for developers in this space. I think it&apos;s fair to say they can handle the whole &quot;stack&quot; in most cases, since they are not only the file host, but the deployment method, the form processor, the auth, the cloud functions, and even the customized build process. It&apos;s an exciting company to watch. But the space is so hot, it&apos;s exciting to watch the whole landscape evolve. I&apos;ve only recently seen some companies pop up to try to replicated some of what Netlify is doing, like &lt;a href=&quot;https://www.pancake.io/&quot;&gt;Pancake&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&apos;m sure you&apos;re more than aware, but &lt;a href=&quot;https://www.stackbit.com/&quot;&gt;Stackbit&lt;/a&gt; is interesting too, making a number of things easier, like piecing together different parts to get started.&lt;/p&gt;
&lt;h3&gt;What changes did you see, for better or worse, in 2019 related to the JAMstack ecosystem?&lt;/h3&gt;
&lt;p&gt;It&apos;s so new still I&apos;m not sure it&apos;s been around long enough to see fluctuation in things. I think it&apos;s fairly certain we&apos;ll see the space get bigger, and with that more competition, and then we&apos;ll start seeing the flux. My hope is that we&apos;ll see pricing stay super low. That&apos;s a big part of the appeal and a thing that opens doors to developers new and old around the world.&lt;/p&gt;
&lt;h3&gt;What changes in 2020 do you see forthcoming that will have an impact on adoption of or day-to-day development using the JAMstack?&lt;/h3&gt;
&lt;p&gt;Perhaps the #1 thing I&apos;m interested in seeing evolve, hopefully for the better, is all the CMS tooling in the space. So many sites need strongly-capable CMSs with really custom data models. It would be unfortunate to see that be a limiting factor of JAMstack adoption. The headless CMS market is already pretty hot, but I expect it to get much hotter as more developers and companies see the benefit of decoupled CMSs, so their data and authoring can evolve separately from their front ends.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[What to Expect from the JAMstack in 2020 - Tara Manicsic]]></title><description><![CDATA[Tara Manicsic of Netlify shares her thoughts on the past year in the JAMstack and what she's excited about for the ecosystem in 2020.]]></description><link>https://www.stackbit.com/blog/jamstack-2020-tara-manicsic/</link><guid isPermaLink="false">https://www.stackbit.com/blog/jamstack-2020-tara-manicsic/</guid><pubDate>Thu, 19 Dec 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;2019 definitely seemed to be a pivotal year for the JAMstack. New companies cropped up (yep, &lt;a href=&quot;https://www.stackbit.com/&quot;&gt;us included&lt;/a&gt;), &lt;a href=&quot;https://jamstackconf.com/sf/&quot;&gt;JAMstack&lt;em&gt;conf&lt;/em&gt;sf&lt;/a&gt; was the biggest event yet and lots of new tools seemed to gain momentum daily. In this series of posts, we&apos;re asking some well-known members of the JAMstack community what they thought about this past year and what they think you can expect for the year to come. This edition features &lt;a href=&quot;https://twitter.com/tzmanics&quot;&gt;Tara Manicsic&lt;/a&gt; of &lt;a href=&quot;https://www.netlify.com/&quot;&gt;Netlify&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1576760766-taramanicsic.jpg&quot; alt=&quot;Tara Manicsic&quot;&gt;&lt;/p&gt;
&lt;h3&gt;Tell us about yourself and what you do? Does JAMstack play a role in your day-to-day work?&lt;/h3&gt;
&lt;p&gt;Hi, I’m Tara Z, Manicsic and I work on Angular developer experience at Netlify. Our company basically boils down to a bunch of people that are super excited about what the JAMstack brings to web performance, user experience, and developer experience (to be clear, that’s not our official creed 😋). In other words, JAMstack &lt;em&gt;is&lt;/em&gt; my day-to-day. We all try to build tools and resources to help developers create, maintain, and deliver applications.&lt;/p&gt;
&lt;h3&gt;What is your current JAMstack stack? What tool(s) have you most excited?&lt;/h3&gt;
&lt;p&gt;As an Angular developer, there hasn’t been too much tooling round the ecosystem. This seems to be changing as more developers are seeing the advantages of the JAMstack. For instance, the team at HeroDevs is releasing the first Angular Static Site Generator, &lt;a href=&quot;https://github.com/scullyio/scully&quot;&gt;Scully&lt;/a&gt;. I’m super stoked for it. With their schematics you don’t have to learn any new language or syntax, it’s just Angular. Plus, it works on Angular.js and Angular projects massively shrinking their package size.&lt;/p&gt;
&lt;p&gt;My JAMstack stack has always included Netlify (even before they were paying me 😉) because I loved their dev experience. This year David Wells announced &lt;a href=&quot;https://www.netlify.com/build/plugins-beta/&quot;&gt;Build Plugins&lt;/a&gt; which will allow even more customization to your build process. With Build Plugins you can hook into different parts of the build lifecycle to add functionality. There are so many possibilities that all of us in the community can build, I’m so excited to see everything that&apos;s created.&lt;/p&gt;
&lt;h3&gt;What changes did you see, for better or worse, in 2019 related to the JAMstack ecosystem?&lt;/h3&gt;
&lt;p&gt;I’ve spent some time introducing more Angular developers to the JAMstack this year and am excited to introduce even more in 2020 (#2020Vision ™️ Hawk Philsworth). This has proven to me that the JAMstack ecosystem is going to keep growing as more stacks see how they can improve performance and experience using JAMstack best practices. Plus, there are more examples of enterprise applications creating more reliable user experiences, faster response times, and cutting their costs.&lt;/p&gt;
&lt;h3&gt;What changes in 2020 do you see forthcoming that will have an impact on adoption of or day-to-day development using the JAMstack?&lt;/h3&gt;
&lt;p&gt;I was attracted to the JAMstack because the developer experience seemed ideal to me, especially the git workflow. Working with the &lt;a href=&quot;https://www.netlifycms.org/&quot;&gt;Netlify CMS&lt;/a&gt; showed me how it worked to have a UI for people who weren’t used to git along with the git interface for those who preferred. Plus, version control for all! What a dream 😍. I’m seeing more and more ease in developer experience with Scully’s easy set up (thanks to their devs&apos; smart brains &amp;#x26; Angular schematics), Netlify’s Build Plugins and &lt;a href=&quot;https://www.netlify.com/products/dev/&quot;&gt;Netlify Dev&lt;/a&gt; previews for customization and local testing, and more APIs being created with actual documentation so devs can use them. All to say, the more we make the developer experience better, the more we happily use it in our day-to-day development.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[What to Expect from the JAMstack in 2020 - Bryan Robinson]]></title><description><![CDATA[An interview with Bryan Robinson, host of the That's My JAMstack podcast, on what he saw in 2019 and what he thinks we can expect in 2020 from the JAMstack.]]></description><link>https://www.stackbit.com/blog/jamstack-2020-bryan-robinson/</link><guid isPermaLink="false">https://www.stackbit.com/blog/jamstack-2020-bryan-robinson/</guid><pubDate>Wed, 18 Dec 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;2019 definitely seemed to be a pivotal year for the JAMstack. New companies cropped up (yep, &lt;a href=&quot;https://www.stackbit.com/&quot;&gt;us included&lt;/a&gt;), &lt;a href=&quot;https://jamstackconf.com/sf/&quot;&gt;JAMstack&lt;em&gt;conf&lt;/em&gt;sf&lt;/a&gt; was the biggest event yet and lots of new tools seemed to gain momentum daily. In this series of posts, we&apos;re asking some well-known members of the JAMstack community what they thought about this past year and what they think you can expect for the year to come. This edition features &lt;a href=&quot;https://twitter.com/brob&quot;&gt;Bryan Robinson&lt;/a&gt;, host of the &lt;a href=&quot;https://thatsmyjamstack.com/&quot;&gt;That&apos;s My JAMstack podcast&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1576683864-bryanrobinson.jpg&quot; alt=&quot;Bryan Robinson&quot;&gt;&lt;/p&gt;
&lt;h3&gt;Tell us about yourself and what you do? Does JAMstack play a role in your day-to-day work?&lt;/h3&gt;
&lt;p&gt;I’ve been doing web design and development for almost 14 years now. Most recently, I managed a design and development team for a small agency before striking out on my own to create educational resources for developers and designers.&lt;/p&gt;
&lt;p&gt;In my life at an agency, we used some JAMstack concepts for small projects with clients that either didn’t want or didn’t need our proprietary CMS. Since starting my educational company, I use the JAMstack for all my projects. One of my favorite things about the JAMstack for creating educational content is that I feel safer making quick one-off projects, since I don’t have to worry about the server if the idea fizzles.&lt;/p&gt;
&lt;h3&gt;What is your current JAMstack stack? What tool(s) have you most excited?&lt;/h3&gt;
&lt;p&gt;My current “stack” is &lt;a href=&quot;https://www.11ty.dev/&quot;&gt;11ty&lt;/a&gt; for a static site generator and Netlify for hosting and serverless functions.&lt;/p&gt;
&lt;p&gt;I’ve been using 11ty for most of the past year and it’s easily the best fit for my personal development philosophy. The closer I am to the HTML the happier I am. I’m a bit “old school” in that I still enjoy statically-served HTML pages and 11ty gives that to me with very little fuss. Since it’s written in Node, it makes extending it with custom plugins or data simple for someone like me that works mostly framework-less.&lt;/p&gt;
&lt;p&gt;Speaking of frameworks, the fact that 11ty is agnostic to front-end frameworks means I can progressively enhance my content with JavaScript in little ways with whatever tool I need. Sometimes that’s just vanilla JS, or sometimes with a framework like Vue or Preact.&lt;/p&gt;
&lt;p&gt;Beyond my personal, bespoke opinions, I’m really excited to add a few new tools to my tool belt. I’m playing with more headless CMSs (which pair nicely with 11ty data files). I’ve also really enjoyed playing with “serverless databases.” I’ve been specifically playing with &lt;a href=&quot;https://fauna.com/&quot;&gt;FaunaDB&lt;/a&gt; and have really enjoyed the experience.&lt;/p&gt;
&lt;h3&gt;What changes did you see, for better or worse, in 2019 related to the JAMstack ecosystem?&lt;/h3&gt;
&lt;p&gt;The JAMstack really exploded in 2019. The industry’s perception of the JAMstack went from a cool concept that was fun to play with in your spare time to something that was viable for many professional situations.&lt;/p&gt;
&lt;p&gt;With the increase in those exploring the JAMstack and the different use cases that now utilize this new way of thinking, I think it’s important to remember that the JAMstack isn’t always the “right tool for the job.” If you find yourself jumping through too many hoops, it might be time to explore a monolith architecture again.&lt;/p&gt;
&lt;p&gt;I’m a fan of the &lt;a href=&quot;https://blog.logrocket.com/what-the-rule-of-least-power-means-for-modern-developers-b846010a8595/&quot;&gt;“Rule of Least Power”&lt;/a&gt;. When picking the right tool for the job, reach for the least power until you reach a situation where you need more. In our JAMstack world it might look something like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Is the site mostly content? -&gt; Static Site Generator/Markdown&lt;/li&gt;
&lt;li&gt;Do I need some dynamic content? -&gt; “Cloud Database”&lt;/li&gt;
&lt;li&gt;Do I need simple timed action? -&gt; IFTTT/Serverless Function/Build Hook&lt;/li&gt;
&lt;li&gt;Do I need complex actions run multiple times a day with many different pieces of functionality? -&gt; Might be time for your own server...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As we explore the edge cases of our stack, it’s important to remember to look for the right tool...even if it’s not a JAM solution.&lt;/p&gt;
&lt;h3&gt;What changes in 2020 do you see forthcoming that will have an impact on adoption of or day-to-day development using the JAMstack?&lt;/h3&gt;
&lt;p&gt;I think 2020 is going to be a crucial year for long-term growth of the JAMstack. We’re seeing great growth amongst companies created for use on the JAMstack, but I see 2020 as a proving ground of profitability for them. Whether venture capital funded or bootstrapped, it’s important for there to be a thriving ecosystem of solutions out there so that agencies, enterprise and application developers feel comfortable making the conversion.&lt;/p&gt;
&lt;p&gt;My hope is that the amazing companies that are going strong right now continuing going strong and are profitable. The JAMstack depends on a healthy ecosystem of services and APIs to make it completely viable, so hopefully we’ll see this trend continue in 2020 and these companies will become (or continue to be profitable). If they are, I think 2020 will be another massive year of adoption in the industry for the JAMstack.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[What to Expect from the JAMstack in 2020 - Gift Egwuenu]]></title><description><![CDATA[Gift Egwenu discusses the growth of the JAMstack community in 2020 and the continued impact of the growing adoption of serverless architectures on JAMstack application development.]]></description><link>https://www.stackbit.com/blog/jamstack-2020-gift-egwenu/</link><guid isPermaLink="false">https://www.stackbit.com/blog/jamstack-2020-gift-egwenu/</guid><pubDate>Tue, 17 Dec 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;2019 definitely seemed to be a pivotal year for the JAMstack. New companies cropped up (yep, &lt;a href=&quot;https://www.stackbit.com/&quot;&gt;us included&lt;/a&gt;), &lt;a href=&quot;https://jamstackconf.com/sf/&quot;&gt;JAMstack&lt;em&gt;conf&lt;/em&gt;sf&lt;/a&gt; was the biggest event yet and lots of new tools seemed to gain momentum daily. In this series of posts, we&apos;re asking some well-known members of the JAMstack community what they thought about this past year and what they think you can expect for the year to come. This edition features &lt;a href=&quot;https://twitter.com/lauragift21&quot;&gt;Gift Egwuenu&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1576589634-giftegwenu.jpg&quot; alt=&quot;Gift Egwenu&quot;&gt;&lt;/p&gt;
&lt;h3&gt;Tell us about yourself and what you do? Does JAMstack play a role in your day-to-day work?&lt;/h3&gt;
&lt;p&gt;I work as a Software Engineer at Andela. I also do a lot of content creation from writing on my &lt;a href=&quot;https://www.giftegwuenu.com/&quot;&gt;personal blog&lt;/a&gt; to creating helpful video content on YouTube. Unfortunately, I don&apos;t work with JAMstack in my full-time job but I work with it a lot on my personal projects and over time I&apos;m constantly amazed by how much I can achieve with this stack!&lt;/p&gt;
&lt;h3&gt;What is your current JAMstack stack? What tool(s) have you most excited?&lt;/h3&gt;
&lt;p&gt;I&apos;ve dabbled with a couple of JAMstack tools in the past. My first ever introduction to the JAMstack was when I created the first iteration of my blog with &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;. At the time I wasn&apos;t aware that JAMstack existed. I currently work with &lt;a href=&quot;https://gohugo.io/&quot;&gt;Hugo&lt;/a&gt;, &lt;a href=&quot;https://www.gatsbyjs.org/&quot;&gt;Gatsby&lt;/a&gt; and &lt;a href=&quot;https://gridsome.org/&quot;&gt;Gridsome&lt;/a&gt; and I leverage all the amazing services available for me to use. Two services I&apos;m loving at the moment are &lt;a href=&quot;https://cloudinary.com/&quot;&gt;Cloudinary&lt;/a&gt; for media and assets management and &lt;a href=&quot;https://www.netlifycms.org/&quot;&gt;Netlify CMS&lt;/a&gt; which is a git-based CMS.&lt;/p&gt;
&lt;h3&gt;What changes did you see, for better or worse, in 2019 related to the JAMstack ecosystem?&lt;/h3&gt;
&lt;p&gt;I saw a significant rise in the adoption of the JAMstack which is really interesting to watch coming from a place where I wasn&apos;t even familiar a couple of years ago. More companies are now adopting the architecture and, not only that, I&apos;ve also seen a bunch of developers working with the JAMstack - the community is growing rapidly. I think this makes it exciting and I&apos;m looking forward to seeing how it grows significantly over the next couple of years.&lt;/p&gt;
&lt;h3&gt;What changes in 2020 do you see forthcoming that will have an impact on adoption of or day-to-day development using the JAMstack?&lt;/h3&gt;
&lt;p&gt;I&apos;ve noticed a lot of serverless architecture adoption going on this year. I think that isn&apos;t going to stop anytime soon. I&apos;m also looking forward to learning about all the amazing services we can leverage to boost the functionalities of projects built using the JAMstack. I don&apos;t want to jinx it but I&apos;m also looking forward to more job openings on the JAMstack.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[What to Expect from the JAMstack in 2020 - Raymond Camden]]></title><description><![CDATA[What did the past year in JAMstack look like and what can we expect to see in 2020? In the first part of a series of interviews, Raymond Camden shares his thoughts.]]></description><link>https://www.stackbit.com/blog/jamstack-2020-raymond-camden/</link><guid isPermaLink="false">https://www.stackbit.com/blog/jamstack-2020-raymond-camden/</guid><pubDate>Mon, 16 Dec 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;2019 definitely seemed to be a pivotal year for the JAMstack. New companies cropped up (yep, &lt;a href=&quot;https://www.stackbit.com/&quot;&gt;us included&lt;/a&gt;), &lt;a href=&quot;https://jamstackconf.com/sf/&quot;&gt;JAMstack&lt;em&gt;conf&lt;/em&gt;sf&lt;/a&gt; was the biggest event yet and lots of new tools seemed to gain momentum daily. In this series of posts, we&apos;re asking some well-known members of the JAMstack community what they thought about this past year and what they think you can expect for the year to come. This edition features &lt;a href=&quot;https://twitter.com/raymondcamden&quot;&gt;Raymond Camden&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1576502209-raymondcamden.jpg&quot; alt=&quot;Raymond Camden&quot;&gt;&lt;/p&gt;
&lt;h3&gt;Tell us about yourself and what you do? Does JAMstack play a role in your day-to-day work?&lt;/h3&gt;
&lt;p&gt;I&apos;m a developer evangelist for a company called &lt;a href=&quot;https://www.here.com/&quot;&gt;HERE&lt;/a&gt;. They do mapping, routing, and other location services for developers. We employ the JAMstack a bit (GitHub pages), but the JAMstack doesn&apos;t really play a part of my day to day, outside of using it for demos from time to time. I mainly work on JAMStack projects in my spare time.&lt;/p&gt;
&lt;p&gt;In my career, I&apos;ve seen it all. I started building HTML pages back in 95 or so, moved to the server-side with Perl and ColdFusion, and then switched to more client-side development roughly 7-8 years ago. Started using the JAMstack when it first began as just plain &quot;static sites&quot;. Along with Brian Rinaldi, I&apos;m an author of a book on the topic for O&apos;Reilly. I blog about and present on the topic as well.&lt;/p&gt;
&lt;h3&gt;What is your current JAMstack stack? What tool(s) have you most excited?&lt;/h3&gt;
&lt;p&gt;For my blog, I use &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;. But I recently discovered &lt;a href=&quot;https://www.11ty.dev/&quot;&gt;Eleventy&lt;/a&gt; and I&apos;m incredibly excited about it. I like Jekyll, but never liked working with Ruby, the fact that Eleventy is Node-based is a huge win for me. Also, Eleventy is &lt;em&gt;incredibly&lt;/em&gt; flexible. Finally, Eleventy solves the &quot;dynamic pages from data&quot; issue in a way that no other SSG has handled as well. As I use more SSGs, I find that I prefer flexible engines over highly opinionated ones.&lt;/p&gt;
&lt;h3&gt;What changes did you see, for better or worse, in 2019 related to the JAMstack ecosystem?&lt;/h3&gt;
&lt;p&gt;2019 felt like the year &quot;JAMstack&quot;, as a term, really came to the forefront. As I said earlier, I&apos;ve been working with static site generators for a few years, but JAMStack is a much better term - much better marketing if you will - for what these solutions provide. I was also excited to see multiple static site hosting services add serverless natively to their platforms. While you could always use serverless before that, having it &quot;baked in&quot; makes the developer experience much better.&lt;/p&gt;
&lt;h3&gt;What changes in 2020 do you see forthcoming that will have an impact on adoption of or day-to-day development using the JAMstack?&lt;/h3&gt;
&lt;p&gt;I think we will continue to see additional services added to hosting providers. For example, Netlify adding analytics felt like a natural fit. I also think we will see better competition from the bigger players. So for example, you can do a static site on Amazon now via S3, but it&apos;s pretty bare bone in terms of what you can do outside of basic file serving. I&apos;ve also not been impressed with the offering from Azure. That isn&apos;t to say it&apos;s bad, just that smaller players like Netlify and Zeit are much better in comparison. I think that will change and also help bring JAMStack to more developers.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Creating a JAMstack Site with Open Authoring Using Netlify CMS]]></title><description><![CDATA[Leverage the power of the community by creating a JAMstack site that anyone can edit and contribute using NetlifyCMS's open authoring.]]></description><link>https://www.stackbit.com/blog/open-authoring-netlifycms/</link><guid isPermaLink="false">https://www.stackbit.com/blog/open-authoring-netlifycms/</guid><pubDate>Mon, 09 Dec 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Community is powerful. The internet has often succeeded by channeling that power into &quot;crowdsourcing&quot; for things like raising funds or even managing content. The most obvious example of crowdsourced content would be Wikipedia, but sites like Medium or &lt;a href=&quot;https://dev.to/&quot;&gt;DEV&lt;/a&gt; also harness community-driven content contributions. Many projects and companies also rely on their communities to improve their documentation.&lt;/p&gt;
&lt;p&gt;When it comes to JAMstack sites, this community-driven content is often powered by straight GitHub forks and pull requests. This works well but requires a certain degree of technical knowledge as well as a bit of manual work (pulling the code, making the change, committing it, submitting the pull request and so on). This can be a real hindrance - especially if your goal is to get contributions from folks without a high degree of technical expertise.&lt;/p&gt;
&lt;p&gt;However, a new feature of &lt;a href=&quot;https://www.netlifycms.org&quot;&gt;Netlify CMS&lt;/a&gt; called &lt;a href=&quot;https://www.netlifycms.org/docs/open-authoring&quot;&gt;open authoring&lt;/a&gt; makes this process as easy as editing content directly in the CMS - the forking and pull requests are all handled behind the scenes. In this post, I&apos;m going to walk through the steps to set up open authoring using Netlify CMS on a site built originally with &lt;a href=&quot;https://www.stackbit.com/&quot;&gt;Stackbit&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;What is Netlify CMS and Open Authoring?&lt;/h2&gt;
&lt;p&gt;Netlify CMS is an open source project maintained by Netlify. It is what&apos;s often called a git-based CMS. As a git-based CMS, Netlify CMS provides the UI and tools to maintain the content, but the content itself is stored as files within a git repository and versioning is handled by the repository. Under a typical deployment, user access might be managed by Netlify Identity (or a third-party integration) and you&apos;d invite contributors who are granted access to your CMS admin to edit content. You might have a workflow in place, but editing content is still limited to a small group with specially granted access.&lt;/p&gt;
&lt;p&gt;With a site designed to have &quot;crowdsourced&quot; content, you&apos;d need access to be public so that anyone could submit content, but you&apos;d also need to ensure that changes are reviewed and approved before going live. To address this, Netlify CMS released open authoring, which is currently a &lt;a href=&quot;https://www.netlifycms.org/docs/beta-features/#open-authoring&quot;&gt;beta feature only&lt;/a&gt;. I first learned of the feature when &lt;a href=&quot;https://css-tricks.com/netlify-cms-open-authoring/&quot;&gt;CSS Tricks adopted it&lt;/a&gt; for editing some of their community-driven pages.&lt;/p&gt;
&lt;p&gt;Here&apos;s a quick overview of how it works. Open authoring uses GitHub authentication, meaning essentially that anyone with a GitHub account can add or modify content on your site. Content edits are work by creating a fork of your project and, when they submit their change for review, submitting as a pull request. However, while the whole fork and pull request process underpins the feature, it is (mostly) transparent to the user who simply makes changes to the content in the CMS. This means that, other than requiring a GitHub account, contributing content should be easily accessible to anyone, regardless of their level of technical knowledge.&lt;/p&gt;
&lt;h2&gt;The Example Site&lt;/h2&gt;
&lt;p&gt;The example we&apos;ll review for this tutorial is a site I just launched called &lt;a href=&quot;https://ragequit.tips/&quot;&gt;RageQuit.tips&lt;/a&gt; that is designed to be community resource on the topic of &lt;a href=&quot;https://www.psychologytoday.com/us/basics/burnout&quot;&gt;burnout&lt;/a&gt;. Burnout is &lt;a href=&quot;https://www.merriam-webster.com/dictionary/burnout&quot;&gt;defined&lt;/a&gt; as &quot;exhaustion of physical or emotional strength or motivation usually as a result of prolonged stress or frustration.&quot; It is generally associated with job stress and is something that many of us have faced, regardless what industry we work in. The idea for the site is to allow the community to share experiences and resources related to dealing with burnout.&lt;/p&gt;
&lt;p&gt;If you are interested in the topic of burnout, please check it out. And if you have experiences or resources you&apos;d like to share, I invite you to &lt;a href=&quot;https://ragequit.tips/contribute/&quot;&gt;contribute&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The site was built using the following technologies:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.stackbit.com/&quot;&gt;Stackbit&lt;/a&gt; - Stackbit allowed the site and CMS to be easily generated using a theme, which was later customized to meet the site&apos;s specific needs.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; - The underlying static site generator is Jekyll . This was chosen to make source contributions easier as it is one of the oldest and most widely known static site generators.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.netlifycms.org/&quot;&gt;Netlify CMS&lt;/a&gt; - As mentioned earlier, this is an open source, git-based CMS.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.netlify.com/&quot;&gt;Netlify&lt;/a&gt; - Netlify is used to deploy and host the site, but also maintains the hooks needed to authenticate into the CMS via GitHub.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt; - GitHub manages the repository but also handles the authentication.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using this site&apos;s code as an example, let&apos;s explore the steps to enable open authoring on a Netlify CMS site.&lt;/p&gt;
&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;Stackbit provides a great tool that makes it easy to get started with a CMS-driven JAMstack site, including Netlify CMS. The best part, for the design-impaired like me, is that it comes with selection of attractive templates. I won&apos;t run through the process too deeply here, but basically you choose a theme, then a static site generator and finally a CMS. You can &lt;a href=&quot;https://app.stackbit.com/create&quot;&gt;try it out for yourself here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I picked Jekyll as the static site generator and, obviously, Netlify CMS. I chose &lt;a href=&quot;https://github.com/stackbithq/stackbit-theme-libris&quot;&gt;Libris&lt;/a&gt; as the theme. Libris is designed as a documentation site template that also has a blog. This worked well for the resources section and blog I was planning.&lt;/p&gt;
&lt;p&gt;Out of the box, Stackbit deploys a fairly standard Netlify CMS configuration. So, once the deployment has finished, you will get the invitation email to collaborate on the content via Netlify CMS.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1575903100-cmsinvitesm.png&quot; alt=&quot;Netlify CMS invite&quot;&gt;&lt;/p&gt;
&lt;h3&gt;Resolving a Limitation&lt;/h3&gt;
&lt;p&gt;Before we proceed, I want to point out an issue that may trip you up as it did me initially. If you were to go ahead accept this invite and log in (though we will be changing the authentication later to support open authoring), you may notice a limitation of this template when using Netlify CMS. The &quot;Documentation Pages&quot; section displays no pages even though the repository has a number of pages. This is because, at the moment, collections in Netlify CMS do not support content in subfolders, although this is a feature that &lt;a href=&quot;https://github.com/netlify/netlify-cms/issues/513&quot;&gt;should be added soon&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are two potential solutions to this in the meantime. The first is to move documentation pages to the root of the the &lt;code&gt;docs&lt;/code&gt; folder. Then make a small change to the Netlify CMS configuration to look for documentation pages in the &lt;code&gt;docs&lt;/code&gt; folder rather than via the root of the site (it&apos;s preconfigured to look for any page across the site having &lt;code&gt;layout: docs&lt;/code&gt; in the front matter).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;  - name: docs
    label: Documentation Pages
    folder: docs
    ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The biggest drawback to this is that you&apos;ll also need to make changes to the documentation layout files to support this change. In particular, you&apos;ll need to modify how the templates generate the navigation of documentation sections.&lt;/p&gt;
&lt;p&gt;The second solution, which is what I chose to do, is to make the change above and then duplicate the model for each subfolder in the Netlify configuration. You&apos;ll need to change the &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;folder&lt;/code&gt;, and &lt;code&gt;label&lt;/code&gt; values for each. So, for example, you might have the following as an additional content model:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;  - name: docs_faq
    label: Docs FAQ Section
    folder: docs/faq
    ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While harder to maintain, the benefit of the second solution is that you can retain content in subfolders and avoid making difficult layout changes. In theory, once Netlify CMS supports this feature, you can just remove all the additional models.&lt;/p&gt;
&lt;h2&gt;Configuring Netlify CMS for Open Authoring&lt;/h2&gt;
&lt;p&gt;Firstly, open authoring is a beta feature. So we need to change the project to use the beta release of the project. Open up &lt;code&gt;admin/index.html&lt;/code&gt; and replace the source for &lt;code&gt;netlify-cms.js&lt;/code&gt; with the beta release.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;#x3C;script src=&quot;https://unpkg.com/netlify-cms@beta/dist/netlify-cms.js&quot;&gt;&amp;#x3C;/script&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, open authoring requires that we use &lt;a href=&quot;https://www.netlifycms.org/docs/authentication-backends/#github-backend&quot;&gt;GitHub authentication for the backend&lt;/a&gt;. So let&apos;s modify the Netlify CMS configuration for this and then enable open authoring. Open &lt;code&gt;admin/config.yaml&lt;/code&gt; and change the &lt;code&gt;backend&lt;/code&gt; to use &lt;code&gt;github&lt;/code&gt; rather than the &lt;code&gt;git-gateway&lt;/code&gt; and define the associated &lt;code&gt;repo&lt;/code&gt; (note that the &lt;code&gt;repo&lt;/code&gt; value does not need the &lt;code&gt;github.com&lt;/code&gt; portion). Also add a value for &lt;code&gt;open_authoring&lt;/code&gt; and set it to &lt;code&gt;true&lt;/code&gt;. When you are finished, your &lt;code&gt;backend&lt;/code&gt; should look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;backend:
    name: github
    branch: master
    repo: remotesynth/ragequit-tips
    open_authoring: true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next change you&apos;ll need to make in the config is to change to an editorial workflow. This means that content must go through a review and approval process before being published. Because of the way open authoring works, this is required. In the root of the &lt;code&gt;config.yaml&lt;/code&gt; file add &lt;code&gt;publish_mode&lt;/code&gt; and set it to &lt;code&gt;editorial_workflow&lt;/code&gt;. For instance, mine is right above &lt;code&gt;collections&lt;/code&gt; and below the &lt;code&gt;public_folder&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;---
media_folder: images
public_folder: /images
publish_mode: editorial_workflow
collections:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You&apos;ll also need to enable GitHub authentication via the &lt;a href=&quot;https://docs.netlify.com/visitor-access/oauth-provider-tokens/#setup-and-settings&quot;&gt;visitor access settings&lt;/a&gt; in your Netlify admin console. To do this, first you&apos;ll need to set up an OAuth app in GitHub. In GitHub, go to Settings &gt; Developer Settings &gt; &lt;a href=&quot;https://github.com/settings/developers&quot;&gt;OAuth Apps&lt;/a&gt;. You&apos;ll need to provide a name and a URL (you can use your netlify.com domain if you like for now) and an authorization callback URL that should be set to &lt;code&gt;https://api.netlify.com/auth/done&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1575903121-oauthappgithubsm.png&quot; alt=&quot;Adding an OAuth app in GitHub&quot;&gt;&lt;/p&gt;
&lt;p&gt;This should give you a client ID and secret, which you&apos;ll need to copy into Netlify.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1575903114-githubclientidsm.png&quot; alt=&quot;GitHub client ID and secret&quot;&gt;&lt;/p&gt;
&lt;p&gt;Next, in Netlify, go to Settings &gt; Access Control &gt; OAuth and then click the install provider button. It should default to GitHub and here you can paste in the client ID and secret provided by GitHub.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1575903111-githubauthenticationsm.png&quot; alt=&quot;Adding GitHub authentication&quot;&gt;&lt;/p&gt;
&lt;p&gt;If you commit these changes or test locally and go to your site&apos;s &lt;code&gt;admin&lt;/code&gt;, you&apos;ll get the log in with GitHub option instead of log in with Netlify. After clicking that, you&apos;ll have to grant the site access via the GitHub OAuth process, but then you should have complete access to your admin as you did before. Note, though, that due to the editorial workflow, you&apos;ll need to save and then set the status to &quot;Ready&quot; before hitting &quot;Publish&quot; and pushing your change live.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1575903118-netlifycmsstatussm.png&quot; alt=&quot;Changing the status of a document&quot;&gt;&lt;/p&gt;
&lt;p&gt;That&apos;s it! Open authoring is now enabled and anyone can access your &lt;code&gt;/admin&lt;/code&gt; and add or edit content. Their experience will be slightly different than yours though, so let&apos;s take a look at that.&lt;/p&gt;
&lt;h2&gt;The End User Experience&lt;/h2&gt;
&lt;p&gt;Assuming someone now accesses your &lt;code&gt;/admin&lt;/code&gt;, what&apos;s the experience going to be like?&lt;/p&gt;
&lt;p&gt;When they get to the admin, they&apos;ll be prompted to log in with GitHub, same as you were. They can use an existing account or create one, and they will have to accept the permissions on their account.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1575903108-githubauthenticatesm.png&quot; alt=&quot;authorize permisions with GitHub&quot;&gt;&lt;/p&gt;
&lt;p&gt;Once they do, if this is the first time they are making edits, they will be asked to fork the repository. They will need to agree to fork it to proceed into the admin. (Note that I do think this language could be improved for non-technical users who may not be familiar with terms like &quot;fork&quot; but who sign up for GitHub to contribute nonetheless. I also think it could be useful to clarify that the the &quot;Don&apos;t fork the repo&quot; option is effectively a choice not to proceed.)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1575903106-forksm.png&quot; alt=&quot;fork the repository&quot;&gt;&lt;/p&gt;
&lt;p&gt;Once they accept and enter the admin, they&apos;ll need to follow the workflow to add or edit pages. For instance, to edit a page, they would make their edits and click the &quot;save&quot; button in the upper-left hand corner of the page.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1575903127-savecmssm.png&quot; alt=&quot;save your changes&quot;&gt;&lt;/p&gt;
&lt;p&gt;Once they&apos;ve completed all of their changes, they will need change the status of the content to &quot;In Review&quot; via the drop-down in the upper-right hand corner of the page.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1575903116-inreviewsm.png&quot; alt=&quot;in review status&quot;&gt;&lt;/p&gt;
&lt;p&gt;This will submit the changes to be reviewed and accepted into the site as a pull request in GitHub, although that will be transparent to them. Adding new content follows a similar flow.&lt;/p&gt;
&lt;h3&gt;Making It Easy to Edit Pages&lt;/h3&gt;
&lt;p&gt;It&apos;s unlikely you&apos;ll want to just dump folks into the &lt;code&gt;/admin&lt;/code&gt; and let them figure things out. The best bet is to drop links on content that leads them directly to the pages they may want to edit or create in the CMS.&lt;/p&gt;
&lt;p&gt;The good news is that this is just requires linking to the right spot in the &lt;code&gt;/admin&lt;/code&gt;. It&apos;s just a matter of ensuring that the link goes to the proper collection or page within the CMS. For example, let&apos;s say you want a link to add a new post to the blog, you could use:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;#x3C;a href=&quot;/admin/#/collections/post/new&quot; class=&quot;button&quot;&gt;Add a Post to Our Blog&amp;#x3C;/a&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works because there is a collection with &lt;code&gt;name: post&lt;/code&gt; in the &lt;code&gt;config.yml&lt;/code&gt; for Netlify CMS. If you wanted to edit the specific blog post, you&apos;d put the file name (through without the extension) instead of &lt;code&gt;new&lt;/code&gt; in that URL path. Most static site generators offer page variables that could do this. In Jekyll, you could do:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;#x3C;a href=&quot;/admin/#/collections/post/{{page.name | replace: &quot;.md&quot;, &quot;&quot;}}&quot; class=&quot;button&quot;&gt;Edit this post&amp;#x3C;/a&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&apos;s look at one more example of something slightly more complicated. As you may recall from &lt;em&gt;much&lt;/em&gt; earlier in this post, in my case, I created a number of content mappings comprising the &lt;a href=&quot;https://ragequit.tips/resources/&quot;&gt;resources section&lt;/a&gt; of RageQuit.tips. In this section, I wanted you to be able to edit any existing page or add a page to the current section. The way I did this without needing to create a different layout template for each subsection was to standardize how the sections were named in the config based upon their subfolder. So, for example, &lt;code&gt;/resources/faq&lt;/code&gt; would be defined as a content model of &lt;code&gt;resources_faq&lt;/code&gt; in the CMS. I could then replace text within the path and link to the correct section in the CMS.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;{% assign collection_path = page.path | replace: &apos;.md&apos;, &apos;&apos; %} {% assign collection_array = collection_path | split: &quot;/&quot; %}
&amp;#x3C;!-- the root content model name is just resources so checking if we aren&apos;t in the root --&gt;
{% if collection_array.size &gt;= 3 %} {% assign collection_path = collection_path | replace: &quot;resources/&quot;, &quot;resources_&quot; %} {% endif %}
&amp;#x3C;!-- this is used to swap out the page name with new for the new post link --&gt;
{% assign page_cms = page.name | replace: &quot;.md&quot;, &quot;&quot; %}
&amp;#x3C;p&gt;
    &amp;#x3C;a href=&quot;/admin/#/edit/{{collection_path}}&quot; class=&quot;button&quot;&gt;Edit this page&amp;#x3C;/a&gt;{% if collection_path != &quot;resources/index&quot; %}&amp;#x26;nbsp;&amp;#x26;nbsp;&amp;#x3C;a
        href=&quot;/admin/#/collections/{{collection_path | replace: page_cms, &apos;new&apos;}}&quot;
        class=&quot;button&quot;
        &gt;Add a New Page to This Section&amp;#x3C;/a
    &gt;{% endif %}
&amp;#x3C;/p&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see more details about the current end-user editing experience in the &lt;a href=&quot;https://ragequit.tips/contribute/&quot;&gt;RageQuit.tips contribution guide&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;A Powerful Tool for Enabling Community Contribution&lt;/h2&gt;
&lt;p&gt;Open authoring in Netlify CMS is a really great addition. I think it has some rough edges that might hinder non-technical users from contributing - things like the GitHub account requirement and the prompt to &quot;fork&quot;, for instance. It is a beta feature after all. However, despite what the length of this post might imply (verbosity is my core competency), it&apos;s actually surprisingly easy to implement and use.&lt;/p&gt;
&lt;p&gt;If you want to see the full source code of the demo I referenced, which includes all the necessary updates to the Netlify CMS content model and a number of other tweaks to the Stackbit generated template, you can &lt;a href=&quot;https://github.com/remotesynth/ragequit-tips&quot;&gt;view it on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With all that being said, I&apos;d also like to invite you to contribute to &lt;a href=&quot;https://ragequit.tips/&quot;&gt;RageQuit.tips&lt;/a&gt;. This isn&apos;t just a demo site, it&apos;s meant to be a true community resource for anyone coping with burnout. If you&apos;ve experienced burnout, &lt;a href=&quot;https://ragequit.tips/resources/&quot;&gt;share resources that helped you&lt;/a&gt; or &lt;a href=&quot;https://ragequit.tips/blog/index.html&quot;&gt;add your story to the blog&lt;/a&gt;. We can use our experiences to help others who may be coping with similar struggles.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Compiling Content Stats for a JAMstack Site Using Eleventy]]></title><description><![CDATA[Raymond Camden walks through gathering metrics about your content and displaying them on a JAMstack site built using Eleventy.]]></description><link>https://www.stackbit.com/blog/content-stats-eleventy/</link><guid isPermaLink="false">https://www.stackbit.com/blog/content-stats-eleventy/</guid><pubDate>Wed, 04 Dec 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I switched my primary blog from a dynamic app-server based one to a static site around three or four years ago. While I was happy to let go of the stress and worry of maintaining an app server, a database server, &lt;em&gt;and&lt;/em&gt; a web server, one of the things I missed was a stats based view of my content. I&apos;ve been a Google Analytics user for years (although I&apos;ve recently dropped it for &lt;a href=&quot;https://www.netlify.com/products/analytics/&quot;&gt;Netlify Analytics&lt;/a&gt;) but that focuses on how people use my site. The stats I want involve more the nature of my content. So for example, how often am I publishing? What categories do I cover and how have they changed over time.&lt;/p&gt;
&lt;p&gt;In a &quot;regular&quot; app server context (and maybe this is no longer the norm), I&apos;d write a page with a few SQL queries and be done with it. In a JAMstack site, though, I can&apos;t really do that. In this article, I want to show how you can create a page that gives you this kind of data about your content on a JAMstack site built using &lt;a href=&quot;https://www.11ty.io/&quot;&gt;Eleventy&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Some background&lt;/h2&gt;
&lt;p&gt;The first static site generator I used for my blog was Hugo, and back in late 2016 I wrote up my experience building a &quot;stats viewer&quot; with it: &lt;a href=&quot;https://www.raymondcamden.com/2016/12/01/a-simple-stats-script-for-hugo&quot;&gt;&quot;A Simple Stats Script for Hugo&quot;&lt;/a&gt;. I wasn&apos;t able to accomplish what I wanted using Hugo itself, so my solution was a custom Node script that would output a JSON packet of stats. I had to generate it manually and then copy it to my site. Finally, I used some client-side JavaScript to display the results. As the stats were just for me, I&apos;d run the script every now and then when I wanted to ensure I was seeing the latest information.&lt;/p&gt;
&lt;p&gt;I&apos;ve since moved to Jekyll and worked on an updated version: &lt;a href=&quot;https://www.raymondcamden.com/2018/07/21/building-a-stats-page-for-jekyll-blogs&quot;&gt;&quot;Building a Stats Page for Jekyll Blogs&quot;&lt;/a&gt;. My solution was able to use Jekyll itself to generate the stats, which means it&apos;s always up to date when I add new content. If you read the linked article you&apos;ll see I did run into a bit of trouble. While the template language is powerful in Jekyll, I still had to make some compromises with my data. For example, you&apos;ll see that I output a large array of dates for every post I&apos;ve published and handle the cleanup on the client.&lt;/p&gt;
&lt;p&gt;Recently I&apos;ve discovered &lt;a href=&quot;https://www.11ty.io/&quot;&gt;11ty&lt;/a&gt; and to say I&apos;ve fallen for it would be an understatement. It&apos;s &lt;em&gt;incredibly&lt;/em&gt; flexible, fast and is Node-based. I really like Jekyll, but the fact that it is Ruby-based has been problematic for me in the past when setting up on Windows. I&apos;ve had no such issues with 11ty. While I&apos;m not planning on migrating my personal site to 11ty just yet, it is absolutely going to happen eventually.&lt;/p&gt;
&lt;p&gt;I decided to take a look at building a stats view for 11ty. What I&apos;m going to share is rather rough (I didn&apos;t even bother to build a front end 😉), but I think it may be helpful. Also note that what I built is focused on a blog - specifically my blog - so depending on your content you will need to modify things a bit to suit your needs.&lt;/p&gt;
&lt;h2&gt;Preparing my content&lt;/h2&gt;
&lt;p&gt;Before we begin, let&apos;s look at the site I started with. I copied my blog content (over six thousand posts) into a folder named &lt;code&gt;_posts&lt;/code&gt;. This folder contains a directory for each year, a directory for each month, and a directory for each day. Individual posts exist in those day-named subdirectories.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1575464538-filessm.png&quot; alt=&quot;List of files and files&quot;&gt;&lt;/p&gt;
&lt;p&gt;Now that I had 6000+ posts, I needed a way for 11ty to recognize them as &quot;special&quot; as opposed to other random pages on my site. For example, while the test site didn&apos;t include anything else, my regular site would have an &quot;About&quot; page, a &quot;Contact&quot; page, and so forth. I do not want these pages included in the statistics.&lt;/p&gt;
&lt;p&gt;Out of the box, 11ty has a &lt;a href=&quot;https://www.11ty.io/docs/collections/&quot;&gt;&quot;Collections&quot;&lt;/a&gt; feature that organizes content. One way it does this is via tags. So if five pages had the tag &quot;Cat&quot;, they would be in the &quot;Cat&quot; collection. But, for a blog (or at least my blog), there wasn&apos;t one tag that was used in every single post. Instead, every post has a tag specific to the content inside.&lt;/p&gt;
&lt;p&gt;Luckily, 11ty makes it easy to create collections dynamically, especially from a file path. I created an &lt;code&gt;.eleventy.js&lt;/code&gt; file and defined my new collection like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;module.exports = function (eleventyConfig) {
    eleventyConfig.addCollection(&apos;posts&apos;, (collection) =&gt; {
        return collection.getFilteredByGlob(&apos;_posts/**/*.md&apos;);
    });
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This creates a new collection called &lt;code&gt;posts&lt;/code&gt; that I can use as a base for my stats. So far, so good.&lt;/p&gt;
&lt;h2&gt;Generating data&lt;/h2&gt;
&lt;p&gt;I then decided to use another 11ty feature, &lt;a href=&quot;https://www.11ty.io/docs/data/&quot;&gt;&quot;Data&quot;&lt;/a&gt;, to generate my stats data so that I could make use of it in a regular page. However, I then discovered something interesting. While you can use JavaScript to create &lt;a href=&quot;https://www.11ty.io/docs/data-js/&quot;&gt;custom data sources&lt;/a&gt;, those scripts do not have access to collections or other parts of 11ty itself. The &lt;em&gt;result&lt;/em&gt; of their code becomes part of the data you can use in pages, but the code itself, when run, does not have access to it. In theory I could mimic what &lt;code&gt;getFilteredByGlob&lt;/code&gt; does and get the same set of files. But I wouldn&apos;t have access to &lt;em&gt;parsed&lt;/em&gt; files. When 11ty adds a file to a collection, it parses the front matter. My data file could do this too, but this felt like a lot of duplication of effort and just... I don&apos;t know, felt wrong.&lt;/p&gt;
&lt;p&gt;At this point I figured I&apos;d need to try to generate the data in a template, like I did for my Jekyll solution. As I said, it &quot;worked&quot; but it was a bit difficult to get my data precisely how I wanted. Jekyll&apos;s template language, Liquid, is nice and flexible, but I didn&apos;t want to just copy and paste my code. I then remembered that 11ty supports &lt;a href=&quot;https://ejs.co/&quot;&gt;EJS&lt;/a&gt;. EJS is an older template language, and frankly, I don&apos;t like it. I used it a lot when I was first learning to work with static sites as it was one of two options for Harp (a static site generator that&apos;s no longer in development). As the other option was Jade, a language I truly despise, I &quot;settled&quot; for EJS. Writing in EJS feels like using old school ASP. It&apos;s ugly, but extremely flexible.&lt;/p&gt;
&lt;p&gt;The more I thought about it, the more I thought EJS may actually be best suited for this. I needed to parse my data and get lots of different stuff out of it, and EJS&apos;s flexibility may work out great. My solution worked well. The code &lt;em&gt;is&lt;/em&gt; ugly, but it works, and I&apos;ll take it. Before I share it, here&apos;s the stats that I generated. To be clear, this is somewhat arbitrary for what I thought was important, I assume your needs may differ.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The total number of posts.&lt;/li&gt;
&lt;li&gt;The first and last post. Obviously the first post never changes, but I like seeing this.&lt;/li&gt;
&lt;li&gt;The total number of words. (This one&apos;s truly silly, but kinda fun.)&lt;/li&gt;
&lt;li&gt;How many posts are in a category and tag. For my blog I use both as a way to organize my content.&lt;/li&gt;
&lt;li&gt;Total number of posts per year, month, and day.&lt;/li&gt;
&lt;li&gt;The average word count per blog. In the beginning, I used my blog for things like &quot;Here&apos;s a cool link&quot; or &quot;Here&apos;s a cool event&quot;. Most of those shorter posts are now things I tweet instead.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&apos;s the script, and again, forgive the ugliness.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;---
permalink: /stats.json
---
&amp;#x3C;%
function wordCount(s) {
    return s.split(/\s+/).length;
}

totalPosts = collections.posts.length;
totalWords = 0;

let tags = {};
let categories = {};
let years = {};
let months = [];
let days = [];

collections.posts.forEach((p,i) =&gt; {
    if(i === 0) firstPost = p;
    if(i === collections.posts.length-1) lastPost = p;
    p.data.tags.forEach(t =&gt; {
        if(!tags[t]) tags[t] = 0;
        tags[t]++;
    });

    p.data.categories.forEach(c =&gt; {
        if(!categories[c]) categories[c] = 0;
        categories[c]++;
    });

    //Add to the yearly stat
    let year = new Date(p.date).getFullYear();
    if(!years[year]) years[year] = 0;
    years[year]++;

    let month = new Date(p.date).getMonth();
    if(!months[month]) months[month] = 0;
    months[month]++;

    let dow = new Date(p.date).getDay();
    if(!days[dow]) days[dow] = 0;
    days[dow]++;

    totalWords += wordCount(p.templateContent);
});

let avgWords = totalWords / totalPosts;

%&gt;

{
    &quot;totalPosts&quot;: &amp;#x3C;%= totalPosts %&gt;,
    &quot;totalWords&quot;: &amp;#x3C;%= totalWords %&gt;,
    &quot;avgWords&quot;: &amp;#x3C;%= avgWords %&gt;,
    &quot;firstPost&quot;: {
        &quot;title&quot;: &quot;&amp;#x3C;%= firstPost.data.title %&gt;&quot;,
        &quot;date&quot;: &quot;&amp;#x3C;%= firstPost.date %&gt;&quot;
    },
    &quot;lastPost&quot;: {
        &quot;title&quot;: &quot;&amp;#x3C;%= lastPost.data.title %&gt;&quot;,
        &quot;date&quot;: &quot;&amp;#x3C;%= lastPost.date %&gt;&quot;
    },
    &quot;tags&quot;: &amp;#x3C;%- JSON.stringify(tags) %&gt;,
    &quot;categories&quot;: &amp;#x3C;%- JSON.stringify(categories) %&gt;,
    &quot;years&quot;: &amp;#x3C;%- JSON.stringify(years) %&gt;,
    &quot;months&quot;: &amp;#x3C;%- JSON.stringify(months) %&gt;,
    &quot;days&quot;: &amp;#x3C;%- JSON.stringify(days) %&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first half of the script handles iterating over my posts, one by one. I iterate over each category and tag, count the words, and then parse out the dates. The second half of the template outputs the resulting JSON. If you look back on top, you can see I use a &lt;code&gt;permalink&lt;/code&gt; value to specify that to output to JSON.&lt;/p&gt;
&lt;p&gt;To test this data, I created a quick Vue.js template to work with the JSON. As much as I don&apos;t like using EJS, I decided to use it again. Why? While I prefer Liquid templates (the engine Jekyll uses), it uses the same tokens that Liquid uses for data. That means using Liquid to generate Vue can be... tricky. Using EJS means I can simply not worry about it. Here&apos;s an &lt;em&gt;incredibly&lt;/em&gt; bare bones viewer.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;#x3C;style&gt;
    [v-cloak] {
        display: none;
    }
&amp;#x3C;/style&gt;

&amp;#x3C;h1&gt;Stats View Test&amp;#x3C;/h1&gt;

&amp;#x3C;div id=&quot;app&quot; v-cloak v-if=&quot;stats&quot;&gt;
    &amp;#x3C;h2&gt;Basic Stats&amp;#x3C;/h2&gt;
    &amp;#x3C;ul&gt;
        &amp;#x3C;li&gt;Total Posts: {{ stats.totalPosts }}&amp;#x3C;/li&gt;
        &amp;#x3C;li&gt;Total Words: {{ stats.totalWords }} (average per post: {{ stats.avgWords }})&amp;#x3C;/li&gt;
        &amp;#x3C;li&gt;First Post: {{ stats.firstPost.title }} ( {{ stats.firstPost.date }} )&amp;#x3C;/li&gt;
        &amp;#x3C;li&gt;Last Post: {{ stats.lastPost.title }} ( {{ stats.lastPost.date }} )&amp;#x3C;/li&gt;
    &amp;#x3C;/ul&gt;

    &amp;#x3C;h2&gt;Categories&amp;#x3C;/h2&gt;
    &amp;#x3C;ul&gt;
        &amp;#x3C;li v-for=&quot;(count,cat) in stats.categories&quot;&gt;{{ cat }} ({{count}} posts)&amp;#x3C;/li&gt;
    &amp;#x3C;/ul&gt;

    &amp;#x3C;h2&gt;Tags&amp;#x3C;/h2&gt;
    &amp;#x3C;ul&gt;
        &amp;#x3C;li v-for=&quot;(count,tag) in stats.tags&quot;&gt;{{ tag }} ({{count}} posts)&amp;#x3C;/li&gt;
    &amp;#x3C;/ul&gt;

    &amp;#x3C;h2&gt;Years&amp;#x3C;/h2&gt;
    &amp;#x3C;ul&gt;
        &amp;#x3C;li v-for=&quot;(count,year) in stats.years&quot;&gt;{{ year }} ({{count}} posts)&amp;#x3C;/li&gt;
    &amp;#x3C;/ul&gt;

    &amp;#x3C;h2&gt;Months&amp;#x3C;/h2&gt;
    &amp;#x3C;ul&gt;
        &amp;#x3C;li v-for=&quot;(count,month) in stats.months&quot;&gt;{{ month }} ({{count}} posts)&amp;#x3C;/li&gt;
    &amp;#x3C;/ul&gt;

    &amp;#x3C;h2&gt;Day of Week&amp;#x3C;/h2&gt;
    &amp;#x3C;ul&gt;
        &amp;#x3C;li v-for=&quot;(count,dow) in stats.days&quot;&gt;{{ dow }} ({{count}} posts)&amp;#x3C;/li&gt;
    &amp;#x3C;/ul&gt;
&amp;#x3C;/div&gt;

&amp;#x3C;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&amp;#x3C;/script&gt;
&amp;#x3C;script&gt;
    const app = new Vue({
        el: &apos;#app&apos;,
        data: {
            stats: null
        },
        created() {
            fetch(&apos;/stats.json&apos;)
                .then((res) =&gt; res.json())
                .then((res) =&gt; {
                    console.log(res);
                    this.stats = res;
                });
        }
    });
&amp;#x3C;/script&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I use simple HTML to report everything out. I could definitely use some fancy JavaScript charting to make it nicer, but plain text works well too. Here&apos;s a screenshot (note that I&apos;m using &lt;code&gt;.eleventyignore&lt;/code&gt; to ignore about 80% of my post content, this makes my testing a bit quicker but the stats you will see here don&apos;t represent the complete source of my blog).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1575464543-statssm.png&quot; alt=&quot;Stats View &quot;&gt;&lt;/p&gt;
&lt;h2&gt;Where to go from here&lt;/h2&gt;
&lt;p&gt;To say this could be prettier is an understatement. My cat could probably make a nicer looking page, but hopefully you get the idea. Next steps could be improving the front-end and expanding the types of statistics I collect. If you want a copy of this code, you can grab it from here: &lt;a href=&quot;https://github.com/cfjedimaster/eleventy-demos/tree/master/blogtest&quot;&gt;https://github.com/cfjedimaster/eleventy-demos/tree/master/blogtest&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[15 JAMstack Resources You Need as a Web Developer]]></title><description><![CDATA[What resources would we recommend for developers working with the JAMstack today? Let's take a look at resources for everything from getting started to advanced topics to community.]]></description><link>https://www.stackbit.com/blog/15-jamstack-resources/</link><guid isPermaLink="false">https://www.stackbit.com/blog/15-jamstack-resources/</guid><pubDate>Wed, 20 Nov 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;The other day my friend Ray and I were asked about whether our book, &quot;&lt;a href=&quot;http://shop.oreilly.com/product/0636920051879.do&quot;&gt;Working with Static Sites&lt;/a&gt;&quot;, was still relevant for learning the tools today. My answer was essentially that everything would still technically work but that it probably no longer represented the beliefs and best practices of today. Sure, JAMstack was a thing without a name yet at the time, but so much else has changed in the subsequent years beyond just what we call it.&lt;/p&gt;
&lt;p&gt;So what resources would I recommend for developers working with the JAMstack today? Let&apos;s take a look at resources for everything from getting started to advanced topics to community.&lt;/p&gt;
&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;Are you wondering what the heck the JAMstack is? Or have you seen a lot about it and curious where and how to get started? These resources will help.&lt;/p&gt;
&lt;h3&gt;1. &lt;a href=&quot;https://snipcart.com/blog/jamstack&quot;&gt;New to JAMstack? Everything You Need to Know to Get Started&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Obviously, &lt;a href=&quot;https://jamstack.org/&quot;&gt;JAMstack.org&lt;/a&gt;, which is maintained by Netlify, is a worthwhile starting point, but if you are looking for a more thorough overview of everything from what JAMstack is to how to get started to even how to pitch the JAMstack to your business or clients, this post is invaluable. While it was originally create four years ago, thankfully the folks at Snipcart have kept it up to date.&lt;/p&gt;
&lt;h3&gt;2. &lt;a href=&quot;https://jamstack.wtf/&quot;&gt;JAMstack WTF&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A really well done and comprehensive beginners guide created by Pedro Duarte and featuring information and links to articles and resources.&lt;/p&gt;
&lt;h3&gt;3. &lt;a href=&quot;https://www.netlify.com/oreilly-jamstack/&quot;&gt;Modern Web Development on the JAMstack&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is the only up-to-date general JAMstack book that I&apos;m aware of (though there are books like &lt;a href=&quot;https://www.manning.com/books/hugo-in-action&quot;&gt;Hugo In Action&lt;/a&gt; that are specific to a single tool as opposed to the broad ecosystem). It was written by Matt Biilmann, one of Netlify&apos;s founders, and Phil Hawksworth, one of their developer advocates, and is made available free via Netlify.&lt;/p&gt;
&lt;h3&gt;4. &lt;a href=&quot;https://github.com/automata/awesome-jamstack&quot;&gt;Awesome JAMstack&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Every worthwhile technology deserves a well-maintained awesome list or everyone will question its legitimacy. Thanks to Vilson Vieira for providing the JAMstack with one.&lt;/p&gt;
&lt;h2&gt;Ecosystem&lt;/h2&gt;
&lt;p&gt;So you know what the JAMstack is and are ready to get started, but there are so many tools to choose from. Thankfully there are some good sites that help organize the wide array of tools that make up the JAMstack ecosystem.&lt;/p&gt;
&lt;h3&gt;5. &lt;a href=&quot;https://www.staticgen.com/&quot;&gt;StaticGen.com&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Sure, &lt;a href=&quot;https://staticsitegenerators.net/&quot;&gt;StaticSiteGenerators.net&lt;/a&gt; is the more comprehensive list, but this site, maintained by Netlify, makes the information more digestible, especially since you can filter and sort the list by a variety of criteria.&lt;/p&gt;
&lt;h3&gt;6. &lt;a href=&quot;https://headlesscms.org/&quot;&gt;HeadlessCMS.org&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In most real-world cases, your JAMstack site will need some sort of content management system so that writers and editors can maintain the content beyond editing flat files. This site, again maintained by Netlify, makes finding one that fits your needs easier.&lt;/p&gt;
&lt;h3&gt;7. &lt;a href=&quot;https://jamstackthemes.dev/&quot;&gt;JAMstackThemes.dev&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Perhaps, like me, you suck at designing. Or perhaps you simply want a solid head start on your JAMstack site&apos;s look and feel. This site, maintained by &lt;a href=&quot;https://www.stackbit.com/&quot;&gt;Stackbit&lt;/a&gt; where I am a developer advocate, has over 400 themes filterable by static site generator and CMS.&lt;/p&gt;
&lt;h2&gt;Digging Deeper&lt;/h2&gt;
&lt;p&gt;Alright, you&apos;re already well into building your first JAMstack site and now you&apos;re looking for a way to keep up with new developments, trends and learn advanced techniques. Well, here are some useful sites to get you going.&lt;/p&gt;
&lt;h3&gt;8. &lt;a href=&quot;https://www.thenewdynamic.org/&quot;&gt;The New Dynamic Newsletter&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.thenewdynamic.org/&quot;&gt;The New Dynamic website&lt;/a&gt; website, maintained by Bud Parr, is a great resource in and of itself, with searchable directories of tools and services, articles, events and more. But the newsletter will ensure that you keep up to date on all the articles, tutorials and other information going on throughout the ecosystem and community.&lt;/p&gt;
&lt;h3&gt;9. &lt;a href=&quot;https://dev.to/t/jamstack&quot;&gt;JAMstack on Dev.to&lt;/a&gt; and 10. &lt;a href=&quot;https://css-tricks.com/tag/jamstack/&quot;&gt;JAMstack on CSS-Tricks&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Both Dev.to and CSS-Tricks are two of the best developer resources on the web in their own right, but they&apos;ve both included a ton of articles on the JAMstack in recent months from a variety of outstanding authors.&lt;/p&gt;
&lt;h2&gt;The Community&lt;/h2&gt;
&lt;p&gt;After your initial experiences with the JAMstack, you&apos;re now in love with it...because of course you are! You want to get more involved in the community - getting to know folks who contribute to it, helping out others who want to get started. Here are some great resources to do that.&lt;/p&gt;
&lt;h3&gt;11. &lt;a href=&quot;https://join.slack.com/t/thenewdynamic/shared_invite/enQtMjkwNjYwNTY0NjkxLTFkNGQ1YjMwZGNjNjY0YzY4MmM2YTBhZTY0YjkyOTBmYmE4NjMwY2M3ODMzZDIwNzg2ZTBkZjdjYjVlM2Q2ZDA&quot;&gt;The New Dynamic Slack&lt;/a&gt; and 12. &lt;a href=&quot;https://jamstack.slack.com/join/shared_invite/enQtNjc4OTI1NDk3NDI1LWIxZjk1YWRjOWVlMzM0MTVlMTg4YmY1OTBjZDc1M2I3N2NhODBlZDNmNjAzMGMwNzI5MTVlMWEwYjBiMTU2NzE&quot;&gt;JAMstack Community Slack&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The New Dynamic slack is an extension of the New Dynamic site and newsletter and has been around for some time - enough so that many of the folks who created the tools you&apos;ll use are active members and always super helpful. The JAMstack community slack is maintained by Phil Hawksworth and Netlify. While relatively recent, it is growing fast and already offers great opportunities for community discussion.&lt;/p&gt;
&lt;h3&gt;13. &lt;a href=&quot;https://www.heavybit.com/library/podcasts/jamstack-radio/&quot;&gt;JAMstack Radio&lt;/a&gt; and 14. &lt;a href=&quot;https://thatsmyjamstack.com/&quot;&gt;That&apos;s My JAMstack&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;JAMstack Radio, hosted by Brian Douglas, centers on interviews with individuals and companies working in the JAMstack. That&apos;s My JAMstack also focuses on interviews but with the goal of understanding people&apos;s journey into learning the JAMstack.&lt;/p&gt;
&lt;h3&gt;15. &lt;a href=&quot;https://jamstackconf.com/&quot;&gt;JAMstack_conf&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While there are &lt;a href=&quot;https://jamstack.org/community/&quot;&gt;JAMstack meetups&lt;/a&gt; in a number of cities around the world, this is the one major event focused solely on the topic. Hosted by Netlify, the conference has been held in New York, London and San Francisco. The best part for those of us who missed it is that the recent &lt;a href=&quot;https://jamstackconf.com/sf/schedule/&quot;&gt;JAMstack&lt;em&gt;conf&lt;/em&gt;sf&lt;/a&gt; has all its sessions recorded and online.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Gating Content in JAMstack Sites]]></title><description><![CDATA[A step-by-step guide to adding registration and login requirements to sections of content on a JAMstack site.]]></description><link>https://www.stackbit.com/blog/gating-content-jamstack/</link><guid isPermaLink="false">https://www.stackbit.com/blog/gating-content-jamstack/</guid><pubDate>Thu, 14 Nov 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;It&apos;s a common requirement for a site to have a section that is restricted to members or even specific types of members. In order to implement this, you need a way for users to register and sign in, a way to assign roles to a user and a way to prevent/grant them access to specific content. But, how can you accomplish that when you&apos;re working with static assets as in a JAMstack site? In this tutorial, we&apos;re going to look at how to do exactly that.&lt;/p&gt;
&lt;h2&gt;The Tools We&apos;ll Use&lt;/h2&gt;
&lt;p&gt;While there are numerous ways to solve this problem, in this example we&apos;ll be leveraging a number of solutions that depend on Netlify.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.netlify.com/visitor-access/identity/&quot;&gt;Netlify Identity&lt;/a&gt; - this is what will manage our site users. We&apos;ll use the default functionality, although there are ways to &lt;a href=&quot;https://docs.netlify.com/visitor-access/oauth-provider-tokens/#setup-and-settings&quot;&gt;integrate external authentication providers via OAuth&lt;/a&gt;. If you&apos;d like to know more about how it works, you can find the &lt;a href=&quot;https://docs.netlify.com/visitor-access/identity/&quot;&gt;docs for Identity here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://identity.netlify.com/&quot;&gt;Netlify Identity Widget&lt;/a&gt; - this tool makes it easy to add Netlify Identity login functionality to your site&apos;s UI without needing configuration. The GitHub project for the widget is &lt;a href=&quot;https://github.com/netlify/netlify-identity-widget&quot;&gt;available here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.netlify.com/products/functions/&quot;&gt;Netlify Functions&lt;/a&gt; - these are serverless functions (using AWS Lambda) that Netlify provides an easy way to build, test and deploy as part of your project.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The example I&apos;ll show was generated using &lt;a href=&quot;https://www.stackbit.com/&quot;&gt;Stackbit&lt;/a&gt;, which offers a quick and easy way to build CMS-connected JAMstack sites (full disclosure: I am the developer advocate for Stackbit). I chose &lt;a href=&quot;https://gohugo.io/&quot;&gt;Hugo&lt;/a&gt; as my static site generator and &lt;a href=&quot;https://github.com/stackbithq/stackbit-theme-exto&quot;&gt;Exto&lt;/a&gt; as my theme, but neither of these impact how restricted content access is implemented.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: It&apos;s important to point out that both Netlify Identity and Functions have usage caps, after which they can incur charges. In addition, in order to prevent specific users from accessing sections of your site, they need to be assigned a role. Role-based access controls are currently limited to Netlify&apos;s Business plan. You can check out the *[&lt;/em&gt;full feature pricing grid&lt;em&gt;](&lt;a href=&quot;https://www.netlify.com/pricing/#features&quot;&gt;https://www.netlify.com/pricing/#features&lt;/a&gt;)&lt;/em&gt; for Netlify for exact usage limits and costs.*&lt;/p&gt;
&lt;h2&gt;Implementing Identity&lt;/h2&gt;
&lt;p&gt;To reduce the scope of this tutorial and simplify our sample project, we&apos;re going to make some assumptions. First, you already have a site (in my case, generated by &lt;a href=&quot;https://www.stackbit.com/&quot;&gt;Stackbit&lt;/a&gt; with whatever theme you choose) with a section of content that exists under a subdirectory of the site that you want to restrict (for instance, in my case I&apos;ll be restricting the blog posts section which are published under &lt;code&gt;/posts/&lt;/code&gt;).&lt;/p&gt;
&lt;h3&gt;Enable Identity for Your Project&lt;/h3&gt;
&lt;p&gt;The first step is to enable Netlify Identity via the &quot;Identity&quot; menu item within the Netlify dashboard or going to &quot;Settings&quot; and then &quot;Identity&quot;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1573736223-enable-identity.png&quot; alt=&quot;Enable identity&quot;&gt;&lt;/p&gt;
&lt;p&gt;If you go through the main Identity menu item, you&apos;ll want to click &quot;Settings and usage&quot; to edit settings once it is enabled before continuing. Identity has a lot of customization available, from open to invite only registrations, to external OAuth providers, to webhooks, to the templates of any emails that the registration process might send.&lt;/p&gt;
&lt;p&gt;In the case of this tutorial (and to make local testing easier), I disabled the confirmation step. This would send the user an email upon registration and require that they click a link to confirm their email/account before they can continue. This is definitely a good feature for a real world site, but makes testing a simple demo a bit more tedious.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1573736239-confirmation-not-required.png&quot; alt=&quot;Disable confirmation&quot;&gt;&lt;/p&gt;
&lt;p&gt;For a real site, you&apos;ll definitely want to return here later and at least customize the email communications, but for now, let&apos;s start adding the ability to sign up/log in via our site.&lt;/p&gt;
&lt;h3&gt;Add the Identity Widget to Log In&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;https://identity.netlify.com/&quot;&gt;Netlify Identity Widget&lt;/a&gt; is an open source tool from Netlify that makes it easy to add a login/signup to a site that is using Netlify Identity. The end result will look something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/netlify%20identity%20signup%20login.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;The first thing we need to do is include the script in the head section of the HTML. I modified &lt;code&gt;layouts/baseof.html&lt;/code&gt; in my Exto template to add the script.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;#x3C;script type=&quot;text/javascript&quot; src=&quot;https://identity.netlify.com/v1/netlify-identity-widget.js&quot;&gt;&amp;#x3C;/script&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let&apos;s add the login button that will open the model window allowing me to either choose sign up or log in. In my project, I added the below code to &lt;code&gt;layouts/partials/header.html&lt;/code&gt;. It uses the &lt;code&gt;button&lt;/code&gt; layout seen in the animated gif above.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;#x3C;div data-netlify-identity-button&gt;&amp;#x3C;/div&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point, you should be able to sign up and log into your site - even locally, if you&apos;re using &lt;code&gt;netlify dev&lt;/code&gt; via the &lt;a href=&quot;https://github.com/netlify/cli&quot;&gt;Netlify CLI&lt;/a&gt;. Next, let&apos;s add the widget to one more place by creating a page that we&apos;ll redirect users to who are not signed in but attempt to access a restricted page. I created a page in my project under &lt;code&gt;content/gated.md&lt;/code&gt; (though your location may differ depending on which static site generator you use). The only content on the page is the login button, but this time using the &lt;code&gt;menu&lt;/code&gt; layout.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;---
title: Registration Required
subtitle: The content you have requested requires a login.
layout: page
---

&amp;#x3C;div data-netlify-identity-menu&gt;&amp;#x3C;/div&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The resulting page looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1573736251-gated-page.png&quot; alt=&quot;Gated redirect page&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: In my examples, I&apos;m using the same CSS that the *[&lt;/em&gt;Identity widget sample page&lt;em&gt;](&lt;a href=&quot;https://identity.netlify.com/&quot;&gt;https://identity.netlify.com/&lt;/a&gt;)&lt;/em&gt; uses. Without copying that CSS, your buttons will appear unstyled. Unfortunately, if there is a place where this CSS file is available to be easily included, I am not aware of it.*&lt;/p&gt;
&lt;h3&gt;Create a Function to Assign a Role to New Users&lt;/h3&gt;
&lt;p&gt;Our users can now register, log in and log out, but there&apos;s one problem. In order to implement our redirect, the users will need to be assigned a role. By default, users are not assigned a role in Netlify Identity, though one can be manually assigned. Clearly, my site is going to be hugely popular, so this would be difficult to manage.&lt;/p&gt;
&lt;p&gt;Thankfully, &lt;a href=&quot;https://www.netlify.com/products/functions/&quot;&gt;Netlify Functions&lt;/a&gt; offer us a way to create a serverless function that will make this happen automatically. The benefit of Netlify Functions is that they can be deployed as part of my project code and can even be easily tested locally using &lt;code&gt;netlify dev&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The first thing that we need to do is define where our functions will live. Add the following line under the &lt;code&gt;[build]&lt;/code&gt; heading within &lt;code&gt;netlify.toml&lt;/code&gt;. This says that our functions will be located in the &lt;code&gt;/lambda&lt;/code&gt; folder (you&apos;re free to choose a different folder name if you prefer).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-toml&quot;&gt;functions = &quot;./lambda&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next create the &lt;code&gt;lambda&lt;/code&gt; folder and inside of it add a file named &lt;code&gt;identity-validate.js&lt;/code&gt;, which will contain the code of our function. It&apos;s important to note that the name here is critical. By naming the file with one of the &lt;a href=&quot;https://docs.netlify.com/functions/trigger-on-events/#available-triggers&quot;&gt;available triggers&lt;/a&gt;, it will automatically be triggered on that event. The &lt;code&gt;identity-validate&lt;/code&gt; event is triggered when a user tries to sign up via Identity.&lt;/p&gt;
&lt;p&gt;Now let&apos;s add our function code.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: The code for my serverless function is taken from *[&lt;/em&gt;this article&lt;em&gt;](&lt;a href=&quot;https://www.netlify.com/blog/2019/02/21/the-role-of-roles-and-how-to-set-them-in-netlify-identity/&quot;&gt;https://www.netlify.com/blog/2019/02/21/the-role-of-roles-and-how-to-set-them-in-netlify-identity/&lt;/a&gt;)&lt;/em&gt; by Divya Sasidharan. The only thing I needed to change was the role(s) being assigned.*&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;exports.handler = function (event, context, callback) {
    const data = JSON.parse(event.body);
    const { user } = data;

    const responseBody = {
        app_metadata: {
            roles: [&apos;member&apos;],
            my_user_info: &apos;this is some user info&apos;
        },
        user_metadata: {
            ...user.user_metadata, // append current user metadata
            custom_data_from_function: &apos;hurray this is some extra metadata&apos;
        }
    };
    callback(null, {
        statusCode: 200,
        body: JSON.stringify(responseBody)
    });
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once this function is in place, any user who signs up will now automatically be assigned to the &lt;code&gt;member&lt;/code&gt; role. You can change that role or even assign them multiple roles if your use case requires it.&lt;/p&gt;
&lt;h2&gt;Adding the Redirect&lt;/h2&gt;
&lt;p&gt;Now that our users can sign up and are assigned a role, it&apos;s time to implement role based redirects. There are two ways to implement redirects in Netlify: via a &lt;code&gt;_redirects&lt;/code&gt; file or via the &lt;code&gt;netlify.toml&lt;/code&gt; file. The syntax for writng a &lt;code&gt;_redirects&lt;/code&gt; file is simple, but you&apos;ll need to be careful where you place the file as it differs depending on the static site generator (basically, it needs to be in the output folder). The benefit of using &lt;code&gt;netlify.toml&lt;/code&gt; is that you don&apos;t need to worry about that, but the syntax is a little tougher and more verbose.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: The &lt;a href=&quot;https://play.netlify.com/redirects&quot;&gt;Netlify playground&lt;/a&gt; offers a good way to test these out. While it only accepts the &lt;code&gt;_redirects&lt;/code&gt; format, it will output the &lt;code&gt;netlify.toml&lt;/code&gt; format for you.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We&apos;ll need two redirects. First, we need one that &quot;redirects&quot; anyone with the &quot;member&quot; role to their post (I say redirect, but basically it is just allowing them access). The second will take everyone else (i.e. anyone who is not logged in or does not have a &quot;member&quot; role) to the login page we created earlier (&lt;code&gt;/gated&lt;/code&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-toml&quot;&gt;[[redirects]]
from = &quot;/posts/*&quot;
to = &quot;/posts/:splat&quot;
status = 200
force = true
conditions = {Role = [&quot;member&quot;]}
[[redirects]]
from = &quot;/posts/*&quot;
to = &quot;/gated/&quot;
status = 404
force = true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All the pieces are now in place, so...&lt;/p&gt;
&lt;h2&gt;Let&apos;s Give This a Try&lt;/h2&gt;
&lt;p&gt;A user can access the blog list, but will be redirected when they click on an actual post. Once logged in, they can get access to the content of the post.&lt;/p&gt;
&lt;p&gt;Keep in mind, all this is still happening on a site with completely static assets.&lt;/p&gt;
&lt;h2&gt;Where to Go From Here&lt;/h2&gt;
&lt;p&gt;Obviously, this was a very simplified example that can be improved upon. For example, it would be great if the user was redirected back to their content after signing in or, instead of redirecting to the login page, it redirected to a version of the same URL that triggered the modal. Nonetheless, with minimal effort and code, we still have a fully functioning user registration and login and gated content restrictions.&lt;/p&gt;
&lt;p&gt;If you&apos;d like to go further, I recommend the following resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.netlify.com/blog/2018/01/23/getting-started-with-jwt-and-identity/&quot;&gt;Getting Started with JWT and Identity&lt;/a&gt; by Gerald Onyango&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.netlify.com/blog/2019/02/21/the-role-of-roles-and-how-to-set-them-in-netlify-identity/&quot;&gt;The role of roles and how to set them in Netlify Identity&lt;/a&gt; by Divya Sasidharan&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.netlify.com/visitor-access/role-based-access-control/#create-users-and-set-roles&quot;&gt;Role-based access control with JWT documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Get Netlify Build Updates Directly on Your Site!]]></title><description><![CDATA[A look at Stackbit's new On-page Control Center that gives you detailed information about your Netlify build without ever leaving your site. So say goodbye to ⌘+R, ⌘+R, ⌘+R.]]></description><link>https://www.stackbit.com/blog/stackbit-control-center/</link><guid isPermaLink="false">https://www.stackbit.com/blog/stackbit-control-center/</guid><pubDate>Wed, 06 Nov 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Building modern web sites with the &lt;a href=&quot;https://jamstack.org/&quot;&gt;JAMStack&lt;/a&gt; is generally a great experience for developers. It&apos;s easy to build and test locally without some complex local environment setup (remember the days when you had to install a local application server, web server, database server and more?). It&apos;s also easy to deploy using tools like &lt;a href=&quot;https://www.netlify.com/&quot;&gt;Netlify&lt;/a&gt; that automatically build and deploy your project to production.&lt;/p&gt;
&lt;p&gt;Until now, one downside of this has been that the build and deploy process can be a bit opaque. Even small changes to the site files or connected CMS will trigger the build process. Sure, I can log into my Netlify admin, go to my deploys and see the build process happen, but, if you&apos;re like me, you&apos;re more likely to be sitting on your live web page hitting &lt;code&gt;⌘+R&lt;/code&gt; every few seconds until the changes are live. Depending on the type of change I made, it may not even be immediately obvious if I&apos;m looking at the old copy of the site or the updated site.&lt;/p&gt;
&lt;h2&gt;Announcing the Stackbit On-page Control Center&lt;/h2&gt;
&lt;p&gt;One of Stackbit&apos;s goals is to improve the developer experience when building modern web sites. To that end, we&apos;re announcing the availability of our new &lt;a href=&quot;https://www.stackbit.com/control-center/&quot;&gt;Stackbit On-Page Control Center&lt;/a&gt;. The control center addresses the issues I discussed above and more. Let&apos;s look at some of the features.&lt;/p&gt;
&lt;h3&gt;See Your Netlify Builds as They Happen!&lt;/h3&gt;
&lt;p&gt;The On-Page Control Center automatically detects when a build has been triggered at Netlify and notifies you. Whether the build was triggered by a commit to the repository, a change in the CMS or something else entirely, you&apos;ll know as soon as it happens.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1573046581-cms-update-sm.gif&quot; alt=&quot;automatic build detection&quot;&gt;&lt;/p&gt;
&lt;h3&gt;Monitor the Build Logs Live&lt;/h3&gt;
&lt;p&gt;If there&apos;s a delay or problem with your build, you&apos;ll know immediately because the control center allows you to view your Netlify build logs without ever leaving your site. This means you&apos;re aware of any issues as they occur.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/ultra-daffodil.png&quot;&gt;&lt;/p&gt;
&lt;h3&gt;Quick Access to Your Connected Services&lt;/h3&gt;
&lt;p&gt;Need to go to the Netlify admin console or the GitHub repository associated with your site? The control center gives you quick links directly to those services. This gives you one-stop to access to the tools that run your site &lt;em&gt;on your site&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;How Do I Get the Control Center?&lt;/h2&gt;
&lt;p&gt;Maybe you&apos;re thinking, &quot;That all sounds cool, but I bet it&apos;s a pain to implement.&quot; Well, good news - if you&apos;re already a Netlify user, integration is just a matter of a couple clicks. Seriously!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to the &lt;a href=&quot;https://www.stackbit.com/control-center/&quot;&gt;On-Page Control Center page&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Click &quot;Pick any Netlify Project&quot;.&lt;/li&gt;
&lt;li&gt;Select which projects you would like to enable the control center on.&lt;/li&gt;
&lt;li&gt;Once Netlify updates for all the projects you selected, you&apos;ll be able to access the control center on your page.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;But will this work on your site?&lt;/p&gt;
&lt;p&gt;So long as your site is deployed to Netlify, yes it will! It doesn&apos;t matter if you built your site using Gatsby, Jekyll, Hugo, VuePress, any other static site generator or no static site generator at all - you can deploy the Stackbit On-page Control Center and get all the features we discussed.&lt;/p&gt;
&lt;p&gt;If you&apos;d like to know more about how all this works, you can check out the &lt;a href=&quot;https://www.stackbit.com/control-center/#faq&quot;&gt;FAQ&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;We&apos;d Love to Hear From You!&lt;/h2&gt;
&lt;p&gt;Give the &lt;a href=&quot;https://www.stackbit.com/control-center/&quot;&gt;Stackbit On-Page Control Center&lt;/a&gt; a try and let us know what you think. We hope it helps make your developer experience even better. We have a ton more features in store, which you can read more about &lt;a href=&quot;https://www.stackbit.com/live/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Own Your Content, Broaden Your Audience]]></title><description><![CDATA[The Dev.to and Stackbit integration gives developers an easy option to build a site with the benefits of the JAMStack and owning their own content while accessing the large audience of developers on Dev.to.]]></description><link>https://www.stackbit.com/blog/devto-stackbit/</link><guid isPermaLink="false">https://www.stackbit.com/blog/devto-stackbit/</guid><pubDate>Tue, 22 Oct 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I have always been a firm believer that content authors should maintain ownership of their content - of course, this includes developers who blog and/or write tutorials. Back in May of this year, I wrote about the three options available to developers to publish their content, while maintaining ownership and avoiding any nasty subscription modals.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;As developers, we have really great options to post but avoid Medium.&lt;br&gt;&lt;br&gt;1) Use &lt;a href=&quot;https://t.co/kAJXIGPncW&quot;&gt;https://t.co/kAJXIGPncW&lt;/a&gt; if you prefer to not manage your own site at all&lt;br&gt;2) Use &lt;a href=&quot;https://twitter.com/Netlify?ref_src=twsrc%5Etfw&quot;&gt;@Netlify&lt;/a&gt; if you want to easily spin up a static site&lt;br&gt;3) Use &lt;a href=&quot;https://twitter.com/Netlify?ref_src=twsrc%5Etfw&quot;&gt;@Netlify&lt;/a&gt; and repost to &lt;a href=&quot;https://t.co/kAJXIGPncW&quot;&gt;https://t.co/kAJXIGPncW&lt;/a&gt; &amp;lt;= do this!&lt;/p&gt;&amp;mdash; Brian Rinaldi (@remotesynth) &lt;a href=&quot;https://twitter.com/remotesynth/status/1128645546242080768?ref_src=twsrc%5Etfw&quot;&gt;May 15, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;p&gt;&lt;a href=&quot;https://dev.to/&quot;&gt;Dev.to&lt;/a&gt; has been my favorite developer community site for years. The community on Dev.To is among the most welcoming, the team behind it is great, their site is open source and they have always supported contributors ability to own their own content. Plus, they have tens of thousands of members, meaning you can own your content while still getting the benefit of such a large community.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Zach Leatherman also gave a great talk about &lt;a href=&quot;https://www.youtube.com/watch?v=X3SrZuH00GQ&quot;&gt;owning your content on social media&lt;/a&gt; at JAMStack&lt;em&gt;conf&lt;/em&gt;sf last week, that I also recommend checking out.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Owning your own content on Dev.To&lt;/h2&gt;
&lt;p&gt;Previously, this was done via two options:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Manually add the &lt;code&gt;canonical_url&lt;/code&gt; to the front matter of a contributed post. This solves the problem of duplicate content by pointing search engines that the URL of the original post. (You can read more about the &lt;a href=&quot;https://yoast.com/rel-canonical/&quot;&gt;canonical URL here&lt;/a&gt; if you&apos;re interested.)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use Dev.To&apos;s publish from RSS feed feature, which has the option for also allowing the RSS source to be the canonical URL.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1571763047-rssdevto.png&quot; alt=&quot;Dev.to RSS settings&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Obviously, your site could be anything that generates an RSS feed, but we know the &lt;a href=&quot;https://jamstack.org/&quot;&gt;JAMStack&lt;/a&gt; offers a ton of benefits like speed, security and, perhaps most importantly for developers considering a blog, free or really cheap hosting. The problem for some developers might have been that they were unfamiliar with the JAMStack and so a solution like Wordpress might make an easier start. However, tools like &lt;a href=&quot;https://www.netlifycms.org/&quot;&gt;Netlify CMS&lt;/a&gt; and &lt;a href=&quot;https://www.stackbit.com/&quot;&gt;Stackbit&lt;/a&gt; made it super easy to create and deploy a JAMStack site with just a few clicks.&lt;/p&gt;
&lt;p&gt;But what if you already have existing content on Dev.to? Or what if you&apos;d rather not even have to mess with posting to your JAMStack site and prefer just to use the tools Dev.to provides? There&apos;s now an even better way!&lt;/p&gt;
&lt;h2&gt;Publishing from Dev.to to JAMStack&lt;/h2&gt;
&lt;p&gt;A few weeks ago, Dev.to and Stackbit &lt;a href=&quot;https://dev.to/connecting-with-stackbit&quot;&gt;announced&lt;/a&gt; a way to publish Dev.to content to a JAMStack site with just a few clicks, all while ensuring that you own your own content because it all gets placed into your own GitHub account.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to Stackbit using &lt;a href=&quot;https://app.stackbit.com/create?ref=devto&quot;&gt;the dev.to flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Select a theme.&lt;/li&gt;
&lt;li&gt;Connect your dev.to account. You may also need to connect your GitHub and Netlify accounts if you have not already done so.&lt;/li&gt;
&lt;li&gt;There are no more steps. You&apos;re done. Go sip some coffee and enjoy your new site.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here&apos;s &lt;a href=&quot;https://neat-yam-e14d8.netlify.com/&quot;&gt;my Dev.to content on published to a blog&lt;/a&gt;. Honestly,I think it looks great out-of-the-box but I may want to customize the theme a bit more. Otherwise, the site is essentially ready to publish. The best part is that not only are your existing posts pulled into Dev.to, but any future posts will be as well. This will trigger a new build and publish your site automatically.&lt;/p&gt;
&lt;h2&gt;Owning your content doesn&apos;t require tons of effort&lt;/h2&gt;
&lt;p&gt;As I&apos;ve shown, you have two really easy options available to you if you would like to own your own content but still take advantage of a large community of developers on Dev.to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You can publish your own site in a few clicks and syndicate to Dev.to via RSS;&lt;/li&gt;
&lt;li&gt;Or you can create your content on Dev.to and import it into GitHub and your own blog hosted on Netlify via Stackbit.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As an added bonus, you get to learn some JAMStack by digging into the generated code!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Sanity.io is now on Stackbit!]]></title><description><![CDATA[We're very excited to announce that we've integrated another amazing CMS to our ever growing catalog!  🎉 Now, all new and existing Uniform themes can be deployed and managed with Sanity.io! 🎉]]></description><link>https://www.stackbit.com/blog/sanity-is-now-on-stackbit/</link><guid isPermaLink="false">https://www.stackbit.com/blog/sanity-is-now-on-stackbit/</guid><pubDate>Tue, 17 Sep 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;You can try it out right now: This button will create a new website based on our &lt;strong&gt;Fresh theme, Gatsby and Sanity&lt;/strong&gt; 👉
&lt;a class=&quot;button stackbit&quot; href=&quot;https://app.stackbit.com/create?theme=fresh&amp;ssg=gatsby&amp;cms=sanity&quot; target=&quot;_blank&quot;&gt;Create With Stackbit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sanity.io/?ref=stackbit&quot;&gt;Sanity.io&lt;/a&gt; is a great option for developers who want a quick setup for a headless CMS that can be built upon and expanded over time. Sanity&apos;s model schemas are one of the most advanced on the market, are highly customizable and powered by flexible APIs.&lt;/p&gt;
&lt;p&gt;Sanity&apos;s Studio is actually its own little customizable JAMstack app that deploys alongside your website and lets you manage your content from anywhere on the web. There&apos;s a &lt;a href=&quot;https://www.sanity.io/plugins&quot;&gt;selection of plugins&lt;/a&gt; to customize its appearance, and even add custom field types to your schema.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1568750824-untitled-2.png&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Faster builds&lt;/h2&gt;
&lt;p&gt;Stackbit helps you hit the ground running by pre-building Sanity Studio on your first deploy, so that your site could be live and editable in 2 minutes!&lt;/p&gt;
&lt;p&gt;Want to customize your Sanity Studio? Just push your changes to the studio source that sits in your site&apos;s repository, and your online studio will update automagically!&lt;/p&gt;
&lt;p&gt;In order to reduce the overhead of having an additional deployment for your studio (reducing overheads is kinda what we do here at Stackbit), we&apos;ve utilized Sanity&apos;s own deploy service to build and host your studio on Sanity&apos;s convenience service. If you need more control, it&apos;s just as easy to move your studio to a host of your choice.&lt;/p&gt;
&lt;h2&gt;Integrating with Sanity&lt;/h2&gt;
&lt;p&gt;We&apos;d like to shoutout a huge thanks to the team at Sanity for working together with us on this feature! It&apos;s amazing how even collaborating with other companies in 2019 is bleeding edge, with Slack&apos;s shared channels and the way a chat message can turn into a working oAuth integration in moments.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1568751670-djfb2bxkaa-kn3.jpeg&quot;&gt;&lt;/p&gt;
&lt;p&gt;From left to right: &lt;a href=&quot;https://twitter.com/jemm1ma&quot;&gt;@jemm1ma&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/benedfit&quot;&gt;@benedfit&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/rodiktries&quot;&gt;@rodiktries&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/smnh&quot;&gt;@smnh&lt;/a&gt;,&lt;a href=&quot;https://twitter.com/kmelve&quot;&gt;@kmelve&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you didn&apos;t get a chance to click it yet, this button will create a new website with Sanity and based on our Fresh theme and Gatsby (feel free to try any other combination, it&apos;s super easy)&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;button stackbit&quot; href=&quot;https://app.stackbit.com/create?theme=fresh&amp;ssg=gatsby&amp;cms=sanity&quot; target=&quot;_blank&quot;&gt;Create With Stackbit&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Tutorial: Adding Stackbit to a Jekyll theme]]></title><description><![CDATA[In this tutorial you will learn how to convert your Jekyll theme to a [Stackbit Uniform theme](https://www.stackbit.com/uniform-themes/). With Stackbit Uniform, you can connect your theme to headless CMS and deploy it to Netlify in minutes.]]></description><link>https://www.stackbit.com/blog/jekyll-stackbit-tutorial/</link><guid isPermaLink="false">https://www.stackbit.com/blog/jekyll-stackbit-tutorial/</guid><pubDate>Sun, 01 Sep 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;For this tutorial we are going to use the following process:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Overview how Stackbit works&lt;/li&gt;
&lt;li&gt;Prepare our development environment&lt;/li&gt;
&lt;li&gt;Create the stackbit.yaml file in the Jekyll theme and add required fields&lt;/li&gt;
&lt;li&gt;Define content models in stackbit.yaml&lt;/li&gt;
&lt;li&gt;Validate our theme with the Stackbit CLI validator&lt;/li&gt;
&lt;li&gt;Import the converted theme to Stackbit and connect it to a CMS of your choice.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Overview How Stackbit Works&lt;/h2&gt;
&lt;p&gt;To make your Jekyll theme work with Stackbit, you will need to create the stackbit.yaml file in the root folder of your theme. In this file you will define content models which map your theme content to a structured schema.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1567335214-how-stackbit-works.jpg&quot; alt=&quot;Overview How Stackbit Works&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Prepare Our Development Environment&lt;/h2&gt;
&lt;p&gt;To start things off, first create the Stackbit account. Then fork the repo at &lt;a href=&quot;https://github.com/stackbithq/uniform-jekyll-tutorial&quot;&gt;uniform-jekyll-tutorial&lt;/a&gt; and clone it to your local machine. It will be our starting point. For testing and debugging we will need to install &lt;a href=&quot;https://docs.stackbit.com/unibit/unibit-cli/&quot;&gt;Unibit CLI&lt;/a&gt; from Stackbit. It will help us to validate the theme.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm install -g @stackbit/unibit&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;After the installation is complete, we are ready to go.&lt;/p&gt;
&lt;h2&gt;Create the stackbit.yaml File in the Jekyll Theme and Add Required Fields&lt;/h2&gt;
&lt;p&gt;When you have the repo cloned and Unibit CLI set up on your local machine, let&apos;s move on and create the &lt;strong&gt;stackbit.yaml&lt;/strong&gt; file in the Jekyll theme root directory. After you did that, add the basic fields to the file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;stackbitVersion: ~0.2.0
ssgName: jekyll
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Try Unibit CLI and validate Jekyll theme with the &lt;code&gt;unibit validate&lt;/code&gt; command. Since we&apos;ve added basic configuration to the stackbit.yaml file, Unibit tries to fill out the rest of the fields as it knows we are using Jekyll.&lt;/p&gt;
&lt;p&gt;The next step is to add the required fields to the file. As the name suggests these fields should be present in every &lt;strong&gt;stackbit.yaml&lt;/strong&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;stackbitVersion: &quot;~0.2.0&quot;
ssgName: jekyll
staticDir: &quot;&quot;
uploadDir: images
buildCommand: &quot;gem install jekyll bundler &amp;#x26;&amp;#x26; bundle install &amp;#x26;&amp;#x26; bundle exec jekyll build&quot;
publishDir: &quot;_site&quot;
dataDir: &quot;&quot;
pagesDir: &quot;&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to learn more about these fields, please head on to the &lt;a href=&quot;https://docs.stackbit.com/uniform/stackbit-yaml/&quot;&gt;Stackbit Docs&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Define Content Models in stackbit.yaml&lt;/h2&gt;
&lt;p&gt;Now we begin the most interesting part, adding content models to the stackbit.yaml file. These models are necessary for CMS to understand your content in a structured way. There are a few types of content models — page models, data models, field models and object models. We use page models to map all our pages, data models to map everything that is inside the data directory and in the config.yml file, and field models to define individual fields of page, data and object models.&lt;/p&gt;
&lt;p&gt;Before we begin creating content models, let&apos;s create the list of what kind of content and data we have in our theme and what kind of models we will use for it:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Page Models&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Posts&lt;/li&gt;
&lt;li&gt;Pages&lt;/li&gt;
&lt;li&gt;Tags page&lt;/li&gt;
&lt;li&gt;404 page&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Data Models&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Author information&lt;/li&gt;
&lt;li&gt;Social links&lt;/li&gt;
&lt;li&gt;config.yml&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To start creating content models, add &lt;code&gt;models:&lt;/code&gt; to the stackbit.yaml file below the &lt;code&gt;pageTemplateKey: layout&lt;/code&gt; field. All other models (page, data and object) are nested under this field:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;stackbitVersion: &quot;~0.2.0&quot;
ssgName: jekyll
staticDir: &quot;&quot;
uploadDir: images
buildCommand: &quot;gem install jekyll bundler &amp;#x26;&amp;#x26; bundle install &amp;#x26;&amp;#x26; bundle exec jekyll build&quot;
publishDir: &quot;_site&quot;
dataDir: &quot;&quot;
pagesDir: &quot;&quot;
pageTemplateKey: layout
models:
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Create Models for config.yml Options&lt;/h3&gt;
&lt;p&gt;The config file in our theme has quite a few options and we need them to be accessible in CMS. So we create the config model and specify its type, label, file and fields:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;models:
  config:
    type: data
    label: Config
    file: _config.yml
    fields:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Under the fields key we specify options of the config file. For example, let&apos;s define the &lt;code&gt;lang&lt;/code&gt; option&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Site language
lang: en-US
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in the stackbit.yaml file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;models:
  config:
    type: data
    label: Config
    file: _config.yml
    fields:
      - type: string
        name: lang
        label: Site Language
        description: The language of the site used in HTML lang attribute.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&apos;s explore the fields we just added as we will keep using this pattern. Fields &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; are required. Field &lt;code&gt;name&lt;/code&gt; should be the same as the option in the &lt;code&gt;_config.yml&lt;/code&gt; file of our theme. Field &lt;code&gt;type&lt;/code&gt; should specify what type of data CMS can expect from this model. For example, the &lt;code&gt;string&lt;/code&gt; type will create a single-line plain text input field, the &lt;code&gt;boolean&lt;/code&gt; type a true/false toggle, the &lt;code&gt;image&lt;/code&gt; type an image upload widget, etc. Field &lt;code&gt;label&lt;/code&gt; should have a short, human-readable label for the field. Field &lt;code&gt;description&lt;/code&gt; is optional, but I recommend you to add it to make it easier for the user to navigate CMS.&lt;/p&gt;
&lt;p&gt;Following the same pattern, we model other options from the _config.yml file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;models:
  config:
    type: data
    label: Config
    file: _config.yml
    fields:
      - type: color
        name: accent_color
        label: Accent Color
        description: The accent color of the theme.
        required: true
      - type: string
        name: lang
        label: Site Language
        description: The language of the site used in HTML lang attribute.
      - type: string
        name: title
        label: Site Title
        description: The title displayed in the site header, title tag, search-engine results.
      - type: string
        name: description
        label: Description
        description: The default description displayed in meta tags, search-engine results.
      - type: string
        name: baseurl
        label: Baseurl
        description: The subpath of your site, e.g. /blog, for generating urls.
      - type: string
        name: url
        label: Url
        description: The base hostname and protocol of your site for where absolute urls are needed.
      - type: string
        name: permalink
        label: Permalink
        description: The permalink pattern.
      - type: image
        name: favicon
        label: Favicon
        description: The icon image associated with your website.
      - type: string
        name: disqus
        label: Disqus Username
        description: The shortname for your Disqus site to enable comments.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are few options in &lt;code&gt;_config.yml&lt;/code&gt; that are more complex. Let&apos;s take a closer look at them. Here is how navigation is defined in the _config.yml file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# _config.yml
...
# Site navigation - each item must have a title and a url.
navigation:
  - text: Home
    url: /
  - text: About
    url: /about/
  - text: Style Guide
    url: /style-guide/
  - text: Tags
    url: /tags/
  - text: Download
    url: https://github.com/JustGoodThemes/Scriptor-Jekyll-Theme
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since this is the array of items, we will use type &lt;code&gt;list&lt;/code&gt;. Each navigation item is described by text and url fields and to model navigation items we will use type &lt;code&gt;object&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# stackbit.yaml

- type: list
  name: navigation
  label: Header Navigation
  items:
    type: object
    labelField: text
    fields:
      - type: string
        name: text
        label: Title
        required: true
      - type: string
        name: url
        label: URL
        required: true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we have the list of plugins the theme uses:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Plugins
plugins:
  - jekyll-paginate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since this is the array, we will use type &lt;code&gt;list&lt;/code&gt; again, and to model the plugin items we specify type &lt;code&gt;string&lt;/code&gt; as this is a simple list of strings:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- type: list
  name: plugins
  label: Plugins
  items:
    type: string
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have the site footer and Sass configuration options left:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Site footer
footer:
  content: &quot;&amp;#x26;copy; Scriptor all rights reserved. Theme by [JustGoodThemes](https://www.justgoodthemes.com).&quot;
  has_social: true
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# Sass
sass:
  sass_dir: _sass
  style: compressed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To model them, we use already familiar type &lt;code&gt;object&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- type: object
  name: footer
  label: Footer Configuration
  fields:
    - type: markdown
      name: content
      label: Footer Content
      description: The copyright text displayed in the footer.
    - type: boolean
      name: has_social
      label: Enable social links?
      default: true
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;- type: object
  name: sass
  label: Sass Configuration
  hidden: true
  fields:
    - type: string
      name: sass_dir
      label: Sass Files Directory
    - type: string
      name: style
      label: Style
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One thing to note regarding the Sass field model, I&apos;ve added the &lt;code&gt;hidden: true&lt;/code&gt; field since I want this option to be hidden in CMS. This option is not important and I don&apos;t want to overwhelm theme users with too many choices.&lt;/p&gt;
&lt;h3&gt;Create Models for _data Directory Contents&lt;/h3&gt;
&lt;p&gt;In the &lt;code&gt;_data&lt;/code&gt; directory of the theme we have two files — author.json and social.json. Let&apos;s start with author.json that contains the author data:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &quot;name&quot;: &quot;John Doe&quot;,
  &quot;bio&quot;: &quot;John is a designer, photographer, speaker, author of a couple of books about typography and the founder of photo magazine Curious.&quot;,
  &quot;url&quot;: &quot;http://justgoodthemes.com&quot;,
  &quot;location&quot;: &quot;Vilnius, Lithuania&quot;,
  &quot;image&quot;: &quot;/images/author.png&quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&apos;s create a content model for it by specifying the type of the model, file path relative to the &lt;code&gt;_data&lt;/code&gt; directory and the label:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;author:
  type: data
  file: &quot;_data/author.json&quot;
  label: Author
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we add the fields:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;author:
  type: data
  file: &quot;_data/author.json&quot;
  label: Author
  fields:
    - type: string
      name: name
      label: Name
      description: The name of the author.
    - type: markdown
      name: bio
      label: Bio
      description: The short bio of the author.
    - type: string
      name: url
      label: URL
      description: The URL of the author.
    - type: string
      name: location
      label: Location
      description: The location of the author.
    - type: image
      name: image
      label: Avatar
      description: The profile image of the author.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We specify the necessary types for our field models to let CMS know what kind of data it is and what to do with that data. For instance, we use &lt;code&gt;image&lt;/code&gt; for the author avatar to create an image upload widget and &lt;code&gt;markdown&lt;/code&gt; for the author bio to create a rich text input that will be run through markdownify filter.&lt;/p&gt;
&lt;p&gt;Similarly we create the model for social.json.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;social:
  type: data
  file: &quot;_data/social.json&quot;
  label: Social Links
  fields:
    - type: list
      name: links
      label: Link
      description: A list of social links displayed in the footer.
      items:
        type: object
        labelField: title
        fields:
          - type: string
            name: title
            label: Title
            description: The title of the icon.
          - type: string
            name: icon
            label: Icon
            description: Font Awesome icon class name.
            required: true
          - type: string
            name: url
            label: URL
            description: The URL to your social profile.
            widget: url
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Create Model for Posts&lt;/h3&gt;
&lt;p&gt;Next, we will create the content model for our theme posts. This time we don&apos;t need to map a specific file or page, but instead we need to create a reusable abstraction &lt;code&gt;posts&lt;/code&gt; as all our posts have the same front matter. Here is how the front matter from the post looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
layout: post
title: &quot;The Advantages &amp;#x26; Disadvantages of Working from Home&quot;
description: &quot;A work at home parent is an entrepreneur who works from home and integrates parenting into his or her business activities.&quot;
date: 2019-01-01
feature_image: images/desk.jpg
tags: [tips, work]
---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&apos;s create a content model for it. We will follow the same pattern as in previous content models, just this time we will use the page content model and additionally specify &lt;code&gt;template: post&lt;/code&gt; to tell CMS what kind of template will be used for this model and &lt;code&gt;folder: _posts&lt;/code&gt; to tell where our posts are located.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;post:
  type: page
  label: Post
  template: post
  folder: _posts
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now under the &lt;code&gt;fields&lt;/code&gt; key we will define all the data from the post front matter:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;post:
  type: page
  label: Post
  template: post
  folder: _posts
  fields:
    - name: title
      type: string
      label: Title
      description: The title of the post
      required: true
    - name: description
      type: string
      label: Description
      description: The description used in meta tags.
    - name: date
      type: date
      label: Date
      description: The publish date of the post.
      required: true
    - name: feature_image
      type: image
      label: Feature image
      description: The featured image of the post.
    - name: tags
      type: list
      label: Tags
      items:
        type: string
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Create Model for Pages&lt;/h3&gt;
&lt;p&gt;Next, we will create a reusable model for theme pages. It will be similar to the posts model, just this time we don&apos;t need to specify the folder where the pages are as they are stored in the theme root directory and the front matter doesn&apos;t have fields like tags and date. Let&apos;s look at the front matter of the theme pages:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
layout: page
title: About this blog
description: An optional about page for Scriptor Jekyll theme
feature_image: images/about.jpg
---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the model for this front matter will be:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;page:
  type: page
  label: Page
  template: page
  fields:
    - type: string
      name: title
      label: Title
      description: The title of the page.
      required: true
    - type: string
      name: description
      label: Description
      description: The description used in meta tags.
    - name: feature_image
      type: image
      label: Feature image
      description: The featured image of the page.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Create Model for the Tags Page&lt;/h3&gt;
&lt;p&gt;Since our tag page uses different layout we have to create a separate model for it. Here is how the front matter for the tag page looks:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
layout: tags
title: Tags
description: A tags page for Scriptor Jekyll theme
---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&apos;s define the model for it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tags:
  type: page
  label: Tags Page
  template: tags
  file: tags.md
  hideContent: true
  singleInstance: true
  fields:
    - type: string
      name: title
      label: Title
      required: true
    - type: string
      name: description
      label: Description
      description: The description used in meta tags.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The model is the very similar to the one we defined for the theme pages, it just has few additional fields. Since there can be only one instance of tag pages, we specify &lt;code&gt;singleInstance: true&lt;/code&gt;. If &lt;code&gt;singleInstance&lt;/code&gt; is set to true, we need to specify the file as well, i.e. &lt;code&gt;file: tags.md&lt;/code&gt;. Also, as this page doesn&apos;t have markdown content, we specify &lt;code&gt;hideContent: true&lt;/code&gt; to hide the content input in the CMS.&lt;/p&gt;
&lt;h3&gt;Create Model the Error 404 Page&lt;/h3&gt;
&lt;p&gt;We will finish page models with the 404 page. This is the front matter from the 404 page:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
layout: page
title: Page Not Found
permalink: /404.html
feature_image: images/404.jpg
---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we will create a new page model &quot;notfound&quot; and specify the necessary fields like in previous models:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;notfound:
  type: page
  label: 404 Page
  singleInstance: true
  file: 404.md
  template: page
  fields:
    - type: string
      name: title
      label: Title
      description: The title of the page.
      required: true
    - type: string
      name: description
      label: Description
      description: The description used in meta tags.
    - name: feature_image
      type: image
      label: Feature image
      description: The featured image of the page.
    - type: string
      name: permalink
      label: Permalink
      description: The permalink of the page.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Validate Our Theme with the Stackbit CLI Validator&lt;/h2&gt;
&lt;p&gt;Now when we have defined all content models for our theme, let&apos;s run the validator again (&lt;code&gt;unibit validate&lt;/code&gt;) and check if we haven&apos;t missed anything.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Validating Model
✔ loading stackbit.yaml
✔ validating stackbit.yaml fields
✔ models.config
✔ models.author
✔ models.social
✔ models.post
✔ models.page
✔ models.tags
✔ models.notfound

Loading Theme
ssgName: jekyll

Site Configuration
  stackbitVersion: &quot;~0.2.0&quot;
  ssgName: &quot;jekyll&quot;
  buildCommand: &quot;gem install jekyll bundler &amp;#x26;&amp;#x26; bundle install &amp;#x26;&amp;#x26; bundle exec jekyll build&quot;
  publishDir: &quot;_site&quot;
  staticDir: &quot;&quot;
  dataDir: &quot;&quot;
  pagesDir: &quot;&quot;
  pageLayoutKey: &quot;layout&quot;
...

Validating Data
✔ _config.yml
✔ author.json
✔ social.json

Validating Pages
✔ matching pages to models
✔ notfound ⇔ 404.md
✔ post ⇔ _posts/2019-01-01-the-advantages-and-disadvantages-of-working-from-home.md
✔ post ⇔ _posts/2019-01-02-set-up-your-new-iphone-6-the-Right-Way.md
✔ post ⇔ _posts/2019-01-03-basic-rules-for-walking-in-the-mountains.md
✔ post ⇔ _posts/2019-01-04-a-week-with-the-apple-watch.md
✔ post ⇔ _posts/2019-01-05-Graphic-Designer-On-The-Road.md
✔ page ⇔ about.md
✔ page ⇔ style-guide.md
✔ tags ⇔ tags.md

ℹ All OK
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our theme has passed the validation and now we are ready to import it into Stackbit.&lt;/p&gt;
&lt;h2&gt;Import the Converted Theme to Stackbit and Connect to a CMS of Your Choice&lt;/h2&gt;
&lt;p&gt;Visit &lt;a href=&quot;https://app.stackbit.com/create&quot;&gt;https://app.stackbit.com/create&lt;/a&gt; and import your theme.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1567335212-import-theme-to-stackbit.png&quot; alt=&quot;Import theme to Stackbit.com&quot;&gt;&lt;/p&gt;
&lt;p&gt;Stackbit will check the theme again, and if everything is OK, you can select the CMS you want and let Stackbit connect your theme to the CMS and deploy it to Netlify.&lt;/p&gt;
&lt;h2&gt;Trying Out Different CMSs the Easy Way&lt;/h2&gt;
&lt;p&gt;With Stackbit and Uniform theme (a theme with the stackbit.yaml file), you can explore different CMSs quick and easy. For example, if you have never tried Dato or Contentful CMS before, you can do it now with just a few clicks and see if these CMS&apos;s are the right choice for you.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This Jekyll Uniform theme tutorial was quite long but hopefully you’ve seen that Jekyll and Stackbit make an incredible duo for spinning rapid JAMstack sites on Netlify. Don’t stop here! I encourage you to further explore &lt;a href=&quot;https://docs.stackbit.com/uniform/&quot;&gt;Uniform Themes&lt;/a&gt; and tinker with Stackbit on your own.&lt;/p&gt;
&lt;h2&gt;Further Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.stackbit.com/uniform/&quot;&gt;Uniform spec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.stackbit.com/blog/hugo-stackbit-tutorial/&quot;&gt;Tutorial: Adding Stackbit to a Hugo theme&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Tutorial: Adding Stackbit to a Hugo Theme (part 2/2)]]></title><description><![CDATA[This is part 2 of our tutorial on adding Stackbit to an existing Hugo theme. In this tutorial we will model our Hugo themes data and configuration files. We also cover some more advanced model types including Object models and object field models.]]></description><link>https://www.stackbit.com/blog/hugo-stackbit-tutorial-part-2/</link><guid isPermaLink="false">https://www.stackbit.com/blog/hugo-stackbit-tutorial-part-2/</guid><pubDate>Mon, 26 Aug 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Tutorial: Adding Stackbit to a Hugo Theme (part 2/2)&lt;/h2&gt;
&lt;p&gt;This is the second part of a 2 part tutorial on adding Stackbit to an existing Hugo theme. &lt;a href=&quot;https://www.stackbit.com/blog/hugo-stackbit-tutorial&quot;&gt;Read Tutorial Part 1&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Adding Config &amp;#x26; Data Files&lt;/h2&gt;
&lt;p&gt;In &lt;a href=&quot;https://www.stackbit.com/blog/hugo-stackbit-tutorial&quot;&gt;Part 1&lt;/a&gt; we modelled all the markdown files in our theme, but what about data and config files?&lt;/p&gt;
&lt;p&gt;Data models can be used to model any .JSON, .YAML and .TOML files located under the &lt;code&gt;dataDir&lt;/code&gt;. Depending on your theme and ssg the data might be content for your theme, data for components and also the theme configuration file.&lt;/p&gt;
&lt;h3&gt;features.json&lt;/h3&gt;
&lt;p&gt;The tutorial theme &lt;a href=&quot;https://github.com/stackbithq/uniform-hugo-tutorial&quot;&gt;https://github.com/stackbithq/uniform-hugo-tutorial&lt;/a&gt; has a list of &quot;highlights&quot; on the homepage. They are the boxes that appear at the bottom ie &quot;Free Consultation&quot; etc.&lt;/p&gt;
&lt;p&gt;These highlights use a Hugo data file located in &lt;code&gt;data/features.json&lt;/code&gt;.
The data file looks like this.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;// data/features.json

{
    &quot;highlights&quot;: [
        {
            &quot;title&quot;: &quot;Free Consultation&quot;,
            &quot;description&quot;: &quot;New clients recieve an obligation free consultation.&quot;,
            &quot;image&quot;: &quot;images/features/noun_branding_1885335.svg&quot;
        },
        {
            &quot;title&quot;: &quot;Certified Accountants&quot;,
            &quot;description&quot;: &quot;All members of our team are certified accountants.&quot;,
            &quot;image&quot;: &quot;images/features/noun_The Process_1885341.svg&quot;
        },
        {
            &quot;title&quot;: &quot;Tax Compliance&quot;,
            &quot;description&quot;: &quot;We stay up to date on the latest changes to the tax code.&quot;,
            &quot;image&quot;: &quot;images/features/noun_3d modeling_1885342.svg&quot;
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;features.json contains a highlights object, which contains an array of objects. We are going to use a &lt;a href=&quot;https://docs.stackbit.com/uniform/field-models/#list_field_type&quot;&gt;list field type&lt;/a&gt; with a nested &lt;a href=&quot;https://docs.stackbit.com/uniform/field-models/#object_field&quot;&gt;object field type&lt;/a&gt; to model this data.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;features:
    type: data
    label: Features
    file: features.json
    fields:
        - type: list
          name: highlights
          items:
              type: object
              label: Highlight
              labelField: title
              fields:
                  - type: string
                    name: title
                    label: Title
                  - type: string
                    name: description
                    label: Description
                  - type: image
                    name: image
                    label: Icon
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Data models follow a very similiar format to page models but importantly they use &lt;code&gt;type: data&lt;/code&gt; instead of &lt;code&gt;type: page&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Earlier in the tutorial we set the &lt;code&gt;dataDir&lt;/code&gt; to &lt;code&gt;dataDir: exampleSite&lt;/code&gt; (at the top of our stackbit.yaml). When we match a data model to the file it&apos;s going to be relative to this directory. So in this case we use the matching open &lt;code&gt;file: features.json&lt;/code&gt; to match the data file.&lt;/p&gt;
&lt;h3&gt;contact.yaml&lt;/h3&gt;
&lt;p&gt;.yaml files are also valid data sources. Here is the data model for &lt;code&gt;data/contact.yaml&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  contact:
    type: data
    label: Contact Info
    file: contact.yaml
    fields:
      - type: string
        name: email
        label: Email
      - type: string
        name: phone
        label: Phone
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Configuration Files&lt;/h2&gt;
&lt;p&gt;Most ssgs have a configuration file. Stackbit treats config files as normal data models. Here is the data model for the themes config file located at &lt;code&gt;exampleSite/config.yaml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This code example does not yet include the menus.&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;config:
    type: data
    label: Config
    file: config.toml
    fields:
        - type: string
          name: title
          label: Title
          required: true
        - type: string
          name: baseURL
          label: Base URL
          description: Hostname (and path) to the root
          hidden: true
        - type: string
          name: languageCode
          label: Language Code
          hidden: true
        - type: string
          name: themesDir
          label: Themes Directory
          hidden: true
        - type: string
          name: theme
          label: Theme Name
          hidden: true
        - type: object
          name: params
          label: Params
          description: Site parameters
          required: true
          fields:
              - type: string
                name: google_analytics_id
                label: Google Analytics ID
              - type: string
                name: google_tag_manager_id
                label: Google Tag Manager ID
              - type: object
                name: logo
                label: Params Logo
                fields:
                    - type: image
                      name: standard
                      label: Logo Desktop
                      description: the path of the desktop logo image
                      required: true
                    - type: image
                      name: mobile
                      label: Logo Mobile
                      description: the path of the mobile logo image
                    - type: string
                      name: alt
                      label: Logo Alt Text
              - type: object
                name: homepage_meta_tags
                label: Homepage Metatags
                fields:
                    - type: string
                      name: meta_description
                      label: meta_description
                    - type: string
                      name: meta_og_title
                      label: meta_og_title
                    - type: string
                      name: meta_og_type
                      label: meta_og_type
                    - type: string
                      name: meta_og_url
                      label: meta_og_url
                    - type: string
                      name: meta_og_image
                      label: meta_og_image
                    - type: string
                      name: meta_og_description
                      label: meta_og_description
                    - type: string
                      name: meta_twitter_card
                      label: meta_twitter_card
                    - type: string
                      name: meta_twitter_site
                      label: meta_twitter_site
                    - type: string
                      name: meta_twitter_creator
                      label: meta_twitter_creator
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Modelling Hugo Menus&lt;/h3&gt;
&lt;p&gt;This theme has 2 menus. &lt;code&gt;main&lt;/code&gt; and &lt;code&gt;footer&lt;/code&gt; which can be viewed in the &lt;code&gt;config.yaml&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# exampleSite/config.yaml

...

[menu]
  # Main Menu
  [[menu.main]]
    name = &quot;Services&quot;
    url = &quot;/services/&quot;
      weight = 1

  [[menu.main]]
      name = &quot;Team&quot;
      url = &quot;/team/&quot;
      weight = 2

  # Footer Menu
  [[menu.footer]]
    name = &quot;Home&quot;
    url = &quot;/&quot;
      weight = 1

  [[menu.footer]]
    name = &quot;Contact&quot;
    url = &quot;/contact/&quot;
      weight = 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we are going to use a &lt;a href=&quot;https://docs.stackbit.com/uniform/object-models/&quot;&gt;Object Model&lt;/a&gt;. Ie a content model of &lt;code&gt;type: object&lt;/code&gt; and we are going to reference it using an &lt;a href=&quot;https://docs.stackbit.com/uniform/field-models/#object_model_field&quot;&gt;Object Model Field&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# stackbit.yaml
...
models:
  ...
  site_menus:
    type: object # object model
    label: Site Menus
    fields:
      - type: list
        name: main
        label: Main menu
        description: List of items for Main menu
        items:
          type: site_menu_item
      - type: list
        name: footer
        label: Footer menu
        description: List of items for Footer menu
        items:
          type: site_menu_item
  site_menu_item:
    type: object
    label: Site Menu Item
    labelField: name
    fields:
      - type: string
        name: identifier
        label: Identifier
      - type: string
        name: name
        label: Title
        description: The title of the menu item
        required: true
      - type: string
        name: url
        label: URL
        description: The URL the menu item links to
        required: true
      - type: number
        name: weight
        label: Weight
        description: Position for sorting
      - type: string
        name: parent
        label: Parent Menu Identifier
        description: The parent of an entry should be the identifier of another entry.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We&apos;ve created 2 object models. &quot;site&lt;em&gt;menus&quot; is a list of menu objects. It includes Main Menu and Footer Menu, which include an object model reference to &quot;site&lt;/em&gt;menu_items&quot;.&lt;/p&gt;
&lt;p&gt;&quot;site&lt;em&gt;menu&lt;/em&gt;items&quot; is a single object, with the 4 fields that are used in a Hugo menu item.&lt;/p&gt;
&lt;p&gt;Now in the CMS you can add new top level Menus ie Sidebar Menu, and you can add, edit and delete individual menu items from existing menus.&lt;/p&gt;
&lt;p&gt;Finally we need to add a reference to &quot;site_menus&quot; to the data model for &lt;code&gt;config.yaml&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# stackbit.yaml
...
models:
  ...
  config:
    ...
    - type: site_menus # references the object model we created in the previous step
      name: menu
      label: Menus
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;Now we&apos;ve modelled both the themes pages and data. The Uniform theme conversion is complete.&lt;/p&gt;
&lt;p&gt;Visit &lt;a href=&quot;https://app.stackbit.com/create&quot;&gt;https://app.stackbit.com/create&lt;/a&gt; and import your theme again.&lt;/p&gt;
&lt;h2&gt;Documentation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The full Uniform spec is available in our docs &lt;a href=&quot;https://docs.stackbit.com/uniform/&quot;&gt;https://docs.stackbit.com/uniform/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The code for this tutorial is available on our Github &lt;a href=&quot;https://github.com/stackbithq/uniform-hugo-tutorial&quot;&gt;https://github.com/stackbithq/uniform-hugo-tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Tutorial: Adding Stackbit to a Hugo theme (part 1/2)]]></title><description><![CDATA[In this tutorial I'm going to walk you through converting an open source Hugo theme into a Stackbit Uniform theme. You can do this with any Hugo site and once it's done you can import the theme into Stackbit, connect it to a headless CMS and deploy to Netlify in just 1 click.]]></description><link>https://www.stackbit.com/blog/hugo-stackbit-tutorial/</link><guid isPermaLink="false">https://www.stackbit.com/blog/hugo-stackbit-tutorial/</guid><pubDate>Wed, 14 Aug 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;&lt;strong&gt;Adding Stackbit to a Hugo theme&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Stackbit recently announced &lt;a href=&quot;https://www.stackbit.com/blog/announcing-custom-themes-and-so-much-more/&quot;&gt;Custom Themes&lt;/a&gt;. Stackbit already has lots of pre-built themes to choose from but what if you want to use your own theme? Or use a theme built on a static site generator that isn&apos;t currently supported by Stackbit? That&apos;s where custom themes comes in.&lt;/p&gt;
&lt;p&gt;Before you start you can try importing the final version of the theme we are going to recreate. Click this link: &lt;a href=&quot;https://app.stackbit.com/create?theme=https://github.com/JugglerX/hugo-serif-theme&quot;&gt;https://app.stackbit.com/create?theme=https://github.com/JugglerX/hugo-serif-theme&lt;/a&gt; - Magic!&lt;/p&gt;
&lt;h2&gt;Quick Overview&lt;/h2&gt;
&lt;p&gt;In this tutorial I&apos;m going to use this Github repo as a reference. &lt;a href=&quot;https://github.com/stackbithq/uniform-hugo-tutorial&quot;&gt;https://github.com/stackbithq/uniform-hugo-tutorial&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We are going to use this theme as a base. This is a regular Hugo theme without Stackbit added. We are going to convert it to a Uniform theme using the following process.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add a &lt;code&gt;stackbit.yaml&lt;/code&gt; file with a basic configuration&lt;/li&gt;
&lt;li&gt;Define &lt;a href=&quot;https://docs.stackbit.com/uniform/page-models/&quot;&gt;page models&lt;/a&gt; and &lt;a href=&quot;https://docs.stackbit.com/uniform/content-models/&quot;&gt;field models&lt;/a&gt; for our markdown files and define &lt;a href=&quot;https://docs.stackbit.com/uniform/data-models/&quot;&gt;data models&lt;/a&gt; for the config.toml and JSON data files in the &lt;code&gt;data&lt;/code&gt; folder.&lt;/li&gt;
&lt;li&gt;Use the Stackbit CLI validator tool to help test and debug.&lt;/li&gt;
&lt;li&gt;Import the converted theme it into Stackbit and connect a CMS.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Download the repo&lt;/h3&gt;
&lt;p&gt;Fork the repo at &lt;code&gt;https://github.com/stackbithq/uniform-hugo-tutorial&lt;/code&gt; to your own Github. Clone it down to your local.&lt;/p&gt;
&lt;h3&gt;Do a dummy import into Stackbit.&lt;/h3&gt;
&lt;p&gt;Using your forked repo, let&apos;s try and import the theme into Stackbit without any modifications.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Signup or Login to Stackbit.com&lt;/li&gt;
&lt;li&gt;Visit the custom theme importer - &lt;a href=&quot;https://app.stackbit.com/create&quot;&gt;https://app.stackbit.com/create&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Paste your Github repo&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At this point you will see the validator fails.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1565753960-no-stackbit-file.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;Lets go ahead and add the stackbit.yaml&lt;/p&gt;
&lt;h2&gt;Create a stackbit.yaml file&lt;/h2&gt;
&lt;p&gt;Create a new file called &lt;code&gt;stackbit.yaml&lt;/code&gt; in the projects root (same level as the README.md) and add the following fields.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;stackbitVersion: ~0.2.0
ssgName: custom
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since we are importing our own custom theme, we need to set the &lt;code&gt;ssgName&lt;/code&gt; field to &lt;code&gt;custom&lt;/code&gt; - If you don&apos;t set this the convertor will attempt to use default values which are not suitable for a Hugo theme.&lt;/p&gt;
&lt;p&gt;Commit and push this change to you Github repo. Try and import the theme into Stackbit again. The stackbit.yaml file will now be found, but you will encounter a variety of validator errors. Progress.&lt;/p&gt;
&lt;h3&gt;Install the validator&lt;/h3&gt;
&lt;p&gt;Instead of each time having to import the theme into Stackbit there is a faster way to test our theme. Install the &lt;a href=&quot;https://docs.stackbit.com/unibit/unibit-cli/&quot;&gt;Unibit CLI&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install -g @stackbit/unibit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can validate the theme locally. Run the following command from the directory containing the stackbit.yaml.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;unibit validate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The CLI validator also provides more robust errors and hints. You can see that we are missing quite a few required fields in the stackbit.yaml.&lt;/p&gt;
&lt;h3&gt;Add required fields to the stackbit.yaml&lt;/h3&gt;
&lt;p&gt;Read the &lt;a href=&quot;https://docs.stackbit.com/uniform/stackbit-yaml&quot;&gt;stackbit.yaml documentation&lt;/a&gt; for information on the available fields.&lt;/p&gt;
&lt;p&gt;Go ahead and add the following fields to the stackbit.yaml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;stackbitVersion: ~0.2.0
ssgName: custom
publishDir: exampleSite/public
buildCommand: cd exampleSite &amp;#x26;&amp;#x26; hugo --gc --baseURL &quot;/&quot; --themesDir ../.. &amp;#x26;&amp;#x26; cd ..
uploadDir: images
staticDir: exampleSite/static
pagesDir: exampleSite/content
dataDir: exampleSite
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;pagesDir is required. It tells Stackbit where to look for markdown files. Typically the markdown files are turned into your sites pages, blog posts etc. In this theme the .md files are located inside of &lt;code&gt;exampleSite/content&lt;/code&gt; so let&apos;s set &lt;code&gt;pagesDir: exampleSite/content&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you install a Hugo theme as a &quot;sub theme&quot; then you probably wouldn&apos;t have the exampleSite folder here. Modify your paths to these folders accordingly.&lt;/p&gt;
&lt;p&gt;Re-run the validator.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;unibit validate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All the basic required fields should be validating, and it&apos;s now attempting to load the first pages and match them with content models. So you should be seeing an error at the &quot;Validating Pages&quot; step now.&lt;/p&gt;
&lt;h2&gt;Adding Content Models&lt;/h2&gt;
&lt;p&gt;For a CMS to edit your site it needs to understand the content in a structured format that can be mapped to a database and or GUI interface.&lt;/p&gt;
&lt;p&gt;In the stackbit.yaml we are going to write our first &lt;a href=&quot;https://docs.stackbit.com/uniform/content-models/&quot;&gt;content models&lt;/a&gt;. Content models can be either &lt;a href=&quot;https://docs.stackbit.com/uniform/page-models/&quot;&gt;page models&lt;/a&gt; or &lt;a href=&quot;https://docs.stackbit.com/uniform/data-models/&quot;&gt;data models&lt;/a&gt;. Typically page models are markdown files with front-matter and data models are JSON/YAML/TOML files. Both page models and data models may have nested &lt;a href=&quot;https://docs.stackbit.com/uniform/field-models/&quot;&gt;field models&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Add a &lt;code&gt;models&lt;/code&gt; field to the stackbit.yaml. All page and data models are nested under this field.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;stackbitVersion: ~0.2.0
ssgName: custom
publishDir: exampleSite/public
buildCommand: cd exampleSite &amp;#x26;&amp;#x26; hugo --gc --baseURL &quot;/&quot; --themesDir ../.. &amp;#x26;&amp;#x26; cd ..
uploadDir: images
staticDir: exampleSite/static
pagesDir: exampleSite/content
dataDir: exampleSite
models:
    ...
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Page Models&lt;/h3&gt;
&lt;p&gt;Take a look at the themes content folder located in &lt;code&gt;exampleSite/content&lt;/code&gt; It contains several markdown files, some are in folders. Some of these markdown files use particular layouts and have different front-matter.&lt;/p&gt;
&lt;p&gt;We need to provide page models for all of the files. A page model is not required for each individual file, but to create logical groupings that represent &quot;content types&quot;&lt;/p&gt;
&lt;h3&gt;404 page model&lt;/h3&gt;
&lt;p&gt;Let&apos;s add the first page model for the 404 page.&lt;/p&gt;
&lt;p&gt;Inside of &lt;code&gt;models&lt;/code&gt; field create a new &lt;a href=&quot;https://docs.stackbit.com/uniform/page-models/&quot;&gt;page model&lt;/a&gt; with the name &quot;pagenotfound&quot;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;models:
    pagenotfound:
        type: page
        label: &apos;404&apos;
        file: 404/_index.md
        hideContent: true
        singleInstance: true
        fields:
          - type: string
            name: title
            label: Title
            description: The title of the page.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We defined a page model called &quot;pagenotfound&quot;. You can use whatever name you like for the top level key. The content model type is specified by &lt;code&gt;type: page&lt;/code&gt;. The label is used to help identify the page type in the CMS. In the case of the 404 page, there is only 1 page of this type in the theme, so we used &lt;code&gt;file: 404/_index.md&lt;/code&gt; to point to a single file. Since it is a single file we set &lt;code&gt;singleInstance: true&lt;/code&gt;, this let&apos;s the CMS know we can&apos;t create more of these pages and it also prevents the validator from trying to re-match this file if other page models use glob matching.&lt;/p&gt;
&lt;p&gt;Inside of the page model are the &lt;a href=&quot;https://docs.stackbit.com/uniform/field-models/&quot;&gt;field models&lt;/a&gt; which are defined under the &lt;code&gt;fields&lt;/code&gt; key. You must define a field model for each front-matter field in the markdown file. In this case we define one field model for the &quot;title&quot; which is of the type string. This will create a text input field in the CMS.&lt;/p&gt;
&lt;p&gt;Run the validator and the 404 page should pass.&lt;/p&gt;
&lt;h3&gt;Homepage page model&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;    home:
        type: page
        label: Home
        file: _index.md
        hideContent: false
        singleInstance: true
        fields:
          - type: string
            name: title
            label: Title
            description: The title of the page.
            required: true
          - type: image
            name: intro_image
            label: Intro Image
            description: Image displayed at in the pages intro section
          - type: boolean
            name: intro_image_absolute
            label: Overflow intro image
            description: Should the image overflow or be contained
          - type: boolean
            name: intro_image_hide_on_mobile
            label: Hide the intro image on mobile
            description: Hide the intro image on mobile screen sizes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The homepage is similar to the 404. It&apos;s a singleInstance page model which has a few extra fields.&lt;/p&gt;
&lt;p&gt;There are few new field model types. &lt;code&gt;image&lt;/code&gt; and &lt;code&gt;boolean&lt;/code&gt;. image type creates a file upload widget in the CMS and boolean creates a checkbox or toggle widget.&lt;/p&gt;
&lt;h3&gt;Basic pages model&lt;/h3&gt;
&lt;p&gt;Next we will model the About Us &lt;code&gt;exampleSite/content/about.md&lt;/code&gt; and Contact Us &lt;code&gt;exampleSite/content/contact.md&lt;/code&gt; pages.&lt;/p&gt;
&lt;p&gt;Things get a little more interested here. We want to be able to create new basic pages in the CMS, for example a good ol &quot;privacy policy&quot; page. So instead of modelling a specific file, we are creating an abstraction of a reusable &quot;basic page&quot;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;basicpage:
    type: page
    label: Basic Page
    match: &apos;*.md&apos;
    exclude: _index.md
    fields:
      - type: string
        name: title
        label: Title
        description: The title of the page.
      - type: date
        name: date
        label: Date
      - type: string
        name: layout
        label: layout
      - type: string
        name: menu
        label: Menu
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The main difference with this page model is the &lt;code&gt;match&lt;/code&gt; and &lt;code&gt;exclude&lt;/code&gt; fields. Instead of using &lt;code&gt;file&lt;/code&gt;, we use match and exclude which allow us to glob match any files that meet particular requirements. In this case we want to target any file in the top level content folder except for the &lt;code&gt;_index.md&lt;/code&gt; (which is the homepage and has a different page model)&lt;/p&gt;
&lt;p&gt;There is a new field type of &lt;code&gt;date&lt;/code&gt; which creates a date picker widget in the CMS.&lt;/p&gt;
&lt;h3&gt;Services page model (services list)&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;services:
    type: page
    label: Services Overview
    file: services/_index.md
    singleInstance: true
    fields:
      - type: string
        name: title
        label: Title
        description: The title of the page.
        required: true
      - type: image
        name: intro_image
        label: Intro Image
        description: Image displayed at in the pages intro section
      - type: boolean
        name: intro_image_absolute
        label: Intro Image Position
        description: Should the image overflow or be contained
      - type: boolean
        name: intro_image_hide_on_mobile
        label: Intro Image Hide On Mobile
        description: Hide the intro image on mobile screen sizes
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Service page model (single service pages)&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;service:
    type: page
    label: Service
    folder: services
    fields:
      - type: string
        name: title
        label: Title
      - type: date
        name: date
        label: Date
      - type: image
        name: image
        label: Image
      - type: boolean
        name: draft
        label: Draft
      - type: boolean
        name: featured
        label: Featured
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The service pages live in &lt;code&gt;services&lt;/code&gt; folder along with the &lt;code&gt;_index.md&lt;/code&gt; used by the services page model. In the basicpage page model we used &lt;code&gt;exclude: _index.md&lt;/code&gt; too explicitly exclude the _index.md. That&apos;s an option here as well but because we set &lt;code&gt;singleInstance: true&lt;/code&gt; on the services page model that file is automatically removed from the possible matches. So in this case we don&apos;t have to exclude _index.md. Both approaches are OK.&lt;/p&gt;
&lt;h3&gt;Teams page model (team list)&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;  teams:
    type: page
    label: Team Overview
    file: team/_index.md
    singleInstance: true
    fields:
      - type: string
        name: title
        label: Title
        description: The title of the page.
        required: true
      - type: image
        name: intro_image
        label: Intro Image
        description: Image displayed at in the pages intro section
      - type: boolean
        name: intro_image_absolute
        label: Intro Image Position
        description: Should the image overflow or be contained
      - type: boolean
        name: intro_image_hide_on_mobile
        label: Intro Image Hide On Mobile
        description: Hide the intro image on mobile screen sizes
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Team page model (team single)&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;team:
    type: page
    label: Team
    folder: team
    exclude: _index.md
    fields:
      - type: string
        name: title
        label: Title
      - type: date
        name: date
        label: Date
      - type: image
        name: image
        label: Image
      - type: string
        name: jobtitle
        label: Job Title
      - type: string
        name: linkedinurl
        label: Linkedin URL
      - type: boolean
        name: draft
        label: Draft
      - type: boolean
        name: featured
        label: Featured
      - type: number
        name: weight
        label: Weight
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Validating Page Models&lt;/h2&gt;
&lt;p&gt;Now we have defined page models for all of our content let&apos;s run the validator again and just check in.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;unibit validate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The validator takes all of the files it finds inside of the &lt;code&gt;pagesDir&lt;/code&gt; and attempts to find a matching page model inside the &lt;code&gt;models&lt;/code&gt; field. If the validator finds a file with no matching page model defined in the stackbit.yaml it will throw an error.&lt;/p&gt;
&lt;p&gt;If all files have an associated page model it will proceed to validate the field models inside each.&lt;/p&gt;
&lt;p&gt;At this stage you should be seeing a few field level validation errors.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Validating Pages
✔ matching pages to models
✔ pagenotfound ⇔ 404/_index.md
✔ home ⇔ _index.md
✔ basicpage ⇔ about.md
✔ basicpage ⇔ contact.md
✔ services ⇔ services/_index.md
✖ service ⇔ services/accounting.md
  → [weight] &quot;weight&quot; is not allowed
✔ service ⇔ services/business-advisory.md
✔ service ⇔ services/business-sales.md
✔ service ⇔ services/mergers.md
✔ service ⇔ services/superannuation.md
✖ service ⇔ services/tax-preperation.md
  → [weight] &quot;weight&quot; is not allowed
✔ teams ⇔ team/_index.md
✔ team ⇔ team/peter-van-eijk.md
✔ team ⇔ team/sage-kirk.md

⚠ 2 errors found
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It looks like we&apos;ve missed a field definition for the front-matter field &quot;weight&quot; in the service page model.&lt;/p&gt;
&lt;p&gt;Update the service page model and add the weight field.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  service:
    type: page
    label: Service
    folder: services
    fields:
      ...
      - type: number
        name: weight
        label: Weight
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Ready To Import&lt;/h2&gt;
&lt;p&gt;We&apos;ve modelled all of the pages in our theme.&lt;/p&gt;
&lt;p&gt;Visit &lt;a href=&quot;https://app.stackbit.com/create&quot;&gt;https://app.stackbit.com/create&lt;/a&gt; and import your theme.&lt;/p&gt;
&lt;p&gt;There is still more work to do modelling our config and data files but we can leave that for now. You do not have to model data for the theme to import and work with Stackbit. It just means these files will not yet be editable in the CMS.&lt;/p&gt;
&lt;h2&gt;Choose a CMS and deploy!&lt;/h2&gt;
&lt;p&gt;You can choose to connect to any CMS at this point. For now let&apos;s try DatoCMS. Choose DatoCMS and click &quot;connect accounts&quot;. You will need a DatoCMS account, but it should prompt you authenticate or signup or in-app. Once you&apos;ve connected DatoCMS click &quot;create your project&quot;&lt;/p&gt;
&lt;p&gt;Stackbit is now going to convert and build the theme for DatoCMS and deploy it to Netlify.&lt;/p&gt;
&lt;p&gt;Once the site is built you can login to DatoCMS and explore the CMS. Go ahead, edit some of the fields or the content. These changes will be published to your live Netlify site.&lt;/p&gt;
&lt;h2&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;That&apos;s the first stage to importing a 3rd party Hugo theme into Stackbit. In the next tutorial I&apos;ll cover modelling the data and config files and exploring some more advanced field models including object references to better model our menus.&lt;/p&gt;
&lt;h3&gt;Documentation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The full Uniform spec is available in our docs &lt;a href=&quot;https://docs.stackbit.com/uniform/&quot;&gt;https://docs.stackbit.com/uniform/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The code for this tutorial is available on our Github &lt;a href=&quot;https://github.com/stackbithq/uniform-hugo-tutorial&quot;&gt;https://github.com/stackbithq/uniform-hugo-tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Tutorial Part 2&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.stackbit.com/blog/hugo-stackbit-tutorial-part-2&quot;&gt;Tutorial: Adding Stackbit to a Hugo theme (Part 2/2)&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Announcing Custom Themes And So Much More]]></title><description><![CDATA[Today we're announcing the ability to bring your own themes into Stackbit coupled with a new 'Create With Stackbit' button that turns themes into CMS-powered websites, all in an even smoother and quicker flow.]]></description><link>https://www.stackbit.com/blog/announcing-custom-themes-and-so-much-more/</link><guid isPermaLink="false">https://www.stackbit.com/blog/announcing-custom-themes-and-so-much-more/</guid><pubDate>Wed, 10 Jul 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Today we&apos;re announcing the ability to &lt;strong&gt;bring your own themes&lt;/strong&gt; into Stackbit coupled with a new &lt;strong&gt;Create With Stackbit button&lt;/strong&gt; that turns themes into CMS-powered websites, all in an &lt;strong&gt;even smoother flow&lt;/strong&gt;. Additionally we&apos;re sharing early details about &lt;strong&gt;Unibit, a superset of static site generators that converts to any of them&lt;/strong&gt;, and featuring collaborations with &lt;strong&gt;CodeSandbox&lt;/strong&gt;, &lt;strong&gt;Snipcart&lt;/strong&gt; and &lt;strong&gt;Alembic&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Without further ado lets start rolling:&lt;/p&gt;
&lt;h2&gt;Uniform themes: Turn themes into CMS-powered websites&lt;/h2&gt;
&lt;p&gt;Over the past several months we kept asking early Stackbit users for feedback on the product and the top request has consistently been &lt;em&gt;let us bring our templates and themes into the platform&lt;/em&gt;. That was exciting to hear as the themes currently on Stackbit were starters that we created to demonstrate the capabilities of the platform. We&apos;re open sourcing all these starter themes today to benefit developers looking to get started with Stackbit, you can go ahead and fork any of the samples or bring in new/existing themes.&lt;/p&gt;
&lt;p&gt;Today we&apos;re opening up this capability in beta - bring your own themes into Stackbit &lt;strong&gt;no matter what static site generator they are built for&lt;/strong&gt;, you&apos;ll see it as an option on the top right corner of our project creation flow, which leads &lt;a href=&quot;https://app.stackbit.com/create?theme=custom&quot;&gt;into the following screen&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1562722446-custom-theme-in-app.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;To use a theme, grab its Github repo URL and make sure it has a stackbit.yaml file, learn more about &lt;a href=&quot;https://docs.stackbit.com/uniform/&quot;&gt;bringing your themes&lt;/a&gt; into Stackbit and the &lt;a href=&quot;https://docs.stackbit.com/uniform/stackbit-yaml/&quot;&gt;stackbit.yaml&lt;/a&gt; file in our &lt;a href=&quot;https://docs.stackbit.com/&quot;&gt;docs&lt;/a&gt;. This file enables Stackbit to do all the heavy lifting of provisioning your theme&apos;s content model with a growing selection of headless CMS and pulling the content for you in the format your static site generator expects it during build time.&lt;/p&gt;
&lt;p&gt;Your existing themes, starter kits, boilerplates? Add a stackbit.yaml file and instantly provision new CMS-powered websites from them. We can&apos;t wait to see what websites people build with all the themes out there, now that spinning up a website from a theme becomes effortless. Learn more about Uniform themes &lt;a href=&quot;https://docs.stackbit.com/uniform/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As an example we took &lt;a href=&quot;https://github.com/danurbanowicz/eleventy-netlify-boilerplate&quot;&gt;this&lt;/a&gt; nifty Eleventy boilerplate, &lt;a href=&quot;https://github.com/stackbithq/eleventy-netlify-boilerplate/commit/a8c5b3214d5aa5abe5f3ae5f0b14d3b235b9550f&quot;&gt;added&lt;/a&gt; a stackbit.yaml file and voila you can now create a CMS-powered website from it.&lt;/p&gt;
&lt;p&gt;Click this to create a website from this Eleventy boilerplate: &lt;a class=&quot;button stackbit&quot; href=&quot;https://app.stackbit.com/create?theme=https://github.com/stackbithq/eleventy-netlify-boilerplate&quot; target=&quot;_blank&quot;&gt;Create With Stackbit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hold on, what was that little button? 👇&lt;/p&gt;
&lt;h2&gt;Create With Stackbit button&lt;/h2&gt;
&lt;p&gt;We wanted to make creating CMS-powered websites even easier and more accessible so today we&apos;re also introducing the &lt;a href=&quot;https://docs.stackbit.com/create-with-stackbit/&quot;&gt;Create With Stackbit button&lt;/a&gt;. It&apos;s a direct link to the Stackbit new-project flow which allows you to preset the theme to any Github repo as well as the CMS to any of the options we support. &lt;strong&gt;Give your users, clients or company the ability to create fast, secure and low-maintenance CMS-powered websites in a single click&lt;/strong&gt; without having to learn about all the moving pieces that come together to provision modern sites.&lt;/p&gt;
&lt;p&gt;This button will create a new website based on our Azimuth theme, Gatsby and DatoCMS - &lt;a class=&quot;button stackbit&quot; href=&quot;https://app.stackbit.com/create?theme=https://github.com/stackbithq/stackbit-theme-azimuth&amp;ssg=gatsby&amp;cms=datocms&quot; target=&quot;_blank&quot;&gt;Create With Stackbit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here&apos;s another example of &lt;a href=&quot;https://darn.es/&quot;&gt;David Darnes&apos;&lt;/a&gt; popular &lt;a href=&quot;https://github.com/daviddarnes/alembic-stackbit-kit&quot;&gt;Alembic&lt;/a&gt; Jekyll theme with the &lt;em&gt;Create With Stackbit button&lt;/em&gt;. As a non-Unibit theme, the SSG will be immutably Jekyll, but the CMS is left to the user&apos;s choice - &lt;a class=&quot;button stackbit&quot; href=&quot;https://app.stackbit.com/create?theme=https://github.com/daviddarnes/alembic-stackbit-kit&quot; target=&quot;_blank&quot;&gt;Create With Stackbit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Learn more about the Create With Stackbit button &lt;a href=&quot;https://docs.stackbit.com/create-with-stackbit/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Unibit: Write once and stay SSG agnostic&lt;/h2&gt;
&lt;p&gt;When we started Stackbit we also built an internal tool that helped us create a theme once and convert it to multiple static site generators. You know how a Hugo theme is different from a Jekyll theme which is very different from say a Gatsby theme? We wanted to be able to write once and transpile to all of these targets. While still in beta, today we&apos;re releasing the spec for &lt;a href=&quot;https://docs.stackbit.com/unibit/&quot;&gt;Unibit&lt;/a&gt; - a superset of several modern static site generators that converts to any of them. All the themes you&apos;ve seen in the Stackbit new project flow were created with Unibit and that&apos;s why you can also choose any static site generator you&apos;d like to have them converted to when creating your project.&lt;/p&gt;
&lt;h3&gt;Plantly: The first e-commerce Unibit theme by Snipcart&lt;/h3&gt;
&lt;p&gt;Our friends at &lt;a href=&quot;https://snipcart.com/?utm_source=stackbit&amp;#x26;utm_medium=referral&amp;#x26;utm_campaign=stackbit&quot;&gt;Snipcart&lt;/a&gt;, a flexible e-commerce integration solution for developers that allows you to add a shopping cart to any website, have &lt;a href=&quot;https://snipcart.com/blog/stackbit&quot;&gt;created&lt;/a&gt; Planty, their newest e-commerce theme in Unibit. This allows their users to spin up a new e-commerce website in minutes, while retaining maximum flexibility with a CMS and SSG of their choice.&lt;/p&gt;
&lt;p&gt;Planty is based on Snipcart&apos;s V3.0 (currently in &lt;a href=&quot;https://snipcart-docs-v3.netlify.com/&quot;&gt;beta&lt;/a&gt;). The shopping cart has been rebuilt from the ground up, ditching jQuery, with a new JS SDK, quicker and more intuitive checkout UX and other good stuff.&lt;/p&gt;
&lt;p&gt;You can view a &lt;a href=&quot;https://stackbit-theme-planty.netlify.com/#/&quot;&gt;live demo of the theme&lt;/a&gt;, check out their &lt;a href=&quot;https://github.com/snipcart/stackbit-theme-planty&quot;&gt;open-source Unibit repo&lt;/a&gt;, or just &lt;a href=&quot;https://snipcart.com/?utm_source=stackbit&amp;#x26;utm_medium=referral&amp;#x26;utm_campaign=stackbit&quot;&gt;sign up to Snipcart&lt;/a&gt; and get your own e-commerce site live in minutes on Stackbit. You can also go ahead and instantly create a new Planty site - &lt;a class=&quot;button stackbit&quot; href=&quot;https://app.stackbit.com/create?theme=https://github.com/snipcart/stackbit-theme-planty&quot; target=&quot;_blank&quot;&gt;Create With Stackbit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1562722468-planty-theme.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;Learn more about Unibit &lt;a href=&quot;https://docs.stackbit.com/unibit/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Get started with Unibit on CodeSandbox&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://codesandbox.io/s/&quot;&gt;CodeSandbox&lt;/a&gt; is an amazing online editor tailored for web applications, that support you all the way from prototype to deployment. Starting today, it offers the ability to create and work on Unibit themes out of the box, featuring Universal, our Unibit starter theme.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1562722503-csb-unibit-1.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;Simply pick the Unibit featured option and you&apos;re ready to code in seconds:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1562722513-csb-unibit-2.png&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Improved flow - Making fast even faster&lt;/h2&gt;
&lt;p&gt;As we mentioned earlier creating smooth and powerful experiences is core to our product philosophy and as such we wanted to take something the community told us was great and try to make it even better. Here are all of the exciting improvements we&apos;re releasing to production today:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;No more waiting for invites&lt;/strong&gt; - Though still in beta anyone can now sign-up for Stackbit and &lt;a href=&quot;https://app.stackbit.com/create&quot;&gt;start using it right away&lt;/a&gt;. We previously had a beta waiting list which helped us ease the flow of incoming users and projects while we were still tweaking a lot of things but that&apos;s behind us now.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Github Sign-in&lt;/strong&gt; - Speaking of signing-in we realized that every user creating a project on Stackbit was already effectively signing in with Github. This means that even though you can still sign-up with an email/password any user coming straight into the new project flow (say from the Create With Stackbit button) will be able to go through the flow and then merely get asked to connect with Github as a means to establish a Stackbit account. We believe removing the sign-up from the start of the flow will contribute to an even smoother experience for you and your users.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Netlify anonymous deploy&lt;/strong&gt; - As if we haven&apos;t eliminated enough clicks yet here&apos;s one more shot. If you choose to connect your Netlify account in the Account Settings any new project will be created under your Netlify account. However, if you are a user coming in via the new Create With Stackbit button we&apos;ll create what&apos;s known as an anonymous Netlify project for you. This means you won&apos;t need to connect to Netlify as part of the new project flow and will have the option to later claim the Netlify project we will have created for you.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;More granular Github permissions&lt;/strong&gt; - By popular request, or some will say demand, we have revamped our Github permissions code and now support more granular permissions. You can now give Stackbit permission to create projects under your personal account as opposed to organizations you are a part of. Keep in mind that in order to do our work we, at a minimum, need to be able to create new repositories on your account/org, maintain those repos, do PR on them, setup repository hooks, etc. We will also Github for permission to access your email address because we need a way to contact you.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Wrap up&lt;/h2&gt;
&lt;p&gt;Was this all one big blog post? seems so, but we&apos;ll be writing more about most of these new capabilities in the coming weeks. We want to give a shout out to all our early users who continue to use Stackbit in creative ways and provide us with fantastic feedback. Most of the new features announced today are still very much in beta so please bare with us and &lt;a href=&quot;/contact&quot;&gt;contact us&lt;/a&gt; if there&apos;s anything we can help with.&lt;/p&gt;
&lt;p&gt;Thanks,&lt;/p&gt;
&lt;p&gt;The Stackbit team&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Migrating From Medium - A Developer's Guide]]></title><description><![CDATA[The large migration from Medium has led to the creation of many useful tools to help you accomplish that. Including Stackbit's tool which is now open source]]></description><link>https://www.stackbit.com/blog/migrating-from-medium-a-developers-guide/</link><guid isPermaLink="false">https://www.stackbit.com/blog/migrating-from-medium-a-developers-guide/</guid><pubDate>Tue, 28 May 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;The tools available today rely mostly on the following methods of obtaining your content from Medium:&lt;/p&gt;
&lt;h2&gt;RSS Feeds&lt;/h2&gt;
&lt;p&gt;Medium provides &lt;a href=&quot;https://help.medium.com/hc/en-us/articles/214874118-RSS-feeds&quot;&gt;officially supported&lt;/a&gt; RSS feeds that are available by prepending &quot;/feed/&quot; to your feed&apos;s URL.&lt;/p&gt;
&lt;p&gt;For example - &lt;a href=&quot;https://medium.com/feed/@prashantramnyc&quot;&gt;https://medium.com/feed/@prashantramnyc&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;#x3C;ITEM&gt;
    &amp;#x3C;TITLE&gt;&amp;#x3C;![CDATA[Difference between var, let and const in Javascript.]]&gt;&amp;#x3C;/TITLE&gt;
    &amp;#x3C;DESCRIPTION&gt;&amp;#x3C;![CDATA[&amp;#x3C;div class=&quot;medium-feed-item&quot;&gt;...&amp;#x3C;/div&gt;]]&gt;&amp;#x3C;/DESCRIPTION&gt;
    &amp;#x3C;LINK&gt;https://codeburst.io/difference-between-var-let-and-const-in-javascript-fbce2fba7b4?source=rss-eeafca132b1e------2&amp;#x3C;/LINK&gt;
    &amp;#x3C;GUID ISPERMALINK=&quot;FALSE&quot;&gt;https://medium.com/p/fbce2fba7b4&amp;#x3C;/GUID&gt;
    &amp;#x3C;CATEGORY&gt;&amp;#x3C;![CDATA[codingbootcamp]]&gt;&amp;#x3C;/CATEGORY&gt;
    &amp;#x3C;CATEGORY&gt;&amp;#x3C;![CDATA[coding]]&gt;&amp;#x3C;/CATEGORY&gt;
    &amp;#x3C;CATEGORY&gt;&amp;#x3C;![CDATA[javascript-tips]]&gt;&amp;#x3C;/CATEGORY&gt;
    &amp;#x3C;CATEGORY&gt;&amp;#x3C;![CDATA[programming]]&gt;&amp;#x3C;/CATEGORY&gt;
    &amp;#x3C;CATEGORY&gt;&amp;#x3C;![CDATA[javascript]]&gt;&amp;#x3C;/CATEGORY&gt;
    &amp;#x3C;DC:CREATOR&gt;&amp;#x3C;![CDATA[Prashant Ram]]&gt;&amp;#x3C;/DC:CREATOR&gt;
    &amp;#x3C;PUBDATE&gt;Tue, 21 May 2019 18:59:39 GMT&amp;#x3C;/PUBDATE&gt;
    &amp;#x3C;ATOM:UPDATED&gt;2019-05-22T14:18:46.943Z&amp;#x3C;/ATOM:UPDATED&gt;
&amp;#x3C;/ITEM&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Officially supported&lt;/li&gt;
&lt;li&gt;Works for both user and publication feeds&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Only latest articles are available - not a good solution for retrieving all your posts.&lt;/li&gt;
&lt;li&gt;Feed won&apos;t necessarily have entire article content - as is the nature of RSS, some articles may only show an excerpt with a link to the full article.&lt;/li&gt;
&lt;li&gt;Tools using this approach: the DEV &lt;a href=&quot;https://dev.to/settings/publishing-from-rss&quot;&gt;feed import&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;JSON API&lt;/h2&gt;
&lt;p&gt;For the more adventurous, it&apos;s possible to retrieve a low-level JSON structure of feeds and posts.&lt;/p&gt;
&lt;p&gt;This is achieved by using the &quot;format=json&quot; url parameter:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Feeds - &lt;a href=&quot;https://medium.com/@prashantramnyc?format=json&quot;&gt;https://medium.com/@prashantramnyc?format=json&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Posts - &lt;a href=&quot;https://medium.com/@rossbulat/image-processing-in-nodejs-with-jimp-174f39336153?format=json&quot;&gt;https://medium.com/@rossbulat/image-processing-in-nodejs-with-jimp-174f39336153?format=json&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
 &quot;success&quot;:true,
 &quot;payload&quot;:{
    &quot;value&quot;:{
       &quot;content&quot;:{
          &quot;subtitle&quot;:&quot;Full code example: combining images, watermarking, fonts and text&quot;,
          &quot;bodyModel&quot;:{
             &quot;paragraphs&quot;:[
                {
                   &quot;name&quot;:&quot;2e10&quot;,
                   &quot;type&quot;:3,
                   &quot;text&quot;:&quot;Image Processing in NodeJS with Jimp&quot;,
                   &quot;markups&quot;:[ ]
                },
                ...
             ]
          }
       }
    }
 }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that the JSON is returned with a &quot;while(1)&quot; that Medium put in place to prevent &lt;a href=&quot;https://haacked.com/archive/2009/06/25/json-hijacking.aspx/&quot;&gt;JSON hijacking&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Contains all available posts and information&lt;/li&gt;
&lt;li&gt;Can be automated&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Undocumented and subject to breaking changes&lt;/li&gt;
&lt;li&gt;Complex JSON structure&lt;/li&gt;
&lt;li&gt;Can be limited by Medium&apos;s paywall&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tools using this approach: &lt;a href=&quot;https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-source-medium&quot;&gt;gatsby-source-medium&lt;/a&gt;, &lt;a href=&quot;https://github.com/xdamman/mediumexporter&quot;&gt;mediumexporter&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Export File&lt;/h2&gt;
&lt;p&gt;You can &lt;a href=&quot;https://medium.com/me/export&quot;&gt;request to download&lt;/a&gt; all your information from Medium. After making the request you&apos;ll receive a link to a zip file with the following directory structure:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;blocks
bookmarks
claps
highlights
interests
posts
profile
pubs-following
sessions
topics-following
users-following
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Each directory contains HTML files with minimal styling and structure.&lt;/p&gt;
&lt;p&gt;The &quot;posts&quot; directory contains all your posts including drafts and comments.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Officially supported&lt;/li&gt;
&lt;li&gt;Contains all of your posts in one accessible place&lt;/li&gt;
&lt;li&gt;Has lots of other info that a user might want when migrating to a new platform&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Requires the manual process of requesting the Zip file (although an Email with the link is sent very quickly in our experience) - can&apos;t easily be automated.&lt;/li&gt;
&lt;li&gt;Posts are missing some information - the post tags aren&apos;t available and it&apos;s tricky to detect if a post is a full post or a comment.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tools using this approach: &lt;a href=&quot;https://github.com/gautamdhameja/medium-2-md&quot;&gt;medium-2-md&lt;/a&gt;, &lt;a href=&quot;https://github.com/ageitgey/medium_to_ghost&quot;&gt;mediumtoghost&lt;/a&gt;, &lt;a href=&quot;https://github.com/mathieudutour/medium-to-own-blog&quot;&gt;medium-to-own-blog&lt;/a&gt;, &lt;a href=&quot;https://github.com/jamischarles/export-medium-to-gatsby&quot;&gt;export-medium-to-gatsby&lt;/a&gt;, Stackbit!&lt;/p&gt;
&lt;p&gt;As each of these methods has its own set of drawbacks, tools often combine them to get all the content they require. For example - starting with the export zip file and augmenting it with information from the JSON API.&lt;/p&gt;
&lt;h2&gt;At Stackbit&lt;/h2&gt;
&lt;p&gt;Stackbit makes it extremely easy to create modern websites powered by a variety of data sources including Medium.&lt;/p&gt;
&lt;p&gt;At Stackbit we created a tool that works on the export file obtained from Medium. It converts the posts to Markdown files with a structure that is easy for us to transpile into any of our supported SSG&apos;s.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The importer follows this flow:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Extract information from each post&apos;s HTML - title, thumbnail, excerpt, images, etc. We use &lt;a href=&quot;https://github.com/cheeriojs/cheerio&quot;&gt;cheerio&lt;/a&gt; to parse out the information directly from the HTML:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// This is the comment
get title() {
  return this.$(&apos;title&apos;).text().trim();
}

get subtitle() {
  return this.$(&apos;h4[class*=&quot;graf--subtitle&quot;]&apos;).text().trim();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Download images - store them locally grouped by the post&apos;s slug&lt;/li&gt;
&lt;li&gt;Simplify HTML - the exported HTML file is very noisy. We use &lt;a href=&quot;https://github.com/apostrophecms/sanitize-html&quot;&gt;sanitize-html&lt;/a&gt; to remove unneeded attributes and structural elements. This simplifies the task for the next step and helps us decouple ourselves from future changes to the format of the file. Some information is retained and manipulated to assist the next steps.&lt;/li&gt;
&lt;li&gt;Convert post content to Markdown - combine with extracted info to export front matter with Markdown content. We replace external images with those that were downloaded. We use &lt;a href=&quot;https://github.com/domchristie/turndown&quot;&gt;turndown&lt;/a&gt; and take advantage of custom rules to preserve IFrames such as Twitter embeds:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;turndownService.addRule(&apos;twitter-tweet&apos;, {
    filter: (node) =&gt; {
        return node.nodeName === &apos;BLOCKQUOTE&apos; &amp;#x26;&amp;#x26; node.getAttribute(&apos;class&apos;) === &apos;twitter-tweet&apos;;
    },
    replacement: (innerHTML, node) =&gt; node.outerHTML
});
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Extract profile information - the &quot;profile.html&quot; file contains the name of the user along with their Email address and social profiles that were connected to Medium. We create a JSON structure with this information to make it easily consumable.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At Stackbit the output can then be combined into our existing themes and transpiled to the user&apos;s SSG of choice.&lt;/p&gt;
&lt;p&gt;The tool is &lt;a href=&quot;https://github.com/stackbithq/stackbit-medium-importer&quot;&gt;available on GitHub&lt;/a&gt; and is live on the &lt;a href=&quot;https://www.stackbit.com/medium&quot;&gt;Stackbit site&lt;/a&gt;. We&apos;re always looking to improve things and welcome your input.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[From monoliths to the modern web - The great unbundling]]></title><description><![CDATA[The shift from building websites using monolithic projects like Wordpress to more modern approaches like site generators, Headless CMS and deploy workflows has been accelerating in recent years]]></description><link>https://www.stackbit.com/blog/from-monoliths-to-the-modern-web-the-great-unbundling/</link><guid isPermaLink="false">https://www.stackbit.com/blog/from-monoliths-to-the-modern-web-the-great-unbundling/</guid><pubDate>Mon, 27 May 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Prehistory&lt;/h2&gt;
&lt;p&gt;In the good old days we may have used a publishing tool like Wordpress on a shared VPS and life was simple, we leveraged OSS like WP/cPanel and paid little to nothing for access to commoditized hosting. While that made sense for a while it quickly became a sub-par way to run a a site, the main reasons being speed (rendering pages on each request) and security (WP was getting hacked every other day and sometimes twice a day). While we had kind of full control over how our content was being published and presented it felt like we were sacrificing important parts of the reading, writing and hosting experience.&lt;/p&gt;
&lt;p&gt;I remember the day I got tired of running a slow WP site that constantly got hacked and decided to put a static snapshot of my site on S3. Things instantly became secure, fast and very simple... at least until it came time to edit my site and I realized that I had inadvertently or perhaps purposefully given up on having a CMS to edit and create content. For a while there I used Cyberduck which is a Mac FTP client that also supports editing content in S3 buckets to edit my site&apos;s HTML/CSS. No WYSIWYG, no Markdown, no previews, no drag and drop image uploading but something about this bare bones experience resonated with me. Its kind of how like camping with a limited amount of equipment can make one rethink their day-to-day setup back home.&lt;/p&gt;
&lt;p&gt;This got me thinking about how to edit content and resulted in the prototyping of a bare-bones JS-based CMS that interacted directly with S3 and lived in your browser. Everything you needed to edit a page on the site came with that page and would just be written to S3 once you hit save. This lasted for longer than you would expect and kept me curious about how editing websites would happen outside of monolithic publishing systems.&lt;/p&gt;
&lt;h2&gt;Separating content editing and rendering&lt;/h2&gt;
&lt;p&gt;What followed in the eco-system was a conceptual breakdown of the older silo&apos;d systems and the emergence of companies/products that made it easy to edit content without much regard to how and where that content is used. You may have heard of companies like &lt;a href=&quot;https://www.contentful.com/&quot;&gt;Contentful&lt;/a&gt;, &lt;a href=&quot;https://www.sanity.io/&quot;&gt;Sanity.io&lt;/a&gt;, &lt;a href=&quot;https://www.datocms.com/&quot;&gt;DatoCMS&lt;/a&gt; and others who offer an API-based CMS or &lt;a href=&quot;http://forestry.io/&quot;&gt;Forestry.io&lt;/a&gt; and &lt;a href=&quot;https://www.netlifycms.org/&quot;&gt;NetlifyCMS&lt;/a&gt; which offer a git-based CMS. They all focus on the content creation and editing experience and not on how that content actually makes it to the web, mobile devices, etc. When coupled with static site rendering and deployment solutions like &lt;a href=&quot;https://www.netlify.com/&quot;&gt;Netlify&lt;/a&gt; this separation results in superior security because the main attack vector (vulnerabilities in large OSS projects coupled with full visibility into where that software runs) goes away instantly. In other words Contentful is likely more secure than WP but more importantly attackers are unlikely to know you even use it to manage your content.&lt;/p&gt;
&lt;h2&gt;The emergence of a git-based pipeline&lt;/h2&gt;
&lt;p&gt;It&apos;s around this time that the evolution of front-end development frameworks started its rapid acceleration and with this complexity came the need, or rather the potential, to establish a front-end pipeline. Sites started getting generated with software like &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;, &lt;a href=&quot;https://gohugo.io/&quot;&gt;Hugo&lt;/a&gt; and later &lt;a href=&quot;https://www.gatsbyjs.org/&quot;&gt;Gatsby&lt;/a&gt; and content got pulled in build-time from a myriad of data sources. This was wrapped with additional build tools and bundlers like Gulp, Webpack, etc. Luckily enough companies like Netlify built platforms to help us manage and think about these processes at a higher level.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://dev.to/oyetoket/which-is-the-best-static-site-generator-and-why-42e2&quot;&gt;Which is the Best Static Site Generator and Why?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The role that git and Github played in this rearchitecting is pivotal because your website turned from a VPS instance with a WordPress install on it to a git repo with webhooks into CI/CD services. This git repo contains configuration for your generator of choice, templates and sometimes even the content for your website in Markdown format. When using an API-based CMS your repo will contain all the configuration needed to pull the most recent version of your content from your CMS of choice.&lt;/p&gt;
&lt;h2&gt;JAMstack and the modern web&lt;/h2&gt;
&lt;p&gt;What do you call this process and the websites that come out the other side? Its not long ago that the term &lt;a href=&quot;https://jamstack.org/&quot;&gt;JAMstack&lt;/a&gt; was coined by Matt Biilman and Chris Bach as way to describe the shift from the older technology-specific stacks like LAMP to a more modern architecture where websites can be built from client-side JavaScript, reusable APIs and prebuilt Markup. The rapid adoption of the term JAMstack serves as a reminder that sometimes clearly articulating an approach that so many people are already curious about or playing with can help to rapidly accelerate the adoption of both the approach and the term.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://dev.to/borisschapira/back-to-static-a-paradigm-shift-for-better-ux-and-web-performance-4ljc&quot;&gt;Back to static with JAMStack: a paradigm shift for better UX and web performance&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Harnessing the power of these new methodologies
Once we internalize the fact that content can be easily created in one place and used in one, or more, other places this opens up many new and interesting workflows. It is worth noting that the historic use of RSS feeds to synchronize and syndicate content from one place on the web to another can be seen as a telling sign of the need and desire to interconnect different content sources and publishing systems. The only thing that changed are the tools (webhooks, CMS APIs, GraphQL) and the new workflows the more elaborate workflows they enable.&lt;/p&gt;
&lt;p&gt;No longer is your site being edited and rendered with the same code-base or even on the same server. The unbundling of the monoliths means we&apos;re using more appropriate software and approaches to tackle each one of the challenges that exist in creating modern websites. We&apos;re in 2019 and it feels like we&apos;re in a unique point in time where I believe the modern stack has been called out and adopted by many bleeding edge developers/shops but at the same time the tooling around this stack is still in its infancy.&lt;/p&gt;
&lt;p&gt;When this realization hit me last year I sat down with a few friends to try and prototype some ideas that would try to combine the simplicity we&apos;re used to from consumer site-builders with the power of the modern architecture and ecosystem. These prototypes rapidly evolved and got to a point where we all agreed there&apos;s a big valuable problem that can be solved here. We called our company Stackbit because we like software stacks and bits, it also helped that the domain was kind of available. With Stackbit we want to make creating modern websites easy and accessible to everyone, and we&apos;re confident that ideas like Stackbit and others are pushing the whole category forward as they increase adoption by leveling the playing field.&lt;/p&gt;
&lt;p&gt;If you&apos;d like to learn more about the modern web ecosystem here are some links&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.stackbit.com&quot;&gt;https://www.stackbit.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://jamstack.org&quot;&gt;https://jamstack.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.smashingmagazine.com/2015/11/modern-static-website-generators-next-big-thing/&quot;&gt;&quot;Why Static Site Generators Are The Next Big Thing&quot;&lt;/a&gt;, Matt Biilmann&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gatsbyjs.org/blog/2018-10-04-journey-to-the-content-mesh/&quot;&gt;&quot;Delivering Modern Website Experiences: The Journey to a Content Mesh&quot;&lt;/a&gt;, Sam Bhagwat&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Create modern sites in minutes, now supporting DatoCMS]]></title><description><![CDATA[Stackbit adds support for DatoCMS - Content Management Made Simple.]]></description><link>https://www.stackbit.com/blog/create-modern-sites-in-minutes-now-supporting-DatoCMS/</link><guid isPermaLink="false">https://www.stackbit.com/blog/create-modern-sites-in-minutes-now-supporting-DatoCMS/</guid><pubDate>Sun, 26 May 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;At Stackbit our goal is to make creating and maintaining modern websites easy. A core strategy of getting to that goal is recognizing the diversity of modern, headless Content Management Systems and enabling our users to pick and choose the ones that work best for their various use-cases.&lt;/p&gt;
&lt;p&gt;Today we&apos;re excited to add support for a CMS that has been often requested by our users - DatoCMS. We really enjoyed working with the DatoCMS team on the integration and after ironing out all the edge cases we think DatoCMS users will find it thrilling to create modern websites in minutes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1562447757-datocms.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Some cool technical details:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nested data within pages and site content in general show up as a heirarchy of DatoCMS link type fields&lt;/li&gt;
&lt;li&gt;Page sections can be rearranged via the CMS&lt;/li&gt;
&lt;li&gt;We created our own special field editor plugin to enable the editing of list enumerations - &lt;a href=&quot;https://github.com/stackbithq/datocms-plugin-typed-list&quot;&gt;https://github.com/stackbithq/datocms-plugin-typed-list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We&apos;ve filtered down the CMS Sidebar to simplify navigation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Get started today, here are some cool things you can jump into:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://app.stackbit.com/wizard?theme=fjord&amp;#x26;ssg=gatsby&amp;#x26;cms=datocms&quot;&gt;Create a minimal Blog with Gatsby and DatoCMS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://app.stackbit.com/wizard?theme=fresh&amp;#x26;ssg=hugo&amp;#x26;cms=datocms&quot;&gt;Start a personal site with Hugo and DatoCMS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.stackbit.com/medium/&quot;&gt;Import your Medium blog and edit it with DatoCMS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For a detailed walkthrough see this &lt;a href=&quot;https://www.datocms.com/blog/how-to-create-a-jamstack-site-in-minutes-with-stackbit/&quot;&gt;great writeup&lt;/a&gt; by the DatoCMS team.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Introducing Three New Stackbit Starter Themes]]></title><description><![CDATA[Following popular demand, we've added three new themes focused on personal sites, and blogs, all with minimal and clean design.]]></description><link>https://www.stackbit.com/blog/introducing-three-new-stackbit-starter-themes/</link><guid isPermaLink="false">https://www.stackbit.com/blog/introducing-three-new-stackbit-starter-themes/</guid><pubDate>Sat, 25 May 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;The Breakdown&lt;/h2&gt;
&lt;p&gt;We&apos;ve created three new clean, minimalistic Stackbit themes which are ideally suited for personal sites and blogs. You may have noticed these themes last week when trying the new &lt;a href=&quot;https://www.stackbit.com/blog/migrate-your-medium-blog-to-a-modern-jamstack-site-with-stackbit/&quot;&gt;Medium Importer&lt;/a&gt; as they were being tested there. Starting today the new themes are available in the main Stackbit flow and like all other themes can be used with with any combination of CMS and SSGs of your choice.&lt;/p&gt;
&lt;h2&gt;Fjord - Minimal blog&lt;/h2&gt;
&lt;p&gt;Taking inspiration from travel and nature, Fjord is a cleanly designed blog theme that can showcase beautiful and expansive photos. Fear not if photos are not your primary focus, it can easily adapt - removing the side bar image simply leaves a clean and pleasant dark background that contrasts your content pages.&lt;/p&gt;
&lt;iframe width=&quot;640&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/388369nh28A?controls=0&amp;autoplay=1&amp;mute=1&amp;playlist=388369nh28A&amp;loop=1&amp;origin=https://stackbit.com&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; loop; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;a href=&quot;https://themes.stackbit.com/demos/fjord/&quot;&gt;Preview Fjord&lt;/a&gt; -
&lt;a href=&quot;https://app.stackbit.com/create?theme=https://github.com/stackbithq/stackbit-theme-fjord&quot;&gt;&lt;img src=&quot;https://assets.stackbit.com/badge/create-with-stackbit.svg&quot; alt=&quot;Create with Stackbit&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;All starter themes provide an abundance of configurability via your CMS, for example Fjord allows you to set the accent color to one of four presets.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1562448207-theme-fjord-config.png&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Ampersand - Magazine style blog&lt;/h2&gt;
&lt;p&gt;Borrowing from leisure, fashion, architecture and lifestyle magazines, Ampersand presents its highlighted content on the home page, instantly allowing visitors to take in an overview of your blog.&lt;/p&gt;
&lt;iframe width=&quot;640&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/TBJ4N7uaSsc?controls=0&amp;autoplay=1&amp;mute=1&amp;playlist=TBJ4N7uaSsc&amp;loop=1&amp;origin=https://stackbit.com&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; loop; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;a href=&quot;https://themes.stackbit.com/demos/ampersand/&quot;&gt;Preview Ampersand&lt;/a&gt; -
&lt;a href=&quot;https://app.stackbit.com/create?theme=https://github.com/stackbithq/stackbit-theme-ampersand&quot;&gt;&lt;img src=&quot;https://assets.stackbit.com/badge/create-with-stackbit.svg&quot; alt=&quot;Create with Stackbit&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can adjust the color palette from the CMS, as well switch between grid and list views for the homepage.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1562448242-theme-ampersdand-config.png&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Fresh - Personal site&lt;/h2&gt;
&lt;p&gt;Fresh enables people to create personal sites that focus on their online personas and content while maintaining a crisp design that can be easily adjusted and customized.&lt;/p&gt;
&lt;iframe width=&quot;640&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/1vuzYB_nIko?controls=0&amp;autoplay=1&amp;mute=1&amp;playlist=1vuzYB_nIko&amp;loop=1&amp;origin=https://stackbit.com&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; loop; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;a href=&quot;https://themes.stackbit.com/demos/fresh/&quot;&gt;Preview Fresh&lt;/a&gt; -
&lt;a href=&quot;https://app.stackbit.com/create?theme=https://github.com/stackbithq/stackbit-theme-fresh&quot;&gt;&lt;img src=&quot;https://assets.stackbit.com/badge/create-with-stackbit.svg&quot; alt=&quot;Create with Stackbit&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To get you started, Fresh has similar controls to the first two themes, adding the ability to change the left column to a light background, as well as allowing for larger in-line images for extra emphasis.&lt;/p&gt;
&lt;h2&gt;What Themes Would You Like to See Next?&lt;/h2&gt;
&lt;p&gt;We&apos;re working on enabling you to bring your own themes into Stackbit while we release a clean set of starters. Is there a particular theme you&apos;d like to see? &lt;a href=&quot;https://forms.gle/f3wGJ8W4nDaycS3G6&quot;&gt;Let us know&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Migrate your Medium blog to a modern JAMstack site with Stackbit]]></title><description><![CDATA[We're glad to announce the release of our Medium importer - create a modern JAMstack website from an existing Medium blog.]]></description><link>https://www.stackbit.com/blog/migrate-your-medium-blog-to-a-modern-jamstack-site-with-stackbit/</link><guid isPermaLink="false">https://www.stackbit.com/blog/migrate-your-medium-blog-to-a-modern-jamstack-site-with-stackbit/</guid><pubDate>Wed, 01 May 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;We&apos;re glad to announce the release of our &lt;a href=&quot;https://www.stackbit.com/medium/&quot;&gt;Medium importer&lt;/a&gt; - instantly create a modern JAMstack website from an existing Medium blog.&lt;/p&gt;
&lt;h2&gt;Why are some people leaving Medium&lt;/h2&gt;
&lt;p&gt;Medium offers a fantastic writing experience; however, you may have noticed a growing trend of folks looking to move over to more open stacks where they can have full control of their content and how its displayed/shared/monetized. It&apos;s part data ownership and portability, part people realizing how their site/blog is core to their online identity and them wanting more control over it which is awesome. What&apos;s really great is that the modern web is evolving in a way that gives people the ability to separate content/editing from presentation and publishing. You don&apos;t have to give up control of your content, limit yourself to publishing on a specific domain or avoid styling your online persona the way you like.&lt;/p&gt;
&lt;h2&gt;Stackbit and the JAMstack&lt;/h2&gt;
&lt;p&gt;Stackbit enables people to create modern JAMstack sites in 60 seconds by offering themes and handling all the provisioning/wiring. Now with the Medium importer you can go from a Medium blog to your own Gatsby site on Netlify with a Forestry.io CMS back-end, or any other combination thereof in about a minute. We&apos;re also beta testing three new Stackbit themes which offer a clean and functional starting point for blogs. We should be ready to incorporate the new themes into the main Stackbit flow next week, you can expect a blog post with some background on why and how we decided to create them. In the mean time here are some screenshots of &lt;em&gt;Fjord&lt;/em&gt;, &lt;em&gt;Ampersand&lt;/em&gt; and &lt;em&gt;Fresh&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1562291182-fjord.jpg&quot; alt=&quot;Fjord&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1562291179-ampersand.jpg&quot; alt=&quot;Ampersand&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1562291182-fresh.jpg&quot; alt=&quot;Fresh&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.stackbit.com/medium/&quot;&gt;Import&lt;/a&gt; your Medium blog today or &lt;a href=&quot;https://app.stackbit.com/wizard&quot;&gt;start a new&lt;/a&gt; blog on Stackbit.&lt;/p&gt;</content:encoded></item></channel></rss>